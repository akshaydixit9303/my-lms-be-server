/**
 * MS.LPS.API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ICCProfile', 'model/IPdfPageEvent', 'model/Image', 'model/OutputStreamCounter', 'model/PdfAcroForm', 'model/PdfCollection', 'model/PdfContentByte', 'model/PdfDictionary', 'model/PdfIndirectReference', 'model/PdfName', 'model/PdfOCProperties', 'model/PdfOutline', 'model/PdfPageLabels', 'model/PdfStructureTreeRoot', 'model/PdfTransition', 'model/Rectangle', 'model/XmpWriter'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ICCProfile'), require('./IPdfPageEvent'), require('./Image'), require('./OutputStreamCounter'), require('./PdfAcroForm'), require('./PdfCollection'), require('./PdfContentByte'), require('./PdfDictionary'), require('./PdfIndirectReference'), require('./PdfName'), require('./PdfOCProperties'), require('./PdfOutline'), require('./PdfPageLabels'), require('./PdfStructureTreeRoot'), require('./PdfTransition'), require('./Rectangle'), require('./XmpWriter'));
  } else {
    // Browser globals (root is window)
    if (!root.Mslpsapi) {
      root.Mslpsapi = {};
    }
    root.Mslpsapi.PdfWriter = factory(root.Mslpsapi.ApiClient, root.Mslpsapi.ICCProfile, root.Mslpsapi.IPdfPageEvent, root.Mslpsapi.Image, root.Mslpsapi.OutputStreamCounter, root.Mslpsapi.PdfAcroForm, root.Mslpsapi.PdfCollection, root.Mslpsapi.PdfContentByte, root.Mslpsapi.PdfDictionary, root.Mslpsapi.PdfIndirectReference, root.Mslpsapi.PdfName, root.Mslpsapi.PdfOCProperties, root.Mslpsapi.PdfOutline, root.Mslpsapi.PdfPageLabels, root.Mslpsapi.PdfStructureTreeRoot, root.Mslpsapi.PdfTransition, root.Mslpsapi.Rectangle, root.Mslpsapi.XmpWriter);
  }
}(this, function(ApiClient, ICCProfile, IPdfPageEvent, Image, OutputStreamCounter, PdfAcroForm, PdfCollection, PdfContentByte, PdfDictionary, PdfIndirectReference, PdfName, PdfOCProperties, PdfOutline, PdfPageLabels, PdfStructureTreeRoot, PdfTransition, Rectangle, XmpWriter) {
  'use strict';




  /**
   * The PdfWriter model module.
   * @module model/PdfWriter
   * @version v1
   */

  /**
   * Constructs a new <code>PdfWriter</code>.
   * @alias module:model/PdfWriter
   * @class
   */
  var exports = function() {
    var _this = this;















































  };

  /**
   * Constructs a <code>PdfWriter</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PdfWriter} obj Optional instance to populate.
   * @return {module:model/PdfWriter} The populated <code>PdfWriter</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('Info')) {
        obj['Info'] = PdfDictionary.constructFromObject(data['Info']);
      }
      if (data.hasOwnProperty('InitialLeading')) {
        obj['InitialLeading'] = ApiClient.convertToType(data['InitialLeading'], 'Number');
      }
      if (data.hasOwnProperty('DirectContent')) {
        obj['DirectContent'] = PdfContentByte.constructFromObject(data['DirectContent']);
      }
      if (data.hasOwnProperty('DirectContentUnder')) {
        obj['DirectContentUnder'] = PdfContentByte.constructFromObject(data['DirectContentUnder']);
      }
      if (data.hasOwnProperty('ColorProfile')) {
        obj['ColorProfile'] = ICCProfile.constructFromObject(data['ColorProfile']);
      }
      if (data.hasOwnProperty('PdfIndirectReference')) {
        obj['PdfIndirectReference'] = PdfIndirectReference.constructFromObject(data['PdfIndirectReference']);
      }
      if (data.hasOwnProperty('Os')) {
        obj['Os'] = OutputStreamCounter.constructFromObject(data['Os']);
      }
      if (data.hasOwnProperty('ExtraCatalog')) {
        obj['ExtraCatalog'] = PdfDictionary.constructFromObject(data['ExtraCatalog']);
      }
      if (data.hasOwnProperty('PageDictEntries')) {
        obj['PageDictEntries'] = PdfDictionary.constructFromObject(data['PageDictEntries']);
      }
      if (data.hasOwnProperty('PageNumber')) {
        obj['PageNumber'] = ApiClient.convertToType(data['PageNumber'], 'Integer');
      }
      if (data.hasOwnProperty('CurrentPageNumber')) {
        obj['CurrentPageNumber'] = ApiClient.convertToType(data['CurrentPageNumber'], 'Integer');
      }
      if (data.hasOwnProperty('Tabs')) {
        obj['Tabs'] = PdfName.constructFromObject(data['Tabs']);
      }
      if (data.hasOwnProperty('PageEvent')) {
        obj['PageEvent'] = IPdfPageEvent.constructFromObject(data['PageEvent']);
      }
      if (data.hasOwnProperty('RootOutline')) {
        obj['RootOutline'] = PdfOutline.constructFromObject(data['RootOutline']);
      }
      if (data.hasOwnProperty('Outlines')) {
        obj['Outlines'] = ApiClient.convertToType(data['Outlines'], [{'String': Object}]);
      }
      if (data.hasOwnProperty('PdfVersion')) {
        obj['PdfVersion'] = ApiClient.convertToType(data['PdfVersion'], 'String');
      }
      if (data.hasOwnProperty('ViewerPreferences')) {
        obj['ViewerPreferences'] = ApiClient.convertToType(data['ViewerPreferences'], 'Integer');
      }
      if (data.hasOwnProperty('PageLabels')) {
        obj['PageLabels'] = PdfPageLabels.constructFromObject(data['PageLabels']);
      }
      if (data.hasOwnProperty('Collection')) {
        obj['Collection'] = PdfCollection.constructFromObject(data['Collection']);
      }
      if (data.hasOwnProperty('AcroForm')) {
        obj['AcroForm'] = PdfAcroForm.constructFromObject(data['AcroForm']);
      }
      if (data.hasOwnProperty('SigFlags')) {
        obj['SigFlags'] = ApiClient.convertToType(data['SigFlags'], 'Integer');
      }
      if (data.hasOwnProperty('XmpMetadata')) {
        obj['XmpMetadata'] = ApiClient.convertToType(data['XmpMetadata'], 'String');
      }
      if (data.hasOwnProperty('PageXmpMetadata')) {
        obj['PageXmpMetadata'] = ApiClient.convertToType(data['PageXmpMetadata'], 'String');
      }
      if (data.hasOwnProperty('XmpWriter')) {
        obj['XmpWriter'] = XmpWriter.constructFromObject(data['XmpWriter']);
      }
      if (data.hasOwnProperty('PDFXConformance')) {
        obj['PDFXConformance'] = ApiClient.convertToType(data['PDFXConformance'], 'Integer');
      }
      if (data.hasOwnProperty('FullCompression')) {
        obj['FullCompression'] = ApiClient.convertToType(data['FullCompression'], 'Boolean');
      }
      if (data.hasOwnProperty('CompressionLevel')) {
        obj['CompressionLevel'] = ApiClient.convertToType(data['CompressionLevel'], 'Integer');
      }
      if (data.hasOwnProperty('CurrentDocumentSize')) {
        obj['CurrentDocumentSize'] = ApiClient.convertToType(data['CurrentDocumentSize'], 'Integer');
      }
      if (data.hasOwnProperty('StructureTreeRoot')) {
        obj['StructureTreeRoot'] = PdfStructureTreeRoot.constructFromObject(data['StructureTreeRoot']);
      }
      if (data.hasOwnProperty('OCProperties')) {
        obj['OCProperties'] = PdfOCProperties.constructFromObject(data['OCProperties']);
      }
      if (data.hasOwnProperty('PageSize')) {
        obj['PageSize'] = Rectangle.constructFromObject(data['PageSize']);
      }
      if (data.hasOwnProperty('CropBoxSize')) {
        obj['CropBoxSize'] = Rectangle.constructFromObject(data['CropBoxSize']);
      }
      if (data.hasOwnProperty('PageEmpty')) {
        obj['PageEmpty'] = ApiClient.convertToType(data['PageEmpty'], 'Boolean');
      }
      if (data.hasOwnProperty('Duration')) {
        obj['Duration'] = ApiClient.convertToType(data['Duration'], 'Integer');
      }
      if (data.hasOwnProperty('Transition')) {
        obj['Transition'] = PdfTransition.constructFromObject(data['Transition']);
      }
      if (data.hasOwnProperty('Thumbnail')) {
        obj['Thumbnail'] = Image.constructFromObject(data['Thumbnail']);
      }
      if (data.hasOwnProperty('Group')) {
        obj['Group'] = PdfDictionary.constructFromObject(data['Group']);
      }
      if (data.hasOwnProperty('SpaceCharRatio')) {
        obj['SpaceCharRatio'] = ApiClient.convertToType(data['SpaceCharRatio'], 'Number');
      }
      if (data.hasOwnProperty('RunDirection')) {
        obj['RunDirection'] = ApiClient.convertToType(data['RunDirection'], 'Integer');
      }
      if (data.hasOwnProperty('Userunit')) {
        obj['Userunit'] = ApiClient.convertToType(data['Userunit'], 'Number');
      }
      if (data.hasOwnProperty('DefaultColorspace')) {
        obj['DefaultColorspace'] = PdfDictionary.constructFromObject(data['DefaultColorspace']);
      }
      if (data.hasOwnProperty('StrictImageSequence')) {
        obj['StrictImageSequence'] = ApiClient.convertToType(data['StrictImageSequence'], 'Boolean');
      }
      if (data.hasOwnProperty('UserProperties')) {
        obj['UserProperties'] = ApiClient.convertToType(data['UserProperties'], 'Boolean');
      }
      if (data.hasOwnProperty('RgbTransparencyBlending')) {
        obj['RgbTransparencyBlending'] = ApiClient.convertToType(data['RgbTransparencyBlending'], 'Boolean');
      }
      if (data.hasOwnProperty('PageCount')) {
        obj['PageCount'] = ApiClient.convertToType(data['PageCount'], 'Integer');
      }
      if (data.hasOwnProperty('CloseStream')) {
        obj['CloseStream'] = ApiClient.convertToType(data['CloseStream'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * @member {module:model/PdfDictionary} Info
   */
  exports.prototype['Info'] = undefined;
  /**
   * @member {Number} InitialLeading
   */
  exports.prototype['InitialLeading'] = undefined;
  /**
   * @member {module:model/PdfContentByte} DirectContent
   */
  exports.prototype['DirectContent'] = undefined;
  /**
   * @member {module:model/PdfContentByte} DirectContentUnder
   */
  exports.prototype['DirectContentUnder'] = undefined;
  /**
   * @member {module:model/ICCProfile} ColorProfile
   */
  exports.prototype['ColorProfile'] = undefined;
  /**
   * @member {module:model/PdfIndirectReference} PdfIndirectReference
   */
  exports.prototype['PdfIndirectReference'] = undefined;
  /**
   * @member {module:model/OutputStreamCounter} Os
   */
  exports.prototype['Os'] = undefined;
  /**
   * @member {module:model/PdfDictionary} ExtraCatalog
   */
  exports.prototype['ExtraCatalog'] = undefined;
  /**
   * @member {module:model/PdfDictionary} PageDictEntries
   */
  exports.prototype['PageDictEntries'] = undefined;
  /**
   * @member {Integer} PageNumber
   */
  exports.prototype['PageNumber'] = undefined;
  /**
   * @member {Integer} CurrentPageNumber
   */
  exports.prototype['CurrentPageNumber'] = undefined;
  /**
   * @member {module:model/PdfName} Tabs
   */
  exports.prototype['Tabs'] = undefined;
  /**
   * @member {module:model/IPdfPageEvent} PageEvent
   */
  exports.prototype['PageEvent'] = undefined;
  /**
   * @member {module:model/PdfOutline} RootOutline
   */
  exports.prototype['RootOutline'] = undefined;
  /**
   * @member {Array.<Object.<String, Object>>} Outlines
   */
  exports.prototype['Outlines'] = undefined;
  /**
   * @member {String} PdfVersion
   */
  exports.prototype['PdfVersion'] = undefined;
  /**
   * @member {Integer} ViewerPreferences
   */
  exports.prototype['ViewerPreferences'] = undefined;
  /**
   * @member {module:model/PdfPageLabels} PageLabels
   */
  exports.prototype['PageLabels'] = undefined;
  /**
   * @member {module:model/PdfCollection} Collection
   */
  exports.prototype['Collection'] = undefined;
  /**
   * @member {module:model/PdfAcroForm} AcroForm
   */
  exports.prototype['AcroForm'] = undefined;
  /**
   * @member {Integer} SigFlags
   */
  exports.prototype['SigFlags'] = undefined;
  /**
   * @member {String} XmpMetadata
   */
  exports.prototype['XmpMetadata'] = undefined;
  /**
   * @member {String} PageXmpMetadata
   */
  exports.prototype['PageXmpMetadata'] = undefined;
  /**
   * @member {module:model/XmpWriter} XmpWriter
   */
  exports.prototype['XmpWriter'] = undefined;
  /**
   * @member {Integer} PDFXConformance
   */
  exports.prototype['PDFXConformance'] = undefined;
  /**
   * @member {Boolean} FullCompression
   */
  exports.prototype['FullCompression'] = undefined;
  /**
   * @member {Integer} CompressionLevel
   */
  exports.prototype['CompressionLevel'] = undefined;
  /**
   * @member {Integer} CurrentDocumentSize
   */
  exports.prototype['CurrentDocumentSize'] = undefined;
  /**
   * @member {module:model/PdfStructureTreeRoot} StructureTreeRoot
   */
  exports.prototype['StructureTreeRoot'] = undefined;
  /**
   * @member {module:model/PdfOCProperties} OCProperties
   */
  exports.prototype['OCProperties'] = undefined;
  /**
   * @member {module:model/Rectangle} PageSize
   */
  exports.prototype['PageSize'] = undefined;
  /**
   * @member {module:model/Rectangle} CropBoxSize
   */
  exports.prototype['CropBoxSize'] = undefined;
  /**
   * @member {Boolean} PageEmpty
   */
  exports.prototype['PageEmpty'] = undefined;
  /**
   * @member {Integer} Duration
   */
  exports.prototype['Duration'] = undefined;
  /**
   * @member {module:model/PdfTransition} Transition
   */
  exports.prototype['Transition'] = undefined;
  /**
   * @member {module:model/Image} Thumbnail
   */
  exports.prototype['Thumbnail'] = undefined;
  /**
   * @member {module:model/PdfDictionary} Group
   */
  exports.prototype['Group'] = undefined;
  /**
   * @member {Number} SpaceCharRatio
   */
  exports.prototype['SpaceCharRatio'] = undefined;
  /**
   * @member {Integer} RunDirection
   */
  exports.prototype['RunDirection'] = undefined;
  /**
   * @member {Number} Userunit
   */
  exports.prototype['Userunit'] = undefined;
  /**
   * @member {module:model/PdfDictionary} DefaultColorspace
   */
  exports.prototype['DefaultColorspace'] = undefined;
  /**
   * @member {Boolean} StrictImageSequence
   */
  exports.prototype['StrictImageSequence'] = undefined;
  /**
   * @member {Boolean} UserProperties
   */
  exports.prototype['UserProperties'] = undefined;
  /**
   * @member {Boolean} RgbTransparencyBlending
   */
  exports.prototype['RgbTransparencyBlending'] = undefined;
  /**
   * @member {Integer} PageCount
   */
  exports.prototype['PageCount'] = undefined;
  /**
   * @member {Boolean} CloseStream
   */
  exports.prototype['CloseStream'] = undefined;



  return exports;
}));


