/**
 * MS.LPS.API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Mslpsapi) {
      root.Mslpsapi = {};
    }
    root.Mslpsapi.BaseFont = factory(root.Mslpsapi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The BaseFont model module.
   * @module model/BaseFont
   * @version v1
   */

  /**
   * Constructs a new <code>BaseFont</code>.
   * @alias module:model/BaseFont
   * @class
   */
  var exports = function() {
    var _this = this;

















  };

  /**
   * Constructs a <code>BaseFont</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/BaseFont} obj Optional instance to populate.
   * @return {module:model/BaseFont} The populated <code>BaseFont</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('SubsetRanges')) {
        obj['SubsetRanges'] = ApiClient.convertToType(data['SubsetRanges'], [['Integer']]);
      }
      if (data.hasOwnProperty('Encoding')) {
        obj['Encoding'] = ApiClient.convertToType(data['Encoding'], 'String');
      }
      if (data.hasOwnProperty('FontType')) {
        obj['FontType'] = ApiClient.convertToType(data['FontType'], 'Integer');
      }
      if (data.hasOwnProperty('PostscriptFontName')) {
        obj['PostscriptFontName'] = ApiClient.convertToType(data['PostscriptFontName'], 'String');
      }
      if (data.hasOwnProperty('Subfamily')) {
        obj['Subfamily'] = ApiClient.convertToType(data['Subfamily'], 'String');
      }
      if (data.hasOwnProperty('FullFontName')) {
        obj['FullFontName'] = ApiClient.convertToType(data['FullFontName'], [['String']]);
      }
      if (data.hasOwnProperty('AllNameEntries')) {
        obj['AllNameEntries'] = ApiClient.convertToType(data['AllNameEntries'], [['String']]);
      }
      if (data.hasOwnProperty('FamilyFontName')) {
        obj['FamilyFontName'] = ApiClient.convertToType(data['FamilyFontName'], [['String']]);
      }
      if (data.hasOwnProperty('CodePagesSupported')) {
        obj['CodePagesSupported'] = ApiClient.convertToType(data['CodePagesSupported'], ['String']);
      }
      if (data.hasOwnProperty('Widths')) {
        obj['Widths'] = ApiClient.convertToType(data['Widths'], ['Integer']);
      }
      if (data.hasOwnProperty('Differences')) {
        obj['Differences'] = ApiClient.convertToType(data['Differences'], ['String']);
      }
      if (data.hasOwnProperty('UnicodeDifferences')) {
        obj['UnicodeDifferences'] = ApiClient.convertToType(data['UnicodeDifferences'], ['String']);
      }
      if (data.hasOwnProperty('ForceWidthsOutput')) {
        obj['ForceWidthsOutput'] = ApiClient.convertToType(data['ForceWidthsOutput'], 'Boolean');
      }
      if (data.hasOwnProperty('DirectTextToByte')) {
        obj['DirectTextToByte'] = ApiClient.convertToType(data['DirectTextToByte'], 'Boolean');
      }
      if (data.hasOwnProperty('Subset')) {
        obj['Subset'] = ApiClient.convertToType(data['Subset'], 'Boolean');
      }
      if (data.hasOwnProperty('CompressionLevel')) {
        obj['CompressionLevel'] = ApiClient.convertToType(data['CompressionLevel'], 'Integer');
      }
    }
    return obj;
  }

  /**
   * @member {Array.<Array.<Integer>>} SubsetRanges
   */
  exports.prototype['SubsetRanges'] = undefined;
  /**
   * @member {String} Encoding
   */
  exports.prototype['Encoding'] = undefined;
  /**
   * @member {Integer} FontType
   */
  exports.prototype['FontType'] = undefined;
  /**
   * @member {String} PostscriptFontName
   */
  exports.prototype['PostscriptFontName'] = undefined;
  /**
   * @member {String} Subfamily
   */
  exports.prototype['Subfamily'] = undefined;
  /**
   * @member {Array.<Array.<String>>} FullFontName
   */
  exports.prototype['FullFontName'] = undefined;
  /**
   * @member {Array.<Array.<String>>} AllNameEntries
   */
  exports.prototype['AllNameEntries'] = undefined;
  /**
   * @member {Array.<Array.<String>>} FamilyFontName
   */
  exports.prototype['FamilyFontName'] = undefined;
  /**
   * @member {Array.<String>} CodePagesSupported
   */
  exports.prototype['CodePagesSupported'] = undefined;
  /**
   * @member {Array.<Integer>} Widths
   */
  exports.prototype['Widths'] = undefined;
  /**
   * @member {Array.<String>} Differences
   */
  exports.prototype['Differences'] = undefined;
  /**
   * @member {Array.<String>} UnicodeDifferences
   */
  exports.prototype['UnicodeDifferences'] = undefined;
  /**
   * @member {Boolean} ForceWidthsOutput
   */
  exports.prototype['ForceWidthsOutput'] = undefined;
  /**
   * @member {Boolean} DirectTextToByte
   */
  exports.prototype['DirectTextToByte'] = undefined;
  /**
   * @member {Boolean} Subset
   */
  exports.prototype['Subset'] = undefined;
  /**
   * @member {Integer} CompressionLevel
   */
  exports.prototype['CompressionLevel'] = undefined;



  return exports;
}));


