/**
 * MS.LPS.API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccessibleElementId', 'model/Annotation', 'model/BaseColor', 'model/Chunk', 'model/ICCProfile', 'model/IPdfOCG', 'model/Image', 'model/PdfDictionary', 'model/PdfIndirectReference', 'model/PdfName', 'model/PdfTemplate'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AccessibleElementId'), require('./Annotation'), require('./BaseColor'), require('./Chunk'), require('./ICCProfile'), require('./IPdfOCG'), require('./Image'), require('./PdfDictionary'), require('./PdfIndirectReference'), require('./PdfName'), require('./PdfTemplate'));
  } else {
    // Browser globals (root is window)
    if (!root.Mslpsapi) {
      root.Mslpsapi = {};
    }
    root.Mslpsapi.Image = factory(root.Mslpsapi.ApiClient, root.Mslpsapi.AccessibleElementId, root.Mslpsapi.Annotation, root.Mslpsapi.BaseColor, root.Mslpsapi.Chunk, root.Mslpsapi.ICCProfile, root.Mslpsapi.IPdfOCG, root.Mslpsapi.Image, root.Mslpsapi.PdfDictionary, root.Mslpsapi.PdfIndirectReference, root.Mslpsapi.PdfName, root.Mslpsapi.PdfTemplate);
  }
}(this, function(ApiClient, AccessibleElementId, Annotation, BaseColor, Chunk, ICCProfile, IPdfOCG, Image, PdfDictionary, PdfIndirectReference, PdfName, PdfTemplate) {
  'use strict';




  /**
   * The Image model module.
   * @module model/Image
   * @version v1
   */

  /**
   * Constructs a new <code>Image</code>.
   * @alias module:model/Image
   * @class
   */
  var exports = function() {
    var _this = this;





































































  };

  /**
   * Constructs a <code>Image</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Image} obj Optional instance to populate.
   * @return {module:model/Image} The populated <code>Image</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('Rotation')) {
        obj['Rotation'] = ApiClient.convertToType(data['Rotation'], 'Number');
      }
      if (data.hasOwnProperty('RotationDegrees')) {
        obj['RotationDegrees'] = ApiClient.convertToType(data['RotationDegrees'], 'Number');
      }
      if (data.hasOwnProperty('Annotation')) {
        obj['Annotation'] = Annotation.constructFromObject(data['Annotation']);
      }
      if (data.hasOwnProperty('Bpc')) {
        obj['Bpc'] = ApiClient.convertToType(data['Bpc'], 'Integer');
      }
      if (data.hasOwnProperty('RawData')) {
        obj['RawData'] = ApiClient.convertToType(data['RawData'], 'String');
      }
      if (data.hasOwnProperty('TemplateData')) {
        obj['TemplateData'] = PdfTemplate.constructFromObject(data['TemplateData']);
      }
      if (data.hasOwnProperty('AbsoluteX')) {
        obj['AbsoluteX'] = ApiClient.convertToType(data['AbsoluteX'], 'Number');
      }
      if (data.hasOwnProperty('AbsoluteY')) {
        obj['AbsoluteY'] = ApiClient.convertToType(data['AbsoluteY'], 'Number');
      }
      if (data.hasOwnProperty('Type')) {
        obj['Type'] = ApiClient.convertToType(data['Type'], 'Integer');
      }
      if (data.hasOwnProperty('Url')) {
        obj['Url'] = ApiClient.convertToType(data['Url'], 'String');
      }
      if (data.hasOwnProperty('Alignment')) {
        obj['Alignment'] = ApiClient.convertToType(data['Alignment'], 'Integer');
      }
      if (data.hasOwnProperty('Alt')) {
        obj['Alt'] = ApiClient.convertToType(data['Alt'], 'String');
      }
      if (data.hasOwnProperty('ScaledWidth')) {
        obj['ScaledWidth'] = ApiClient.convertToType(data['ScaledWidth'], 'Number');
      }
      if (data.hasOwnProperty('ScaledHeight')) {
        obj['ScaledHeight'] = ApiClient.convertToType(data['ScaledHeight'], 'Number');
      }
      if (data.hasOwnProperty('Colorspace')) {
        obj['Colorspace'] = ApiClient.convertToType(data['Colorspace'], 'Integer');
      }
      if (data.hasOwnProperty('ColorTransform')) {
        obj['ColorTransform'] = ApiClient.convertToType(data['ColorTransform'], 'Integer');
      }
      if (data.hasOwnProperty('Transparency')) {
        obj['Transparency'] = ApiClient.convertToType(data['Transparency'], ['Integer']);
      }
      if (data.hasOwnProperty('PlainWidth')) {
        obj['PlainWidth'] = ApiClient.convertToType(data['PlainWidth'], 'Number');
      }
      if (data.hasOwnProperty('PlainHeight')) {
        obj['PlainHeight'] = ApiClient.convertToType(data['PlainHeight'], 'Number');
      }
      if (data.hasOwnProperty('MySerialId')) {
        obj['MySerialId'] = ApiClient.convertToType(data['MySerialId'], 'Integer');
      }
      if (data.hasOwnProperty('DpiX')) {
        obj['DpiX'] = ApiClient.convertToType(data['DpiX'], 'Integer');
      }
      if (data.hasOwnProperty('DpiY')) {
        obj['DpiY'] = ApiClient.convertToType(data['DpiY'], 'Integer');
      }
      if (data.hasOwnProperty('ImageMask')) {
        obj['ImageMask'] = Image.constructFromObject(data['ImageMask']);
      }
      if (data.hasOwnProperty('Inverted')) {
        obj['Inverted'] = ApiClient.convertToType(data['Inverted'], 'Boolean');
      }
      if (data.hasOwnProperty('Interpolation')) {
        obj['Interpolation'] = ApiClient.convertToType(data['Interpolation'], 'Boolean');
      }
      if (data.hasOwnProperty('TagICC')) {
        obj['TagICC'] = ICCProfile.constructFromObject(data['TagICC']);
      }
      if (data.hasOwnProperty('Deflated')) {
        obj['Deflated'] = ApiClient.convertToType(data['Deflated'], 'Boolean');
      }
      if (data.hasOwnProperty('Additional')) {
        obj['Additional'] = PdfDictionary.constructFromObject(data['Additional']);
      }
      if (data.hasOwnProperty('Smask')) {
        obj['Smask'] = ApiClient.convertToType(data['Smask'], 'Boolean');
      }
      if (data.hasOwnProperty('XYRatio')) {
        obj['XYRatio'] = ApiClient.convertToType(data['XYRatio'], 'Number');
      }
      if (data.hasOwnProperty('IndentationLeft')) {
        obj['IndentationLeft'] = ApiClient.convertToType(data['IndentationLeft'], 'Number');
      }
      if (data.hasOwnProperty('IndentationRight')) {
        obj['IndentationRight'] = ApiClient.convertToType(data['IndentationRight'], 'Number');
      }
      if (data.hasOwnProperty('OriginalType')) {
        obj['OriginalType'] = ApiClient.convertToType(data['OriginalType'], 'Integer');
      }
      if (data.hasOwnProperty('OriginalData')) {
        obj['OriginalData'] = ApiClient.convertToType(data['OriginalData'], 'String');
      }
      if (data.hasOwnProperty('SpacingBefore')) {
        obj['SpacingBefore'] = ApiClient.convertToType(data['SpacingBefore'], 'Number');
      }
      if (data.hasOwnProperty('SpacingAfter')) {
        obj['SpacingAfter'] = ApiClient.convertToType(data['SpacingAfter'], 'Number');
      }
      if (data.hasOwnProperty('PaddingTop')) {
        obj['PaddingTop'] = ApiClient.convertToType(data['PaddingTop'], 'Number');
      }
      if (data.hasOwnProperty('WidthPercentage')) {
        obj['WidthPercentage'] = ApiClient.convertToType(data['WidthPercentage'], 'Number');
      }
      if (data.hasOwnProperty('ScaleToFitLineWhenOverflow')) {
        obj['ScaleToFitLineWhenOverflow'] = ApiClient.convertToType(data['ScaleToFitLineWhenOverflow'], 'Boolean');
      }
      if (data.hasOwnProperty('ScaleToFitHeight')) {
        obj['ScaleToFitHeight'] = ApiClient.convertToType(data['ScaleToFitHeight'], 'Boolean');
      }
      if (data.hasOwnProperty('Layer')) {
        obj['Layer'] = IPdfOCG.constructFromObject(data['Layer']);
      }
      if (data.hasOwnProperty('InitialRotation')) {
        obj['InitialRotation'] = ApiClient.convertToType(data['InitialRotation'], 'Number');
      }
      if (data.hasOwnProperty('DirectReference')) {
        obj['DirectReference'] = PdfIndirectReference.constructFromObject(data['DirectReference']);
      }
      if (data.hasOwnProperty('CompressionLevel')) {
        obj['CompressionLevel'] = ApiClient.convertToType(data['CompressionLevel'], 'Integer');
      }
      if (data.hasOwnProperty('Role')) {
        obj['Role'] = PdfName.constructFromObject(data['Role']);
      }
      if (data.hasOwnProperty('ID')) {
        obj['ID'] = AccessibleElementId.constructFromObject(data['ID']);
      }
      if (data.hasOwnProperty('IsInline')) {
        obj['IsInline'] = ApiClient.convertToType(data['IsInline'], 'Boolean');
      }
      if (data.hasOwnProperty('Chunks')) {
        obj['Chunks'] = ApiClient.convertToType(data['Chunks'], [Chunk]);
      }
      if (data.hasOwnProperty('Top')) {
        obj['Top'] = ApiClient.convertToType(data['Top'], 'Number');
      }
      if (data.hasOwnProperty('Border')) {
        obj['Border'] = ApiClient.convertToType(data['Border'], 'Integer');
      }
      if (data.hasOwnProperty('GrayFill')) {
        obj['GrayFill'] = ApiClient.convertToType(data['GrayFill'], 'Number');
      }
      if (data.hasOwnProperty('Left')) {
        obj['Left'] = ApiClient.convertToType(data['Left'], 'Number');
      }
      if (data.hasOwnProperty('Right')) {
        obj['Right'] = ApiClient.convertToType(data['Right'], 'Number');
      }
      if (data.hasOwnProperty('Bottom')) {
        obj['Bottom'] = ApiClient.convertToType(data['Bottom'], 'Number');
      }
      if (data.hasOwnProperty('BorderColorBottom')) {
        obj['BorderColorBottom'] = BaseColor.constructFromObject(data['BorderColorBottom']);
      }
      if (data.hasOwnProperty('BorderColorTop')) {
        obj['BorderColorTop'] = BaseColor.constructFromObject(data['BorderColorTop']);
      }
      if (data.hasOwnProperty('BorderColorLeft')) {
        obj['BorderColorLeft'] = BaseColor.constructFromObject(data['BorderColorLeft']);
      }
      if (data.hasOwnProperty('BorderColorRight')) {
        obj['BorderColorRight'] = BaseColor.constructFromObject(data['BorderColorRight']);
      }
      if (data.hasOwnProperty('Width')) {
        obj['Width'] = ApiClient.convertToType(data['Width'], 'Number');
      }
      if (data.hasOwnProperty('Height')) {
        obj['Height'] = ApiClient.convertToType(data['Height'], 'Number');
      }
      if (data.hasOwnProperty('BorderWidth')) {
        obj['BorderWidth'] = ApiClient.convertToType(data['BorderWidth'], 'Number');
      }
      if (data.hasOwnProperty('BorderColor')) {
        obj['BorderColor'] = BaseColor.constructFromObject(data['BorderColor']);
      }
      if (data.hasOwnProperty('BackgroundColor')) {
        obj['BackgroundColor'] = BaseColor.constructFromObject(data['BackgroundColor']);
      }
      if (data.hasOwnProperty('BorderWidthLeft')) {
        obj['BorderWidthLeft'] = ApiClient.convertToType(data['BorderWidthLeft'], 'Number');
      }
      if (data.hasOwnProperty('BorderWidthRight')) {
        obj['BorderWidthRight'] = ApiClient.convertToType(data['BorderWidthRight'], 'Number');
      }
      if (data.hasOwnProperty('BorderWidthTop')) {
        obj['BorderWidthTop'] = ApiClient.convertToType(data['BorderWidthTop'], 'Number');
      }
      if (data.hasOwnProperty('BorderWidthBottom')) {
        obj['BorderWidthBottom'] = ApiClient.convertToType(data['BorderWidthBottom'], 'Number');
      }
      if (data.hasOwnProperty('UseVariableBorders')) {
        obj['UseVariableBorders'] = ApiClient.convertToType(data['UseVariableBorders'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * @member {Number} Rotation
   */
  exports.prototype['Rotation'] = undefined;
  /**
   * @member {Number} RotationDegrees
   */
  exports.prototype['RotationDegrees'] = undefined;
  /**
   * @member {module:model/Annotation} Annotation
   */
  exports.prototype['Annotation'] = undefined;
  /**
   * @member {Integer} Bpc
   */
  exports.prototype['Bpc'] = undefined;
  /**
   * @member {String} RawData
   */
  exports.prototype['RawData'] = undefined;
  /**
   * @member {module:model/PdfTemplate} TemplateData
   */
  exports.prototype['TemplateData'] = undefined;
  /**
   * @member {Number} AbsoluteX
   */
  exports.prototype['AbsoluteX'] = undefined;
  /**
   * @member {Number} AbsoluteY
   */
  exports.prototype['AbsoluteY'] = undefined;
  /**
   * @member {Integer} Type
   */
  exports.prototype['Type'] = undefined;
  /**
   * @member {String} Url
   */
  exports.prototype['Url'] = undefined;
  /**
   * @member {Integer} Alignment
   */
  exports.prototype['Alignment'] = undefined;
  /**
   * @member {String} Alt
   */
  exports.prototype['Alt'] = undefined;
  /**
   * @member {Number} ScaledWidth
   */
  exports.prototype['ScaledWidth'] = undefined;
  /**
   * @member {Number} ScaledHeight
   */
  exports.prototype['ScaledHeight'] = undefined;
  /**
   * @member {Integer} Colorspace
   */
  exports.prototype['Colorspace'] = undefined;
  /**
   * @member {Integer} ColorTransform
   */
  exports.prototype['ColorTransform'] = undefined;
  /**
   * @member {Array.<Integer>} Transparency
   */
  exports.prototype['Transparency'] = undefined;
  /**
   * @member {Number} PlainWidth
   */
  exports.prototype['PlainWidth'] = undefined;
  /**
   * @member {Number} PlainHeight
   */
  exports.prototype['PlainHeight'] = undefined;
  /**
   * @member {Integer} MySerialId
   */
  exports.prototype['MySerialId'] = undefined;
  /**
   * @member {Integer} DpiX
   */
  exports.prototype['DpiX'] = undefined;
  /**
   * @member {Integer} DpiY
   */
  exports.prototype['DpiY'] = undefined;
  /**
   * @member {module:model/Image} ImageMask
   */
  exports.prototype['ImageMask'] = undefined;
  /**
   * @member {Boolean} Inverted
   */
  exports.prototype['Inverted'] = undefined;
  /**
   * @member {Boolean} Interpolation
   */
  exports.prototype['Interpolation'] = undefined;
  /**
   * @member {module:model/ICCProfile} TagICC
   */
  exports.prototype['TagICC'] = undefined;
  /**
   * @member {Boolean} Deflated
   */
  exports.prototype['Deflated'] = undefined;
  /**
   * @member {module:model/PdfDictionary} Additional
   */
  exports.prototype['Additional'] = undefined;
  /**
   * @member {Boolean} Smask
   */
  exports.prototype['Smask'] = undefined;
  /**
   * @member {Number} XYRatio
   */
  exports.prototype['XYRatio'] = undefined;
  /**
   * @member {Number} IndentationLeft
   */
  exports.prototype['IndentationLeft'] = undefined;
  /**
   * @member {Number} IndentationRight
   */
  exports.prototype['IndentationRight'] = undefined;
  /**
   * @member {Integer} OriginalType
   */
  exports.prototype['OriginalType'] = undefined;
  /**
   * @member {String} OriginalData
   */
  exports.prototype['OriginalData'] = undefined;
  /**
   * @member {Number} SpacingBefore
   */
  exports.prototype['SpacingBefore'] = undefined;
  /**
   * @member {Number} SpacingAfter
   */
  exports.prototype['SpacingAfter'] = undefined;
  /**
   * @member {Number} PaddingTop
   */
  exports.prototype['PaddingTop'] = undefined;
  /**
   * @member {Number} WidthPercentage
   */
  exports.prototype['WidthPercentage'] = undefined;
  /**
   * @member {Boolean} ScaleToFitLineWhenOverflow
   */
  exports.prototype['ScaleToFitLineWhenOverflow'] = undefined;
  /**
   * @member {Boolean} ScaleToFitHeight
   */
  exports.prototype['ScaleToFitHeight'] = undefined;
  /**
   * @member {module:model/IPdfOCG} Layer
   */
  exports.prototype['Layer'] = undefined;
  /**
   * @member {Number} InitialRotation
   */
  exports.prototype['InitialRotation'] = undefined;
  /**
   * @member {module:model/PdfIndirectReference} DirectReference
   */
  exports.prototype['DirectReference'] = undefined;
  /**
   * @member {Integer} CompressionLevel
   */
  exports.prototype['CompressionLevel'] = undefined;
  /**
   * @member {module:model/PdfName} Role
   */
  exports.prototype['Role'] = undefined;
  /**
   * @member {module:model/AccessibleElementId} ID
   */
  exports.prototype['ID'] = undefined;
  /**
   * @member {Boolean} IsInline
   */
  exports.prototype['IsInline'] = undefined;
  /**
   * @member {Array.<module:model/Chunk>} Chunks
   */
  exports.prototype['Chunks'] = undefined;
  /**
   * @member {Number} Top
   */
  exports.prototype['Top'] = undefined;
  /**
   * @member {Integer} Border
   */
  exports.prototype['Border'] = undefined;
  /**
   * @member {Number} GrayFill
   */
  exports.prototype['GrayFill'] = undefined;
  /**
   * @member {Number} Left
   */
  exports.prototype['Left'] = undefined;
  /**
   * @member {Number} Right
   */
  exports.prototype['Right'] = undefined;
  /**
   * @member {Number} Bottom
   */
  exports.prototype['Bottom'] = undefined;
  /**
   * @member {module:model/BaseColor} BorderColorBottom
   */
  exports.prototype['BorderColorBottom'] = undefined;
  /**
   * @member {module:model/BaseColor} BorderColorTop
   */
  exports.prototype['BorderColorTop'] = undefined;
  /**
   * @member {module:model/BaseColor} BorderColorLeft
   */
  exports.prototype['BorderColorLeft'] = undefined;
  /**
   * @member {module:model/BaseColor} BorderColorRight
   */
  exports.prototype['BorderColorRight'] = undefined;
  /**
   * @member {Number} Width
   */
  exports.prototype['Width'] = undefined;
  /**
   * @member {Number} Height
   */
  exports.prototype['Height'] = undefined;
  /**
   * @member {Number} BorderWidth
   */
  exports.prototype['BorderWidth'] = undefined;
  /**
   * @member {module:model/BaseColor} BorderColor
   */
  exports.prototype['BorderColor'] = undefined;
  /**
   * @member {module:model/BaseColor} BackgroundColor
   */
  exports.prototype['BackgroundColor'] = undefined;
  /**
   * @member {Number} BorderWidthLeft
   */
  exports.prototype['BorderWidthLeft'] = undefined;
  /**
   * @member {Number} BorderWidthRight
   */
  exports.prototype['BorderWidthRight'] = undefined;
  /**
   * @member {Number} BorderWidthTop
   */
  exports.prototype['BorderWidthTop'] = undefined;
  /**
   * @member {Number} BorderWidthBottom
   */
  exports.prototype['BorderWidthBottom'] = undefined;
  /**
   * @member {Boolean} UseVariableBorders
   */
  exports.prototype['UseVariableBorders'] = undefined;



  return exports;
}));


