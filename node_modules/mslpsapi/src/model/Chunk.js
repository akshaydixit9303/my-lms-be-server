/**
 * MS.LPS.API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccessibleElementId', 'model/Chunk', 'model/Font', 'model/PdfName'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AccessibleElementId'), require('./Chunk'), require('./Font'), require('./PdfName'));
  } else {
    // Browser globals (root is window)
    if (!root.Mslpsapi) {
      root.Mslpsapi = {};
    }
    root.Mslpsapi.Chunk = factory(root.Mslpsapi.ApiClient, root.Mslpsapi.AccessibleElementId, root.Mslpsapi.Chunk, root.Mslpsapi.Font, root.Mslpsapi.PdfName);
  }
}(this, function(ApiClient, AccessibleElementId, Chunk, Font, PdfName) {
  'use strict';




  /**
   * The Chunk model module.
   * @module model/Chunk
   * @version v1
   */

  /**
   * Constructs a new <code>Chunk</code>.
   * @alias module:model/Chunk
   * @class
   */
  var exports = function() {
    var _this = this;










  };

  /**
   * Constructs a <code>Chunk</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Chunk} obj Optional instance to populate.
   * @return {module:model/Chunk} The populated <code>Chunk</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('Type')) {
        obj['Type'] = ApiClient.convertToType(data['Type'], 'Integer');
      }
      if (data.hasOwnProperty('Chunks')) {
        obj['Chunks'] = ApiClient.convertToType(data['Chunks'], [Chunk]);
      }
      if (data.hasOwnProperty('Font')) {
        obj['Font'] = Font.constructFromObject(data['Font']);
      }
      if (data.hasOwnProperty('Content')) {
        obj['Content'] = ApiClient.convertToType(data['Content'], 'String');
      }
      if (data.hasOwnProperty('Attributes')) {
        obj['Attributes'] = ApiClient.convertToType(data['Attributes'], {'String': Object});
      }
      if (data.hasOwnProperty('HorizontalScaling')) {
        obj['HorizontalScaling'] = ApiClient.convertToType(data['HorizontalScaling'], 'Number');
      }
      if (data.hasOwnProperty('Role')) {
        obj['Role'] = PdfName.constructFromObject(data['Role']);
      }
      if (data.hasOwnProperty('ID')) {
        obj['ID'] = AccessibleElementId.constructFromObject(data['ID']);
      }
      if (data.hasOwnProperty('IsInline')) {
        obj['IsInline'] = ApiClient.convertToType(data['IsInline'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * @member {Integer} Type
   */
  exports.prototype['Type'] = undefined;
  /**
   * @member {Array.<module:model/Chunk>} Chunks
   */
  exports.prototype['Chunks'] = undefined;
  /**
   * @member {module:model/Font} Font
   */
  exports.prototype['Font'] = undefined;
  /**
   * @member {String} Content
   */
  exports.prototype['Content'] = undefined;
  /**
   * @member {Object.<String, Object>} Attributes
   */
  exports.prototype['Attributes'] = undefined;
  /**
   * @member {Number} HorizontalScaling
   */
  exports.prototype['HorizontalScaling'] = undefined;
  /**
   * @member {module:model/PdfName} Role
   */
  exports.prototype['Role'] = undefined;
  /**
   * @member {module:model/AccessibleElementId} ID
   */
  exports.prototype['ID'] = undefined;
  /**
   * @member {Boolean} IsInline
   */
  exports.prototype['IsInline'] = undefined;



  return exports;
}));


