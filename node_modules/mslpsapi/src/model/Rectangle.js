/**
 * MS.LPS.API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BaseColor', 'model/Chunk'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./BaseColor'), require('./Chunk'));
  } else {
    // Browser globals (root is window)
    if (!root.Mslpsapi) {
      root.Mslpsapi = {};
    }
    root.Mslpsapi.Rectangle = factory(root.Mslpsapi.ApiClient, root.Mslpsapi.BaseColor, root.Mslpsapi.Chunk);
  }
}(this, function(ApiClient, BaseColor, Chunk) {
  'use strict';




  /**
   * The Rectangle model module.
   * @module model/Rectangle
   * @version v1
   */

  /**
   * Constructs a new <code>Rectangle</code>.
   * @alias module:model/Rectangle
   * @class
   */
  var exports = function() {
    var _this = this;
























  };

  /**
   * Constructs a <code>Rectangle</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Rectangle} obj Optional instance to populate.
   * @return {module:model/Rectangle} The populated <code>Rectangle</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('Type')) {
        obj['Type'] = ApiClient.convertToType(data['Type'], 'Integer');
      }
      if (data.hasOwnProperty('Chunks')) {
        obj['Chunks'] = ApiClient.convertToType(data['Chunks'], [Chunk]);
      }
      if (data.hasOwnProperty('Top')) {
        obj['Top'] = ApiClient.convertToType(data['Top'], 'Number');
      }
      if (data.hasOwnProperty('Border')) {
        obj['Border'] = ApiClient.convertToType(data['Border'], 'Integer');
      }
      if (data.hasOwnProperty('GrayFill')) {
        obj['GrayFill'] = ApiClient.convertToType(data['GrayFill'], 'Number');
      }
      if (data.hasOwnProperty('Left')) {
        obj['Left'] = ApiClient.convertToType(data['Left'], 'Number');
      }
      if (data.hasOwnProperty('Right')) {
        obj['Right'] = ApiClient.convertToType(data['Right'], 'Number');
      }
      if (data.hasOwnProperty('Bottom')) {
        obj['Bottom'] = ApiClient.convertToType(data['Bottom'], 'Number');
      }
      if (data.hasOwnProperty('BorderColorBottom')) {
        obj['BorderColorBottom'] = BaseColor.constructFromObject(data['BorderColorBottom']);
      }
      if (data.hasOwnProperty('BorderColorTop')) {
        obj['BorderColorTop'] = BaseColor.constructFromObject(data['BorderColorTop']);
      }
      if (data.hasOwnProperty('BorderColorLeft')) {
        obj['BorderColorLeft'] = BaseColor.constructFromObject(data['BorderColorLeft']);
      }
      if (data.hasOwnProperty('BorderColorRight')) {
        obj['BorderColorRight'] = BaseColor.constructFromObject(data['BorderColorRight']);
      }
      if (data.hasOwnProperty('Width')) {
        obj['Width'] = ApiClient.convertToType(data['Width'], 'Number');
      }
      if (data.hasOwnProperty('Height')) {
        obj['Height'] = ApiClient.convertToType(data['Height'], 'Number');
      }
      if (data.hasOwnProperty('BorderWidth')) {
        obj['BorderWidth'] = ApiClient.convertToType(data['BorderWidth'], 'Number');
      }
      if (data.hasOwnProperty('BorderColor')) {
        obj['BorderColor'] = BaseColor.constructFromObject(data['BorderColor']);
      }
      if (data.hasOwnProperty('BackgroundColor')) {
        obj['BackgroundColor'] = BaseColor.constructFromObject(data['BackgroundColor']);
      }
      if (data.hasOwnProperty('Rotation')) {
        obj['Rotation'] = ApiClient.convertToType(data['Rotation'], 'Integer');
      }
      if (data.hasOwnProperty('BorderWidthLeft')) {
        obj['BorderWidthLeft'] = ApiClient.convertToType(data['BorderWidthLeft'], 'Number');
      }
      if (data.hasOwnProperty('BorderWidthRight')) {
        obj['BorderWidthRight'] = ApiClient.convertToType(data['BorderWidthRight'], 'Number');
      }
      if (data.hasOwnProperty('BorderWidthTop')) {
        obj['BorderWidthTop'] = ApiClient.convertToType(data['BorderWidthTop'], 'Number');
      }
      if (data.hasOwnProperty('BorderWidthBottom')) {
        obj['BorderWidthBottom'] = ApiClient.convertToType(data['BorderWidthBottom'], 'Number');
      }
      if (data.hasOwnProperty('UseVariableBorders')) {
        obj['UseVariableBorders'] = ApiClient.convertToType(data['UseVariableBorders'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * @member {Integer} Type
   */
  exports.prototype['Type'] = undefined;
  /**
   * @member {Array.<module:model/Chunk>} Chunks
   */
  exports.prototype['Chunks'] = undefined;
  /**
   * @member {Number} Top
   */
  exports.prototype['Top'] = undefined;
  /**
   * @member {Integer} Border
   */
  exports.prototype['Border'] = undefined;
  /**
   * @member {Number} GrayFill
   */
  exports.prototype['GrayFill'] = undefined;
  /**
   * @member {Number} Left
   */
  exports.prototype['Left'] = undefined;
  /**
   * @member {Number} Right
   */
  exports.prototype['Right'] = undefined;
  /**
   * @member {Number} Bottom
   */
  exports.prototype['Bottom'] = undefined;
  /**
   * @member {module:model/BaseColor} BorderColorBottom
   */
  exports.prototype['BorderColorBottom'] = undefined;
  /**
   * @member {module:model/BaseColor} BorderColorTop
   */
  exports.prototype['BorderColorTop'] = undefined;
  /**
   * @member {module:model/BaseColor} BorderColorLeft
   */
  exports.prototype['BorderColorLeft'] = undefined;
  /**
   * @member {module:model/BaseColor} BorderColorRight
   */
  exports.prototype['BorderColorRight'] = undefined;
  /**
   * @member {Number} Width
   */
  exports.prototype['Width'] = undefined;
  /**
   * @member {Number} Height
   */
  exports.prototype['Height'] = undefined;
  /**
   * @member {Number} BorderWidth
   */
  exports.prototype['BorderWidth'] = undefined;
  /**
   * @member {module:model/BaseColor} BorderColor
   */
  exports.prototype['BorderColor'] = undefined;
  /**
   * @member {module:model/BaseColor} BackgroundColor
   */
  exports.prototype['BackgroundColor'] = undefined;
  /**
   * @member {Integer} Rotation
   */
  exports.prototype['Rotation'] = undefined;
  /**
   * @member {Number} BorderWidthLeft
   */
  exports.prototype['BorderWidthLeft'] = undefined;
  /**
   * @member {Number} BorderWidthRight
   */
  exports.prototype['BorderWidthRight'] = undefined;
  /**
   * @member {Number} BorderWidthTop
   */
  exports.prototype['BorderWidthTop'] = undefined;
  /**
   * @member {Number} BorderWidthBottom
   */
  exports.prototype['BorderWidthBottom'] = undefined;
  /**
   * @member {Boolean} UseVariableBorders
   */
  exports.prototype['UseVariableBorders'] = undefined;



  return exports;
}));


