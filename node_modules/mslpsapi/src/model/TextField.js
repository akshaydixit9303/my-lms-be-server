/**
 * MS.LPS.API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BaseColor', 'model/BaseFont', 'model/PdfWriter', 'model/Rectangle'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./BaseColor'), require('./BaseFont'), require('./PdfWriter'), require('./Rectangle'));
  } else {
    // Browser globals (root is window)
    if (!root.Mslpsapi) {
      root.Mslpsapi = {};
    }
    root.Mslpsapi.TextField = factory(root.Mslpsapi.ApiClient, root.Mslpsapi.BaseColor, root.Mslpsapi.BaseFont, root.Mslpsapi.PdfWriter, root.Mslpsapi.Rectangle);
  }
}(this, function(ApiClient, BaseColor, BaseFont, PdfWriter, Rectangle) {
  'use strict';




  /**
   * The TextField model module.
   * @module model/TextField
   * @version v1
   */

  /**
   * Constructs a new <code>TextField</code>.
   * @alias module:model/TextField
   * @class
   */
  var exports = function() {
    var _this = this;

























  };

  /**
   * Constructs a <code>TextField</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TextField} obj Optional instance to populate.
   * @return {module:model/TextField} The populated <code>TextField</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('DefaultText')) {
        obj['DefaultText'] = ApiClient.convertToType(data['DefaultText'], 'String');
      }
      if (data.hasOwnProperty('Choices')) {
        obj['Choices'] = ApiClient.convertToType(data['Choices'], ['String']);
      }
      if (data.hasOwnProperty('ChoiceExports')) {
        obj['ChoiceExports'] = ApiClient.convertToType(data['ChoiceExports'], ['String']);
      }
      if (data.hasOwnProperty('ChoiceSelection')) {
        obj['ChoiceSelection'] = ApiClient.convertToType(data['ChoiceSelection'], 'Integer');
      }
      if (data.hasOwnProperty('ChoiceSelections')) {
        obj['ChoiceSelections'] = ApiClient.convertToType(data['ChoiceSelections'], ['Integer']);
      }
      if (data.hasOwnProperty('VisibleTopChoice')) {
        obj['VisibleTopChoice'] = ApiClient.convertToType(data['VisibleTopChoice'], 'Integer');
      }
      if (data.hasOwnProperty('SubstitutionFonts')) {
        obj['SubstitutionFonts'] = ApiClient.convertToType(data['SubstitutionFonts'], [BaseFont]);
      }
      if (data.hasOwnProperty('ExtensionFont')) {
        obj['ExtensionFont'] = BaseFont.constructFromObject(data['ExtensionFont']);
      }
      if (data.hasOwnProperty('BorderWidth')) {
        obj['BorderWidth'] = ApiClient.convertToType(data['BorderWidth'], 'Number');
      }
      if (data.hasOwnProperty('BorderStyle')) {
        obj['BorderStyle'] = ApiClient.convertToType(data['BorderStyle'], 'Integer');
      }
      if (data.hasOwnProperty('BorderColor')) {
        obj['BorderColor'] = BaseColor.constructFromObject(data['BorderColor']);
      }
      if (data.hasOwnProperty('BackgroundColor')) {
        obj['BackgroundColor'] = BaseColor.constructFromObject(data['BackgroundColor']);
      }
      if (data.hasOwnProperty('TextColor')) {
        obj['TextColor'] = BaseColor.constructFromObject(data['TextColor']);
      }
      if (data.hasOwnProperty('Font')) {
        obj['Font'] = BaseFont.constructFromObject(data['Font']);
      }
      if (data.hasOwnProperty('FontSize')) {
        obj['FontSize'] = ApiClient.convertToType(data['FontSize'], 'Number');
      }
      if (data.hasOwnProperty('Alignment')) {
        obj['Alignment'] = ApiClient.convertToType(data['Alignment'], 'Integer');
      }
      if (data.hasOwnProperty('Text')) {
        obj['Text'] = ApiClient.convertToType(data['Text'], 'String');
      }
      if (data.hasOwnProperty('Box')) {
        obj['Box'] = Rectangle.constructFromObject(data['Box']);
      }
      if (data.hasOwnProperty('Rotation')) {
        obj['Rotation'] = ApiClient.convertToType(data['Rotation'], 'Integer');
      }
      if (data.hasOwnProperty('Visibility')) {
        obj['Visibility'] = ApiClient.convertToType(data['Visibility'], 'Integer');
      }
      if (data.hasOwnProperty('FieldName')) {
        obj['FieldName'] = ApiClient.convertToType(data['FieldName'], 'String');
      }
      if (data.hasOwnProperty('Options')) {
        obj['Options'] = ApiClient.convertToType(data['Options'], 'Integer');
      }
      if (data.hasOwnProperty('MaxCharacterLength')) {
        obj['MaxCharacterLength'] = ApiClient.convertToType(data['MaxCharacterLength'], 'Integer');
      }
      if (data.hasOwnProperty('Writer')) {
        obj['Writer'] = PdfWriter.constructFromObject(data['Writer']);
      }
    }
    return obj;
  }

  /**
   * @member {String} DefaultText
   */
  exports.prototype['DefaultText'] = undefined;
  /**
   * @member {Array.<String>} Choices
   */
  exports.prototype['Choices'] = undefined;
  /**
   * @member {Array.<String>} ChoiceExports
   */
  exports.prototype['ChoiceExports'] = undefined;
  /**
   * @member {Integer} ChoiceSelection
   */
  exports.prototype['ChoiceSelection'] = undefined;
  /**
   * @member {Array.<Integer>} ChoiceSelections
   */
  exports.prototype['ChoiceSelections'] = undefined;
  /**
   * @member {Integer} VisibleTopChoice
   */
  exports.prototype['VisibleTopChoice'] = undefined;
  /**
   * @member {Array.<module:model/BaseFont>} SubstitutionFonts
   */
  exports.prototype['SubstitutionFonts'] = undefined;
  /**
   * @member {module:model/BaseFont} ExtensionFont
   */
  exports.prototype['ExtensionFont'] = undefined;
  /**
   * @member {Number} BorderWidth
   */
  exports.prototype['BorderWidth'] = undefined;
  /**
   * @member {Integer} BorderStyle
   */
  exports.prototype['BorderStyle'] = undefined;
  /**
   * @member {module:model/BaseColor} BorderColor
   */
  exports.prototype['BorderColor'] = undefined;
  /**
   * @member {module:model/BaseColor} BackgroundColor
   */
  exports.prototype['BackgroundColor'] = undefined;
  /**
   * @member {module:model/BaseColor} TextColor
   */
  exports.prototype['TextColor'] = undefined;
  /**
   * @member {module:model/BaseFont} Font
   */
  exports.prototype['Font'] = undefined;
  /**
   * @member {Number} FontSize
   */
  exports.prototype['FontSize'] = undefined;
  /**
   * @member {Integer} Alignment
   */
  exports.prototype['Alignment'] = undefined;
  /**
   * @member {String} Text
   */
  exports.prototype['Text'] = undefined;
  /**
   * @member {module:model/Rectangle} Box
   */
  exports.prototype['Box'] = undefined;
  /**
   * @member {Integer} Rotation
   */
  exports.prototype['Rotation'] = undefined;
  /**
   * @member {Integer} Visibility
   */
  exports.prototype['Visibility'] = undefined;
  /**
   * @member {String} FieldName
   */
  exports.prototype['FieldName'] = undefined;
  /**
   * @member {Integer} Options
   */
  exports.prototype['Options'] = undefined;
  /**
   * @member {Integer} MaxCharacterLength
   */
  exports.prototype['MaxCharacterLength'] = undefined;
  /**
   * @member {module:model/PdfWriter} Writer
   */
  exports.prototype['Writer'] = undefined;



  return exports;
}));


