/**
 * MS.LPS.API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccessibleElementId', 'model/BaseColor', 'model/Chunk', 'model/ColumnText', 'model/IElement', 'model/IPdfPCellEvent', 'model/Image', 'model/PdfName', 'model/PdfPHeaderCell', 'model/PdfPTable'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AccessibleElementId'), require('./BaseColor'), require('./Chunk'), require('./ColumnText'), require('./IElement'), require('./IPdfPCellEvent'), require('./Image'), require('./PdfName'), require('./PdfPHeaderCell'), require('./PdfPTable'));
  } else {
    // Browser globals (root is window)
    if (!root.Mslpsapi) {
      root.Mslpsapi = {};
    }
    root.Mslpsapi.PdfPHeaderCell = factory(root.Mslpsapi.ApiClient, root.Mslpsapi.AccessibleElementId, root.Mslpsapi.BaseColor, root.Mslpsapi.Chunk, root.Mslpsapi.ColumnText, root.Mslpsapi.IElement, root.Mslpsapi.IPdfPCellEvent, root.Mslpsapi.Image, root.Mslpsapi.PdfName, root.Mslpsapi.PdfPHeaderCell, root.Mslpsapi.PdfPTable);
  }
}(this, function(ApiClient, AccessibleElementId, BaseColor, Chunk, ColumnText, IElement, IPdfPCellEvent, Image, PdfName, PdfPHeaderCell, PdfPTable) {
  'use strict';




  /**
   * The PdfPHeaderCell model module.
   * @module model/PdfPHeaderCell
   * @version v1
   */

  /**
   * Constructs a new <code>PdfPHeaderCell</code>.
   * @alias module:model/PdfPHeaderCell
   * @class
   */
  var exports = function() {
    var _this = this;


































































  };

  /**
   * Constructs a <code>PdfPHeaderCell</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PdfPHeaderCell} obj Optional instance to populate.
   * @return {module:model/PdfPHeaderCell} The populated <code>PdfPHeaderCell</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('Scope')) {
        obj['Scope'] = ApiClient.convertToType(data['Scope'], 'Integer');
      }
      if (data.hasOwnProperty('Name')) {
        obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
      }
      if (data.hasOwnProperty('Role')) {
        obj['Role'] = PdfName.constructFromObject(data['Role']);
      }
      if (data.hasOwnProperty('Phrase')) {
        obj['Phrase'] = ApiClient.convertToType(data['Phrase'], [IElement]);
      }
      if (data.hasOwnProperty('HorizontalAlignment')) {
        obj['HorizontalAlignment'] = ApiClient.convertToType(data['HorizontalAlignment'], 'Integer');
      }
      if (data.hasOwnProperty('VerticalAlignment')) {
        obj['VerticalAlignment'] = ApiClient.convertToType(data['VerticalAlignment'], 'Integer');
      }
      if (data.hasOwnProperty('EffectivePaddingLeft')) {
        obj['EffectivePaddingLeft'] = ApiClient.convertToType(data['EffectivePaddingLeft'], 'Number');
      }
      if (data.hasOwnProperty('PaddingLeft')) {
        obj['PaddingLeft'] = ApiClient.convertToType(data['PaddingLeft'], 'Number');
      }
      if (data.hasOwnProperty('EffectivePaddingRight')) {
        obj['EffectivePaddingRight'] = ApiClient.convertToType(data['EffectivePaddingRight'], 'Number');
      }
      if (data.hasOwnProperty('PaddingRight')) {
        obj['PaddingRight'] = ApiClient.convertToType(data['PaddingRight'], 'Number');
      }
      if (data.hasOwnProperty('EffectivePaddingTop')) {
        obj['EffectivePaddingTop'] = ApiClient.convertToType(data['EffectivePaddingTop'], 'Number');
      }
      if (data.hasOwnProperty('PaddingTop')) {
        obj['PaddingTop'] = ApiClient.convertToType(data['PaddingTop'], 'Number');
      }
      if (data.hasOwnProperty('EffectivePaddingBottom')) {
        obj['EffectivePaddingBottom'] = ApiClient.convertToType(data['EffectivePaddingBottom'], 'Number');
      }
      if (data.hasOwnProperty('PaddingBottom')) {
        obj['PaddingBottom'] = ApiClient.convertToType(data['PaddingBottom'], 'Number');
      }
      if (data.hasOwnProperty('Padding')) {
        obj['Padding'] = ApiClient.convertToType(data['Padding'], 'Number');
      }
      if (data.hasOwnProperty('UseBorderPadding')) {
        obj['UseBorderPadding'] = ApiClient.convertToType(data['UseBorderPadding'], 'Boolean');
      }
      if (data.hasOwnProperty('Leading')) {
        obj['Leading'] = ApiClient.convertToType(data['Leading'], 'Number');
      }
      if (data.hasOwnProperty('MultipliedLeading')) {
        obj['MultipliedLeading'] = ApiClient.convertToType(data['MultipliedLeading'], 'Number');
      }
      if (data.hasOwnProperty('Indent')) {
        obj['Indent'] = ApiClient.convertToType(data['Indent'], 'Number');
      }
      if (data.hasOwnProperty('ExtraParagraphSpace')) {
        obj['ExtraParagraphSpace'] = ApiClient.convertToType(data['ExtraParagraphSpace'], 'Number');
      }
      if (data.hasOwnProperty('CalculatedHeight')) {
        obj['CalculatedHeight'] = ApiClient.convertToType(data['CalculatedHeight'], 'Number');
      }
      if (data.hasOwnProperty('FixedHeight')) {
        obj['FixedHeight'] = ApiClient.convertToType(data['FixedHeight'], 'Number');
      }
      if (data.hasOwnProperty('CachedMaxHeight')) {
        obj['CachedMaxHeight'] = ApiClient.convertToType(data['CachedMaxHeight'], 'Number');
      }
      if (data.hasOwnProperty('NoWrap')) {
        obj['NoWrap'] = ApiClient.convertToType(data['NoWrap'], 'Boolean');
      }
      if (data.hasOwnProperty('Table')) {
        obj['Table'] = PdfPTable.constructFromObject(data['Table']);
      }
      if (data.hasOwnProperty('MinimumHeight')) {
        obj['MinimumHeight'] = ApiClient.convertToType(data['MinimumHeight'], 'Number');
      }
      if (data.hasOwnProperty('Colspan')) {
        obj['Colspan'] = ApiClient.convertToType(data['Colspan'], 'Integer');
      }
      if (data.hasOwnProperty('Rowspan')) {
        obj['Rowspan'] = ApiClient.convertToType(data['Rowspan'], 'Integer');
      }
      if (data.hasOwnProperty('FollowingIndent')) {
        obj['FollowingIndent'] = ApiClient.convertToType(data['FollowingIndent'], 'Number');
      }
      if (data.hasOwnProperty('RightIndent')) {
        obj['RightIndent'] = ApiClient.convertToType(data['RightIndent'], 'Number');
      }
      if (data.hasOwnProperty('SpaceCharRatio')) {
        obj['SpaceCharRatio'] = ApiClient.convertToType(data['SpaceCharRatio'], 'Number');
      }
      if (data.hasOwnProperty('RunDirection')) {
        obj['RunDirection'] = ApiClient.convertToType(data['RunDirection'], 'Integer');
      }
      if (data.hasOwnProperty('Image')) {
        obj['Image'] = Image.constructFromObject(data['Image']);
      }
      if (data.hasOwnProperty('CellEvent')) {
        obj['CellEvent'] = IPdfPCellEvent.constructFromObject(data['CellEvent']);
      }
      if (data.hasOwnProperty('ArabicOptions')) {
        obj['ArabicOptions'] = ApiClient.convertToType(data['ArabicOptions'], 'Integer');
      }
      if (data.hasOwnProperty('UseAscender')) {
        obj['UseAscender'] = ApiClient.convertToType(data['UseAscender'], 'Boolean');
      }
      if (data.hasOwnProperty('UseDescender')) {
        obj['UseDescender'] = ApiClient.convertToType(data['UseDescender'], 'Boolean');
      }
      if (data.hasOwnProperty('Column')) {
        obj['Column'] = ColumnText.constructFromObject(data['Column']);
      }
      if (data.hasOwnProperty('CompositeElements')) {
        obj['CompositeElements'] = ApiClient.convertToType(data['CompositeElements'], [IElement]);
      }
      if (data.hasOwnProperty('Rotation')) {
        obj['Rotation'] = ApiClient.convertToType(data['Rotation'], 'Integer');
      }
      if (data.hasOwnProperty('ID')) {
        obj['ID'] = AccessibleElementId.constructFromObject(data['ID']);
      }
      if (data.hasOwnProperty('IsInline')) {
        obj['IsInline'] = ApiClient.convertToType(data['IsInline'], 'Boolean');
      }
      if (data.hasOwnProperty('Headers')) {
        obj['Headers'] = ApiClient.convertToType(data['Headers'], [PdfPHeaderCell]);
      }
      if (data.hasOwnProperty('Type')) {
        obj['Type'] = ApiClient.convertToType(data['Type'], 'Integer');
      }
      if (data.hasOwnProperty('Chunks')) {
        obj['Chunks'] = ApiClient.convertToType(data['Chunks'], [Chunk]);
      }
      if (data.hasOwnProperty('Top')) {
        obj['Top'] = ApiClient.convertToType(data['Top'], 'Number');
      }
      if (data.hasOwnProperty('Border')) {
        obj['Border'] = ApiClient.convertToType(data['Border'], 'Integer');
      }
      if (data.hasOwnProperty('GrayFill')) {
        obj['GrayFill'] = ApiClient.convertToType(data['GrayFill'], 'Number');
      }
      if (data.hasOwnProperty('Left')) {
        obj['Left'] = ApiClient.convertToType(data['Left'], 'Number');
      }
      if (data.hasOwnProperty('Right')) {
        obj['Right'] = ApiClient.convertToType(data['Right'], 'Number');
      }
      if (data.hasOwnProperty('Bottom')) {
        obj['Bottom'] = ApiClient.convertToType(data['Bottom'], 'Number');
      }
      if (data.hasOwnProperty('BorderColorBottom')) {
        obj['BorderColorBottom'] = BaseColor.constructFromObject(data['BorderColorBottom']);
      }
      if (data.hasOwnProperty('BorderColorTop')) {
        obj['BorderColorTop'] = BaseColor.constructFromObject(data['BorderColorTop']);
      }
      if (data.hasOwnProperty('BorderColorLeft')) {
        obj['BorderColorLeft'] = BaseColor.constructFromObject(data['BorderColorLeft']);
      }
      if (data.hasOwnProperty('BorderColorRight')) {
        obj['BorderColorRight'] = BaseColor.constructFromObject(data['BorderColorRight']);
      }
      if (data.hasOwnProperty('Width')) {
        obj['Width'] = ApiClient.convertToType(data['Width'], 'Number');
      }
      if (data.hasOwnProperty('Height')) {
        obj['Height'] = ApiClient.convertToType(data['Height'], 'Number');
      }
      if (data.hasOwnProperty('BorderWidth')) {
        obj['BorderWidth'] = ApiClient.convertToType(data['BorderWidth'], 'Number');
      }
      if (data.hasOwnProperty('BorderColor')) {
        obj['BorderColor'] = BaseColor.constructFromObject(data['BorderColor']);
      }
      if (data.hasOwnProperty('BackgroundColor')) {
        obj['BackgroundColor'] = BaseColor.constructFromObject(data['BackgroundColor']);
      }
      if (data.hasOwnProperty('BorderWidthLeft')) {
        obj['BorderWidthLeft'] = ApiClient.convertToType(data['BorderWidthLeft'], 'Number');
      }
      if (data.hasOwnProperty('BorderWidthRight')) {
        obj['BorderWidthRight'] = ApiClient.convertToType(data['BorderWidthRight'], 'Number');
      }
      if (data.hasOwnProperty('BorderWidthTop')) {
        obj['BorderWidthTop'] = ApiClient.convertToType(data['BorderWidthTop'], 'Number');
      }
      if (data.hasOwnProperty('BorderWidthBottom')) {
        obj['BorderWidthBottom'] = ApiClient.convertToType(data['BorderWidthBottom'], 'Number');
      }
      if (data.hasOwnProperty('UseVariableBorders')) {
        obj['UseVariableBorders'] = ApiClient.convertToType(data['UseVariableBorders'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * @member {Integer} Scope
   */
  exports.prototype['Scope'] = undefined;
  /**
   * @member {String} Name
   */
  exports.prototype['Name'] = undefined;
  /**
   * @member {module:model/PdfName} Role
   */
  exports.prototype['Role'] = undefined;
  /**
   * @member {Array.<module:model/IElement>} Phrase
   */
  exports.prototype['Phrase'] = undefined;
  /**
   * @member {Integer} HorizontalAlignment
   */
  exports.prototype['HorizontalAlignment'] = undefined;
  /**
   * @member {Integer} VerticalAlignment
   */
  exports.prototype['VerticalAlignment'] = undefined;
  /**
   * @member {Number} EffectivePaddingLeft
   */
  exports.prototype['EffectivePaddingLeft'] = undefined;
  /**
   * @member {Number} PaddingLeft
   */
  exports.prototype['PaddingLeft'] = undefined;
  /**
   * @member {Number} EffectivePaddingRight
   */
  exports.prototype['EffectivePaddingRight'] = undefined;
  /**
   * @member {Number} PaddingRight
   */
  exports.prototype['PaddingRight'] = undefined;
  /**
   * @member {Number} EffectivePaddingTop
   */
  exports.prototype['EffectivePaddingTop'] = undefined;
  /**
   * @member {Number} PaddingTop
   */
  exports.prototype['PaddingTop'] = undefined;
  /**
   * @member {Number} EffectivePaddingBottom
   */
  exports.prototype['EffectivePaddingBottom'] = undefined;
  /**
   * @member {Number} PaddingBottom
   */
  exports.prototype['PaddingBottom'] = undefined;
  /**
   * @member {Number} Padding
   */
  exports.prototype['Padding'] = undefined;
  /**
   * @member {Boolean} UseBorderPadding
   */
  exports.prototype['UseBorderPadding'] = undefined;
  /**
   * @member {Number} Leading
   */
  exports.prototype['Leading'] = undefined;
  /**
   * @member {Number} MultipliedLeading
   */
  exports.prototype['MultipliedLeading'] = undefined;
  /**
   * @member {Number} Indent
   */
  exports.prototype['Indent'] = undefined;
  /**
   * @member {Number} ExtraParagraphSpace
   */
  exports.prototype['ExtraParagraphSpace'] = undefined;
  /**
   * @member {Number} CalculatedHeight
   */
  exports.prototype['CalculatedHeight'] = undefined;
  /**
   * @member {Number} FixedHeight
   */
  exports.prototype['FixedHeight'] = undefined;
  /**
   * @member {Number} CachedMaxHeight
   */
  exports.prototype['CachedMaxHeight'] = undefined;
  /**
   * @member {Boolean} NoWrap
   */
  exports.prototype['NoWrap'] = undefined;
  /**
   * @member {module:model/PdfPTable} Table
   */
  exports.prototype['Table'] = undefined;
  /**
   * @member {Number} MinimumHeight
   */
  exports.prototype['MinimumHeight'] = undefined;
  /**
   * @member {Integer} Colspan
   */
  exports.prototype['Colspan'] = undefined;
  /**
   * @member {Integer} Rowspan
   */
  exports.prototype['Rowspan'] = undefined;
  /**
   * @member {Number} FollowingIndent
   */
  exports.prototype['FollowingIndent'] = undefined;
  /**
   * @member {Number} RightIndent
   */
  exports.prototype['RightIndent'] = undefined;
  /**
   * @member {Number} SpaceCharRatio
   */
  exports.prototype['SpaceCharRatio'] = undefined;
  /**
   * @member {Integer} RunDirection
   */
  exports.prototype['RunDirection'] = undefined;
  /**
   * @member {module:model/Image} Image
   */
  exports.prototype['Image'] = undefined;
  /**
   * @member {module:model/IPdfPCellEvent} CellEvent
   */
  exports.prototype['CellEvent'] = undefined;
  /**
   * @member {Integer} ArabicOptions
   */
  exports.prototype['ArabicOptions'] = undefined;
  /**
   * @member {Boolean} UseAscender
   */
  exports.prototype['UseAscender'] = undefined;
  /**
   * @member {Boolean} UseDescender
   */
  exports.prototype['UseDescender'] = undefined;
  /**
   * @member {module:model/ColumnText} Column
   */
  exports.prototype['Column'] = undefined;
  /**
   * @member {Array.<module:model/IElement>} CompositeElements
   */
  exports.prototype['CompositeElements'] = undefined;
  /**
   * @member {Integer} Rotation
   */
  exports.prototype['Rotation'] = undefined;
  /**
   * @member {module:model/AccessibleElementId} ID
   */
  exports.prototype['ID'] = undefined;
  /**
   * @member {Boolean} IsInline
   */
  exports.prototype['IsInline'] = undefined;
  /**
   * @member {Array.<module:model/PdfPHeaderCell>} Headers
   */
  exports.prototype['Headers'] = undefined;
  /**
   * @member {Integer} Type
   */
  exports.prototype['Type'] = undefined;
  /**
   * @member {Array.<module:model/Chunk>} Chunks
   */
  exports.prototype['Chunks'] = undefined;
  /**
   * @member {Number} Top
   */
  exports.prototype['Top'] = undefined;
  /**
   * @member {Integer} Border
   */
  exports.prototype['Border'] = undefined;
  /**
   * @member {Number} GrayFill
   */
  exports.prototype['GrayFill'] = undefined;
  /**
   * @member {Number} Left
   */
  exports.prototype['Left'] = undefined;
  /**
   * @member {Number} Right
   */
  exports.prototype['Right'] = undefined;
  /**
   * @member {Number} Bottom
   */
  exports.prototype['Bottom'] = undefined;
  /**
   * @member {module:model/BaseColor} BorderColorBottom
   */
  exports.prototype['BorderColorBottom'] = undefined;
  /**
   * @member {module:model/BaseColor} BorderColorTop
   */
  exports.prototype['BorderColorTop'] = undefined;
  /**
   * @member {module:model/BaseColor} BorderColorLeft
   */
  exports.prototype['BorderColorLeft'] = undefined;
  /**
   * @member {module:model/BaseColor} BorderColorRight
   */
  exports.prototype['BorderColorRight'] = undefined;
  /**
   * @member {Number} Width
   */
  exports.prototype['Width'] = undefined;
  /**
   * @member {Number} Height
   */
  exports.prototype['Height'] = undefined;
  /**
   * @member {Number} BorderWidth
   */
  exports.prototype['BorderWidth'] = undefined;
  /**
   * @member {module:model/BaseColor} BorderColor
   */
  exports.prototype['BorderColor'] = undefined;
  /**
   * @member {module:model/BaseColor} BackgroundColor
   */
  exports.prototype['BackgroundColor'] = undefined;
  /**
   * @member {Number} BorderWidthLeft
   */
  exports.prototype['BorderWidthLeft'] = undefined;
  /**
   * @member {Number} BorderWidthRight
   */
  exports.prototype['BorderWidthRight'] = undefined;
  /**
   * @member {Number} BorderWidthTop
   */
  exports.prototype['BorderWidthTop'] = undefined;
  /**
   * @member {Number} BorderWidthBottom
   */
  exports.prototype['BorderWidthBottom'] = undefined;
  /**
   * @member {Boolean} UseVariableBorders
   */
  exports.prototype['UseVariableBorders'] = undefined;



  return exports;
}));


