/**
 * MS.LPS.API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccessibleElementId', 'model/Chunk', 'model/IPdfPTableEvent', 'model/PdfName', 'model/PdfPCell', 'model/PdfPRow'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AccessibleElementId'), require('./Chunk'), require('./IPdfPTableEvent'), require('./PdfName'), require('./PdfPCell'), require('./PdfPRow'));
  } else {
    // Browser globals (root is window)
    if (!root.Mslpsapi) {
      root.Mslpsapi = {};
    }
    root.Mslpsapi.PdfPTable = factory(root.Mslpsapi.ApiClient, root.Mslpsapi.AccessibleElementId, root.Mslpsapi.Chunk, root.Mslpsapi.IPdfPTableEvent, root.Mslpsapi.PdfName, root.Mslpsapi.PdfPCell, root.Mslpsapi.PdfPRow);
  }
}(this, function(ApiClient, AccessibleElementId, Chunk, IPdfPTableEvent, PdfName, PdfPCell, PdfPRow) {
  'use strict';




  /**
   * The PdfPTable model module.
   * @module model/PdfPTable
   * @version v1
   */

  /**
   * Constructs a new <code>PdfPTable</code>.
   * @alias module:model/PdfPTable
   * @class
   */
  var exports = function() {
    var _this = this;




































  };

  /**
   * Constructs a <code>PdfPTable</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PdfPTable} obj Optional instance to populate.
   * @return {module:model/PdfPTable} The populated <code>PdfPTable</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('Complete')) {
        obj['Complete'] = ApiClient.convertToType(data['Complete'], 'Boolean');
      }
      if (data.hasOwnProperty('TotalWidth')) {
        obj['TotalWidth'] = ApiClient.convertToType(data['TotalWidth'], 'Number');
      }
      if (data.hasOwnProperty('DefaultCell')) {
        obj['DefaultCell'] = PdfPCell.constructFromObject(data['DefaultCell']);
      }
      if (data.hasOwnProperty('Size')) {
        obj['Size'] = ApiClient.convertToType(data['Size'], 'Integer');
      }
      if (data.hasOwnProperty('TotalHeight')) {
        obj['TotalHeight'] = ApiClient.convertToType(data['TotalHeight'], 'Number');
      }
      if (data.hasOwnProperty('HeaderHeight')) {
        obj['HeaderHeight'] = ApiClient.convertToType(data['HeaderHeight'], 'Number');
      }
      if (data.hasOwnProperty('FooterHeight')) {
        obj['FooterHeight'] = ApiClient.convertToType(data['FooterHeight'], 'Number');
      }
      if (data.hasOwnProperty('NumberOfColumns')) {
        obj['NumberOfColumns'] = ApiClient.convertToType(data['NumberOfColumns'], 'Integer');
      }
      if (data.hasOwnProperty('HeaderRows')) {
        obj['HeaderRows'] = ApiClient.convertToType(data['HeaderRows'], 'Integer');
      }
      if (data.hasOwnProperty('FooterRows')) {
        obj['FooterRows'] = ApiClient.convertToType(data['FooterRows'], 'Integer');
      }
      if (data.hasOwnProperty('Chunks')) {
        obj['Chunks'] = ApiClient.convertToType(data['Chunks'], [Chunk]);
      }
      if (data.hasOwnProperty('Type')) {
        obj['Type'] = ApiClient.convertToType(data['Type'], 'Integer');
      }
      if (data.hasOwnProperty('WidthPercentage')) {
        obj['WidthPercentage'] = ApiClient.convertToType(data['WidthPercentage'], 'Number');
      }
      if (data.hasOwnProperty('HorizontalAlignment')) {
        obj['HorizontalAlignment'] = ApiClient.convertToType(data['HorizontalAlignment'], 'Integer');
      }
      if (data.hasOwnProperty('Rows')) {
        obj['Rows'] = ApiClient.convertToType(data['Rows'], [PdfPRow]);
      }
      if (data.hasOwnProperty('TableEvent')) {
        obj['TableEvent'] = IPdfPTableEvent.constructFromObject(data['TableEvent']);
      }
      if (data.hasOwnProperty('AbsoluteWidths')) {
        obj['AbsoluteWidths'] = ApiClient.convertToType(data['AbsoluteWidths'], ['Number']);
      }
      if (data.hasOwnProperty('SkipFirstHeader')) {
        obj['SkipFirstHeader'] = ApiClient.convertToType(data['SkipFirstHeader'], 'Boolean');
      }
      if (data.hasOwnProperty('SkipLastFooter')) {
        obj['SkipLastFooter'] = ApiClient.convertToType(data['SkipLastFooter'], 'Boolean');
      }
      if (data.hasOwnProperty('RunDirection')) {
        obj['RunDirection'] = ApiClient.convertToType(data['RunDirection'], 'Integer');
      }
      if (data.hasOwnProperty('LockedWidth')) {
        obj['LockedWidth'] = ApiClient.convertToType(data['LockedWidth'], 'Boolean');
      }
      if (data.hasOwnProperty('SplitRows')) {
        obj['SplitRows'] = ApiClient.convertToType(data['SplitRows'], 'Boolean');
      }
      if (data.hasOwnProperty('SpacingBefore')) {
        obj['SpacingBefore'] = ApiClient.convertToType(data['SpacingBefore'], 'Number');
      }
      if (data.hasOwnProperty('SpacingAfter')) {
        obj['SpacingAfter'] = ApiClient.convertToType(data['SpacingAfter'], 'Number');
      }
      if (data.hasOwnProperty('PaddingTop')) {
        obj['PaddingTop'] = ApiClient.convertToType(data['PaddingTop'], 'Number');
      }
      if (data.hasOwnProperty('Summary')) {
        obj['Summary'] = ApiClient.convertToType(data['Summary'], 'String');
      }
      if (data.hasOwnProperty('ExtendLastRow')) {
        obj['ExtendLastRow'] = ApiClient.convertToType(data['ExtendLastRow'], 'Boolean');
      }
      if (data.hasOwnProperty('HeadersInEvent')) {
        obj['HeadersInEvent'] = ApiClient.convertToType(data['HeadersInEvent'], 'Boolean');
      }
      if (data.hasOwnProperty('SplitLate')) {
        obj['SplitLate'] = ApiClient.convertToType(data['SplitLate'], 'Boolean');
      }
      if (data.hasOwnProperty('KeepTogether')) {
        obj['KeepTogether'] = ApiClient.convertToType(data['KeepTogether'], 'Boolean');
      }
      if (data.hasOwnProperty('ElementComplete')) {
        obj['ElementComplete'] = ApiClient.convertToType(data['ElementComplete'], 'Boolean');
      }
      if (data.hasOwnProperty('LoopCheck')) {
        obj['LoopCheck'] = ApiClient.convertToType(data['LoopCheck'], 'Boolean');
      }
      if (data.hasOwnProperty('Role')) {
        obj['Role'] = PdfName.constructFromObject(data['Role']);
      }
      if (data.hasOwnProperty('ID')) {
        obj['ID'] = AccessibleElementId.constructFromObject(data['ID']);
      }
      if (data.hasOwnProperty('IsInline')) {
        obj['IsInline'] = ApiClient.convertToType(data['IsInline'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * @member {Boolean} Complete
   */
  exports.prototype['Complete'] = undefined;
  /**
   * @member {Number} TotalWidth
   */
  exports.prototype['TotalWidth'] = undefined;
  /**
   * @member {module:model/PdfPCell} DefaultCell
   */
  exports.prototype['DefaultCell'] = undefined;
  /**
   * @member {Integer} Size
   */
  exports.prototype['Size'] = undefined;
  /**
   * @member {Number} TotalHeight
   */
  exports.prototype['TotalHeight'] = undefined;
  /**
   * @member {Number} HeaderHeight
   */
  exports.prototype['HeaderHeight'] = undefined;
  /**
   * @member {Number} FooterHeight
   */
  exports.prototype['FooterHeight'] = undefined;
  /**
   * @member {Integer} NumberOfColumns
   */
  exports.prototype['NumberOfColumns'] = undefined;
  /**
   * @member {Integer} HeaderRows
   */
  exports.prototype['HeaderRows'] = undefined;
  /**
   * @member {Integer} FooterRows
   */
  exports.prototype['FooterRows'] = undefined;
  /**
   * @member {Array.<module:model/Chunk>} Chunks
   */
  exports.prototype['Chunks'] = undefined;
  /**
   * @member {Integer} Type
   */
  exports.prototype['Type'] = undefined;
  /**
   * @member {Number} WidthPercentage
   */
  exports.prototype['WidthPercentage'] = undefined;
  /**
   * @member {Integer} HorizontalAlignment
   */
  exports.prototype['HorizontalAlignment'] = undefined;
  /**
   * @member {Array.<module:model/PdfPRow>} Rows
   */
  exports.prototype['Rows'] = undefined;
  /**
   * @member {module:model/IPdfPTableEvent} TableEvent
   */
  exports.prototype['TableEvent'] = undefined;
  /**
   * @member {Array.<Number>} AbsoluteWidths
   */
  exports.prototype['AbsoluteWidths'] = undefined;
  /**
   * @member {Boolean} SkipFirstHeader
   */
  exports.prototype['SkipFirstHeader'] = undefined;
  /**
   * @member {Boolean} SkipLastFooter
   */
  exports.prototype['SkipLastFooter'] = undefined;
  /**
   * @member {Integer} RunDirection
   */
  exports.prototype['RunDirection'] = undefined;
  /**
   * @member {Boolean} LockedWidth
   */
  exports.prototype['LockedWidth'] = undefined;
  /**
   * @member {Boolean} SplitRows
   */
  exports.prototype['SplitRows'] = undefined;
  /**
   * @member {Number} SpacingBefore
   */
  exports.prototype['SpacingBefore'] = undefined;
  /**
   * @member {Number} SpacingAfter
   */
  exports.prototype['SpacingAfter'] = undefined;
  /**
   * @member {Number} PaddingTop
   */
  exports.prototype['PaddingTop'] = undefined;
  /**
   * @member {String} Summary
   */
  exports.prototype['Summary'] = undefined;
  /**
   * @member {Boolean} ExtendLastRow
   */
  exports.prototype['ExtendLastRow'] = undefined;
  /**
   * @member {Boolean} HeadersInEvent
   */
  exports.prototype['HeadersInEvent'] = undefined;
  /**
   * @member {Boolean} SplitLate
   */
  exports.prototype['SplitLate'] = undefined;
  /**
   * @member {Boolean} KeepTogether
   */
  exports.prototype['KeepTogether'] = undefined;
  /**
   * @member {Boolean} ElementComplete
   */
  exports.prototype['ElementComplete'] = undefined;
  /**
   * @member {Boolean} LoopCheck
   */
  exports.prototype['LoopCheck'] = undefined;
  /**
   * @member {module:model/PdfName} Role
   */
  exports.prototype['Role'] = undefined;
  /**
   * @member {module:model/AccessibleElementId} ID
   */
  exports.prototype['ID'] = undefined;
  /**
   * @member {Boolean} IsInline
   */
  exports.prototype['IsInline'] = undefined;



  return exports;
}));


