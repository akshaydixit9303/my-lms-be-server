/**
 * MS.LPS.API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AcroFields', 'model/PRAcroForm', 'model/PdfDictionary', 'model/RandomAccessFileOrArray'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AcroFields'), require('./PRAcroForm'), require('./PdfDictionary'), require('./RandomAccessFileOrArray'));
  } else {
    // Browser globals (root is window)
    if (!root.Mslpsapi) {
      root.Mslpsapi = {};
    }
    root.Mslpsapi.PdfReader = factory(root.Mslpsapi.ApiClient, root.Mslpsapi.AcroFields, root.Mslpsapi.PRAcroForm, root.Mslpsapi.PdfDictionary, root.Mslpsapi.RandomAccessFileOrArray);
  }
}(this, function(ApiClient, AcroFields, PRAcroForm, PdfDictionary, RandomAccessFileOrArray) {
  'use strict';




  /**
   * The PdfReader model module.
   * @module model/PdfReader
   * @version v1
   */

  /**
   * Constructs a new <code>PdfReader</code>.
   * @alias module:model/PdfReader
   * @class
   */
  var exports = function() {
    var _this = this;





















  };

  /**
   * Constructs a <code>PdfReader</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PdfReader} obj Optional instance to populate.
   * @return {module:model/PdfReader} The populated <code>PdfReader</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('SafeFile')) {
        obj['SafeFile'] = RandomAccessFileOrArray.constructFromObject(data['SafeFile']);
      }
      if (data.hasOwnProperty('NumberOfPages')) {
        obj['NumberOfPages'] = ApiClient.convertToType(data['NumberOfPages'], 'Integer');
      }
      if (data.hasOwnProperty('Catalog')) {
        obj['Catalog'] = PdfDictionary.constructFromObject(data['Catalog']);
      }
      if (data.hasOwnProperty('AcroForm')) {
        obj['AcroForm'] = PRAcroForm.constructFromObject(data['AcroForm']);
      }
      if (data.hasOwnProperty('Info')) {
        obj['Info'] = ApiClient.convertToType(data['Info'], {'String': 'String'});
      }
      if (data.hasOwnProperty('Tampered')) {
        obj['Tampered'] = ApiClient.convertToType(data['Tampered'], 'Boolean');
      }
      if (data.hasOwnProperty('Metadata')) {
        obj['Metadata'] = ApiClient.convertToType(data['Metadata'], 'String');
      }
      if (data.hasOwnProperty('LastXref')) {
        obj['LastXref'] = ApiClient.convertToType(data['LastXref'], 'Integer');
      }
      if (data.hasOwnProperty('XrefSize')) {
        obj['XrefSize'] = ApiClient.convertToType(data['XrefSize'], 'Integer');
      }
      if (data.hasOwnProperty('EofPos')) {
        obj['EofPos'] = ApiClient.convertToType(data['EofPos'], 'Integer');
      }
      if (data.hasOwnProperty('PdfVersion')) {
        obj['PdfVersion'] = ApiClient.convertToType(data['PdfVersion'], 'String');
      }
      if (data.hasOwnProperty('Permissions')) {
        obj['Permissions'] = ApiClient.convertToType(data['Permissions'], 'Integer');
      }
      if (data.hasOwnProperty('Trailer')) {
        obj['Trailer'] = PdfDictionary.constructFromObject(data['Trailer']);
      }
      if (data.hasOwnProperty('AcroFields')) {
        obj['AcroFields'] = AcroFields.constructFromObject(data['AcroFields']);
      }
      if (data.hasOwnProperty('JavaScript')) {
        obj['JavaScript'] = ApiClient.convertToType(data['JavaScript'], 'String');
      }
      if (data.hasOwnProperty('ViewerPreferences')) {
        obj['ViewerPreferences'] = ApiClient.convertToType(data['ViewerPreferences'], 'Integer');
      }
      if (data.hasOwnProperty('SimpleViewerPreferences')) {
        obj['SimpleViewerPreferences'] = ApiClient.convertToType(data['SimpleViewerPreferences'], 'Integer');
      }
      if (data.hasOwnProperty('Appendable')) {
        obj['Appendable'] = ApiClient.convertToType(data['Appendable'], 'Boolean');
      }
      if (data.hasOwnProperty('FileLength')) {
        obj['FileLength'] = ApiClient.convertToType(data['FileLength'], 'Integer');
      }
      if (data.hasOwnProperty('IsOpenedWithFullPermissions')) {
        obj['IsOpenedWithFullPermissions'] = ApiClient.convertToType(data['IsOpenedWithFullPermissions'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * @member {module:model/RandomAccessFileOrArray} SafeFile
   */
  exports.prototype['SafeFile'] = undefined;
  /**
   * @member {Integer} NumberOfPages
   */
  exports.prototype['NumberOfPages'] = undefined;
  /**
   * @member {module:model/PdfDictionary} Catalog
   */
  exports.prototype['Catalog'] = undefined;
  /**
   * @member {module:model/PRAcroForm} AcroForm
   */
  exports.prototype['AcroForm'] = undefined;
  /**
   * @member {Object.<String, String>} Info
   */
  exports.prototype['Info'] = undefined;
  /**
   * @member {Boolean} Tampered
   */
  exports.prototype['Tampered'] = undefined;
  /**
   * @member {String} Metadata
   */
  exports.prototype['Metadata'] = undefined;
  /**
   * @member {Integer} LastXref
   */
  exports.prototype['LastXref'] = undefined;
  /**
   * @member {Integer} XrefSize
   */
  exports.prototype['XrefSize'] = undefined;
  /**
   * @member {Integer} EofPos
   */
  exports.prototype['EofPos'] = undefined;
  /**
   * @member {String} PdfVersion
   */
  exports.prototype['PdfVersion'] = undefined;
  /**
   * @member {Integer} Permissions
   */
  exports.prototype['Permissions'] = undefined;
  /**
   * @member {module:model/PdfDictionary} Trailer
   */
  exports.prototype['Trailer'] = undefined;
  /**
   * @member {module:model/AcroFields} AcroFields
   */
  exports.prototype['AcroFields'] = undefined;
  /**
   * @member {String} JavaScript
   */
  exports.prototype['JavaScript'] = undefined;
  /**
   * @member {Integer} ViewerPreferences
   */
  exports.prototype['ViewerPreferences'] = undefined;
  /**
   * @member {Integer} SimpleViewerPreferences
   */
  exports.prototype['SimpleViewerPreferences'] = undefined;
  /**
   * @member {Boolean} Appendable
   */
  exports.prototype['Appendable'] = undefined;
  /**
   * @member {Integer} FileLength
   */
  exports.prototype['FileLength'] = undefined;
  /**
   * @member {Boolean} IsOpenedWithFullPermissions
   */
  exports.prototype['IsOpenedWithFullPermissions'] = undefined;



  return exports;
}));


