/**
 * MS.LPS.API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccessibleElementId', 'model/AcroFields', 'model/AcroFieldsSearch', 'model/Address', 'model/Annotation', 'model/BaseColor', 'model/BaseFont', 'model/BaseResponseResult', 'model/ByteBuffer', 'model/Chunk', 'model/ColumnText', 'model/ConfigInfo', 'model/FieldInformation', 'model/Font', 'model/ICCProfile', 'model/IDrawInterface', 'model/IElement', 'model/IPdfOCG', 'model/IPdfPCellEvent', 'model/IPdfPTableEvent', 'model/IPdfPageEvent', 'model/IXmpMeta', 'model/Image', 'model/InverseStore', 'model/Item', 'model/Order', 'model/OrderInfo', 'model/OutputStreamCounter', 'model/PRAcroForm', 'model/PRIndirectReference', 'model/PdfAcroForm', 'model/PdfCollection', 'model/PdfCollectionSchema', 'model/PdfCollectionSort', 'model/PdfContentByte', 'model/PdfDictionary', 'model/PdfDocument', 'model/PdfIndirectReference', 'model/PdfName', 'model/PdfOCProperties', 'model/PdfObject', 'model/PdfOutline', 'model/PdfPCell', 'model/PdfPHeaderCell', 'model/PdfPRow', 'model/PdfPTable', 'model/PdfPageLabels', 'model/PdfReader', 'model/PdfStructureTreeRoot', 'model/PdfTemplate', 'model/PdfTransition', 'model/PdfTransparencyGroup', 'model/PdfWriter', 'model/PrintInfo', 'model/ProductInfo', 'model/RandomAccessFileOrArray', 'model/Rectangle', 'model/TabSettings', 'model/TabStop', 'model/TextField', 'model/XfaForm', 'model/Xml2SomDatasets', 'model/Xml2SomTemplate', 'model/XmpWriter', 'api/FreightApi', 'api/LogisticsApi', 'api/LogsiticsCompanyApi', 'api/PrintApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/AccessibleElementId'), require('./model/AcroFields'), require('./model/AcroFieldsSearch'), require('./model/Address'), require('./model/Annotation'), require('./model/BaseColor'), require('./model/BaseFont'), require('./model/BaseResponseResult'), require('./model/ByteBuffer'), require('./model/Chunk'), require('./model/ColumnText'), require('./model/ConfigInfo'), require('./model/FieldInformation'), require('./model/Font'), require('./model/ICCProfile'), require('./model/IDrawInterface'), require('./model/IElement'), require('./model/IPdfOCG'), require('./model/IPdfPCellEvent'), require('./model/IPdfPTableEvent'), require('./model/IPdfPageEvent'), require('./model/IXmpMeta'), require('./model/Image'), require('./model/InverseStore'), require('./model/Item'), require('./model/Order'), require('./model/OrderInfo'), require('./model/OutputStreamCounter'), require('./model/PRAcroForm'), require('./model/PRIndirectReference'), require('./model/PdfAcroForm'), require('./model/PdfCollection'), require('./model/PdfCollectionSchema'), require('./model/PdfCollectionSort'), require('./model/PdfContentByte'), require('./model/PdfDictionary'), require('./model/PdfDocument'), require('./model/PdfIndirectReference'), require('./model/PdfName'), require('./model/PdfOCProperties'), require('./model/PdfObject'), require('./model/PdfOutline'), require('./model/PdfPCell'), require('./model/PdfPHeaderCell'), require('./model/PdfPRow'), require('./model/PdfPTable'), require('./model/PdfPageLabels'), require('./model/PdfReader'), require('./model/PdfStructureTreeRoot'), require('./model/PdfTemplate'), require('./model/PdfTransition'), require('./model/PdfTransparencyGroup'), require('./model/PdfWriter'), require('./model/PrintInfo'), require('./model/ProductInfo'), require('./model/RandomAccessFileOrArray'), require('./model/Rectangle'), require('./model/TabSettings'), require('./model/TabStop'), require('./model/TextField'), require('./model/XfaForm'), require('./model/Xml2SomDatasets'), require('./model/Xml2SomTemplate'), require('./model/XmpWriter'), require('./api/FreightApi'), require('./api/LogisticsApi'), require('./api/LogsiticsCompanyApi'), require('./api/PrintApi'));
  }
}(function(ApiClient, AccessibleElementId, AcroFields, AcroFieldsSearch, Address, Annotation, BaseColor, BaseFont, BaseResponseResult, ByteBuffer, Chunk, ColumnText, ConfigInfo, FieldInformation, Font, ICCProfile, IDrawInterface, IElement, IPdfOCG, IPdfPCellEvent, IPdfPTableEvent, IPdfPageEvent, IXmpMeta, Image, InverseStore, Item, Order, OrderInfo, OutputStreamCounter, PRAcroForm, PRIndirectReference, PdfAcroForm, PdfCollection, PdfCollectionSchema, PdfCollectionSort, PdfContentByte, PdfDictionary, PdfDocument, PdfIndirectReference, PdfName, PdfOCProperties, PdfObject, PdfOutline, PdfPCell, PdfPHeaderCell, PdfPRow, PdfPTable, PdfPageLabels, PdfReader, PdfStructureTreeRoot, PdfTemplate, PdfTransition, PdfTransparencyGroup, PdfWriter, PrintInfo, ProductInfo, RandomAccessFileOrArray, Rectangle, TabSettings, TabStop, TextField, XfaForm, Xml2SomDatasets, Xml2SomTemplate, XmpWriter, FreightApi, LogisticsApi, LogsiticsCompanyApi, PrintApi) {
  'use strict';

  /**
   * ERROR_UNKNOWN.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var Mslpsapi = require('index'); // See note below*.
   * var xxxSvc = new Mslpsapi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new Mslpsapi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new Mslpsapi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new Mslpsapi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version v1
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The AccessibleElementId model constructor.
     * @property {module:model/AccessibleElementId}
     */
    AccessibleElementId: AccessibleElementId,
    /**
     * The AcroFields model constructor.
     * @property {module:model/AcroFields}
     */
    AcroFields: AcroFields,
    /**
     * The AcroFieldsSearch model constructor.
     * @property {module:model/AcroFieldsSearch}
     */
    AcroFieldsSearch: AcroFieldsSearch,
    /**
     * The Address model constructor.
     * @property {module:model/Address}
     */
    Address: Address,
    /**
     * The Annotation model constructor.
     * @property {module:model/Annotation}
     */
    Annotation: Annotation,
    /**
     * The BaseColor model constructor.
     * @property {module:model/BaseColor}
     */
    BaseColor: BaseColor,
    /**
     * The BaseFont model constructor.
     * @property {module:model/BaseFont}
     */
    BaseFont: BaseFont,
    /**
     * The BaseResponseResult model constructor.
     * @property {module:model/BaseResponseResult}
     */
    BaseResponseResult: BaseResponseResult,
    /**
     * The ByteBuffer model constructor.
     * @property {module:model/ByteBuffer}
     */
    ByteBuffer: ByteBuffer,
    /**
     * The Chunk model constructor.
     * @property {module:model/Chunk}
     */
    Chunk: Chunk,
    /**
     * The ColumnText model constructor.
     * @property {module:model/ColumnText}
     */
    ColumnText: ColumnText,
    /**
     * The ConfigInfo model constructor.
     * @property {module:model/ConfigInfo}
     */
    ConfigInfo: ConfigInfo,
    /**
     * The FieldInformation model constructor.
     * @property {module:model/FieldInformation}
     */
    FieldInformation: FieldInformation,
    /**
     * The Font model constructor.
     * @property {module:model/Font}
     */
    Font: Font,
    /**
     * The ICCProfile model constructor.
     * @property {module:model/ICCProfile}
     */
    ICCProfile: ICCProfile,
    /**
     * The IDrawInterface model constructor.
     * @property {module:model/IDrawInterface}
     */
    IDrawInterface: IDrawInterface,
    /**
     * The IElement model constructor.
     * @property {module:model/IElement}
     */
    IElement: IElement,
    /**
     * The IPdfOCG model constructor.
     * @property {module:model/IPdfOCG}
     */
    IPdfOCG: IPdfOCG,
    /**
     * The IPdfPCellEvent model constructor.
     * @property {module:model/IPdfPCellEvent}
     */
    IPdfPCellEvent: IPdfPCellEvent,
    /**
     * The IPdfPTableEvent model constructor.
     * @property {module:model/IPdfPTableEvent}
     */
    IPdfPTableEvent: IPdfPTableEvent,
    /**
     * The IPdfPageEvent model constructor.
     * @property {module:model/IPdfPageEvent}
     */
    IPdfPageEvent: IPdfPageEvent,
    /**
     * The IXmpMeta model constructor.
     * @property {module:model/IXmpMeta}
     */
    IXmpMeta: IXmpMeta,
    /**
     * The Image model constructor.
     * @property {module:model/Image}
     */
    Image: Image,
    /**
     * The InverseStore model constructor.
     * @property {module:model/InverseStore}
     */
    InverseStore: InverseStore,
    /**
     * The Item model constructor.
     * @property {module:model/Item}
     */
    Item: Item,
    /**
     * The Order model constructor.
     * @property {module:model/Order}
     */
    Order: Order,
    /**
     * The OrderInfo model constructor.
     * @property {module:model/OrderInfo}
     */
    OrderInfo: OrderInfo,
    /**
     * The OutputStreamCounter model constructor.
     * @property {module:model/OutputStreamCounter}
     */
    OutputStreamCounter: OutputStreamCounter,
    /**
     * The PRAcroForm model constructor.
     * @property {module:model/PRAcroForm}
     */
    PRAcroForm: PRAcroForm,
    /**
     * The PRIndirectReference model constructor.
     * @property {module:model/PRIndirectReference}
     */
    PRIndirectReference: PRIndirectReference,
    /**
     * The PdfAcroForm model constructor.
     * @property {module:model/PdfAcroForm}
     */
    PdfAcroForm: PdfAcroForm,
    /**
     * The PdfCollection model constructor.
     * @property {module:model/PdfCollection}
     */
    PdfCollection: PdfCollection,
    /**
     * The PdfCollectionSchema model constructor.
     * @property {module:model/PdfCollectionSchema}
     */
    PdfCollectionSchema: PdfCollectionSchema,
    /**
     * The PdfCollectionSort model constructor.
     * @property {module:model/PdfCollectionSort}
     */
    PdfCollectionSort: PdfCollectionSort,
    /**
     * The PdfContentByte model constructor.
     * @property {module:model/PdfContentByte}
     */
    PdfContentByte: PdfContentByte,
    /**
     * The PdfDictionary model constructor.
     * @property {module:model/PdfDictionary}
     */
    PdfDictionary: PdfDictionary,
    /**
     * The PdfDocument model constructor.
     * @property {module:model/PdfDocument}
     */
    PdfDocument: PdfDocument,
    /**
     * The PdfIndirectReference model constructor.
     * @property {module:model/PdfIndirectReference}
     */
    PdfIndirectReference: PdfIndirectReference,
    /**
     * The PdfName model constructor.
     * @property {module:model/PdfName}
     */
    PdfName: PdfName,
    /**
     * The PdfOCProperties model constructor.
     * @property {module:model/PdfOCProperties}
     */
    PdfOCProperties: PdfOCProperties,
    /**
     * The PdfObject model constructor.
     * @property {module:model/PdfObject}
     */
    PdfObject: PdfObject,
    /**
     * The PdfOutline model constructor.
     * @property {module:model/PdfOutline}
     */
    PdfOutline: PdfOutline,
    /**
     * The PdfPCell model constructor.
     * @property {module:model/PdfPCell}
     */
    PdfPCell: PdfPCell,
    /**
     * The PdfPHeaderCell model constructor.
     * @property {module:model/PdfPHeaderCell}
     */
    PdfPHeaderCell: PdfPHeaderCell,
    /**
     * The PdfPRow model constructor.
     * @property {module:model/PdfPRow}
     */
    PdfPRow: PdfPRow,
    /**
     * The PdfPTable model constructor.
     * @property {module:model/PdfPTable}
     */
    PdfPTable: PdfPTable,
    /**
     * The PdfPageLabels model constructor.
     * @property {module:model/PdfPageLabels}
     */
    PdfPageLabels: PdfPageLabels,
    /**
     * The PdfReader model constructor.
     * @property {module:model/PdfReader}
     */
    PdfReader: PdfReader,
    /**
     * The PdfStructureTreeRoot model constructor.
     * @property {module:model/PdfStructureTreeRoot}
     */
    PdfStructureTreeRoot: PdfStructureTreeRoot,
    /**
     * The PdfTemplate model constructor.
     * @property {module:model/PdfTemplate}
     */
    PdfTemplate: PdfTemplate,
    /**
     * The PdfTransition model constructor.
     * @property {module:model/PdfTransition}
     */
    PdfTransition: PdfTransition,
    /**
     * The PdfTransparencyGroup model constructor.
     * @property {module:model/PdfTransparencyGroup}
     */
    PdfTransparencyGroup: PdfTransparencyGroup,
    /**
     * The PdfWriter model constructor.
     * @property {module:model/PdfWriter}
     */
    PdfWriter: PdfWriter,
    /**
     * The PrintInfo model constructor.
     * @property {module:model/PrintInfo}
     */
    PrintInfo: PrintInfo,
    /**
     * The ProductInfo model constructor.
     * @property {module:model/ProductInfo}
     */
    ProductInfo: ProductInfo,
    /**
     * The RandomAccessFileOrArray model constructor.
     * @property {module:model/RandomAccessFileOrArray}
     */
    RandomAccessFileOrArray: RandomAccessFileOrArray,
    /**
     * The Rectangle model constructor.
     * @property {module:model/Rectangle}
     */
    Rectangle: Rectangle,
    /**
     * The TabSettings model constructor.
     * @property {module:model/TabSettings}
     */
    TabSettings: TabSettings,
    /**
     * The TabStop model constructor.
     * @property {module:model/TabStop}
     */
    TabStop: TabStop,
    /**
     * The TextField model constructor.
     * @property {module:model/TextField}
     */
    TextField: TextField,
    /**
     * The XfaForm model constructor.
     * @property {module:model/XfaForm}
     */
    XfaForm: XfaForm,
    /**
     * The Xml2SomDatasets model constructor.
     * @property {module:model/Xml2SomDatasets}
     */
    Xml2SomDatasets: Xml2SomDatasets,
    /**
     * The Xml2SomTemplate model constructor.
     * @property {module:model/Xml2SomTemplate}
     */
    Xml2SomTemplate: Xml2SomTemplate,
    /**
     * The XmpWriter model constructor.
     * @property {module:model/XmpWriter}
     */
    XmpWriter: XmpWriter,
    /**
     * The FreightApi service constructor.
     * @property {module:api/FreightApi}
     */
    FreightApi: FreightApi,
    /**
     * The LogisticsApi service constructor.
     * @property {module:api/LogisticsApi}
     */
    LogisticsApi: LogisticsApi,
    /**
     * The LogsiticsCompanyApi service constructor.
     * @property {module:api/LogsiticsCompanyApi}
     */
    LogsiticsCompanyApi: LogsiticsCompanyApi,
    /**
     * The PrintApi service constructor.
     * @property {module:api/PrintApi}
     */
    PrintApi: PrintApi
  };

  return exports;
}));
