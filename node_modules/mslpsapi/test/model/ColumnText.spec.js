/**
 * MS.LPS.API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Mslpsapi);
  }
}(this, function(expect, Mslpsapi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Mslpsapi.ColumnText();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ColumnText', function() {
    it('should create an instance of ColumnText', function() {
      // uncomment below and update the code to test ColumnText
      //var instane = new Mslpsapi.ColumnText();
      //expect(instance).to.be.a(Mslpsapi.ColumnText);
    });

    it('should have the property leading (base name: "Leading")', function() {
      // uncomment below and update the code to test the property leading
      //var instane = new Mslpsapi.ColumnText();
      //expect(instance).to.be();
    });

    it('should have the property multipliedLeading (base name: "MultipliedLeading")', function() {
      // uncomment below and update the code to test the property multipliedLeading
      //var instane = new Mslpsapi.ColumnText();
      //expect(instance).to.be();
    });

    it('should have the property yLine (base name: "YLine")', function() {
      // uncomment below and update the code to test the property yLine
      //var instane = new Mslpsapi.ColumnText();
      //expect(instance).to.be();
    });

    it('should have the property rowsDrawn (base name: "RowsDrawn")', function() {
      // uncomment below and update the code to test the property rowsDrawn
      //var instane = new Mslpsapi.ColumnText();
      //expect(instance).to.be();
    });

    it('should have the property alignment (base name: "Alignment")', function() {
      // uncomment below and update the code to test the property alignment
      //var instane = new Mslpsapi.ColumnText();
      //expect(instance).to.be();
    });

    it('should have the property indent (base name: "Indent")', function() {
      // uncomment below and update the code to test the property indent
      //var instane = new Mslpsapi.ColumnText();
      //expect(instance).to.be();
    });

    it('should have the property followingIndent (base name: "FollowingIndent")', function() {
      // uncomment below and update the code to test the property followingIndent
      //var instane = new Mslpsapi.ColumnText();
      //expect(instance).to.be();
    });

    it('should have the property rightIndent (base name: "RightIndent")', function() {
      // uncomment below and update the code to test the property rightIndent
      //var instane = new Mslpsapi.ColumnText();
      //expect(instance).to.be();
    });

    it('should have the property currentLeading (base name: "CurrentLeading")', function() {
      // uncomment below and update the code to test the property currentLeading
      //var instane = new Mslpsapi.ColumnText();
      //expect(instance).to.be();
    });

    it('should have the property inheritGraphicState (base name: "InheritGraphicState")', function() {
      // uncomment below and update the code to test the property inheritGraphicState
      //var instane = new Mslpsapi.ColumnText();
      //expect(instance).to.be();
    });

    it('should have the property ignoreSpacingBefore (base name: "IgnoreSpacingBefore")', function() {
      // uncomment below and update the code to test the property ignoreSpacingBefore
      //var instane = new Mslpsapi.ColumnText();
      //expect(instance).to.be();
    });

    it('should have the property extraParagraphSpace (base name: "ExtraParagraphSpace")', function() {
      // uncomment below and update the code to test the property extraParagraphSpace
      //var instane = new Mslpsapi.ColumnText();
      //expect(instance).to.be();
    });

    it('should have the property spaceCharRatio (base name: "SpaceCharRatio")', function() {
      // uncomment below and update the code to test the property spaceCharRatio
      //var instane = new Mslpsapi.ColumnText();
      //expect(instance).to.be();
    });

    it('should have the property runDirection (base name: "RunDirection")', function() {
      // uncomment below and update the code to test the property runDirection
      //var instane = new Mslpsapi.ColumnText();
      //expect(instance).to.be();
    });

    it('should have the property linesWritten (base name: "LinesWritten")', function() {
      // uncomment below and update the code to test the property linesWritten
      //var instane = new Mslpsapi.ColumnText();
      //expect(instance).to.be();
    });

    it('should have the property lastX (base name: "LastX")', function() {
      // uncomment below and update the code to test the property lastX
      //var instane = new Mslpsapi.ColumnText();
      //expect(instance).to.be();
    });

    it('should have the property arabicOptions (base name: "ArabicOptions")', function() {
      // uncomment below and update the code to test the property arabicOptions
      //var instane = new Mslpsapi.ColumnText();
      //expect(instance).to.be();
    });

    it('should have the property descender (base name: "Descender")', function() {
      // uncomment below and update the code to test the property descender
      //var instane = new Mslpsapi.ColumnText();
      //expect(instance).to.be();
    });

    it('should have the property canvas (base name: "Canvas")', function() {
      // uncomment below and update the code to test the property canvas
      //var instane = new Mslpsapi.ColumnText();
      //expect(instance).to.be();
    });

    it('should have the property canvases (base name: "Canvases")', function() {
      // uncomment below and update the code to test the property canvases
      //var instane = new Mslpsapi.ColumnText();
      //expect(instance).to.be();
    });

    it('should have the property compositeElements (base name: "CompositeElements")', function() {
      // uncomment below and update the code to test the property compositeElements
      //var instane = new Mslpsapi.ColumnText();
      //expect(instance).to.be();
    });

    it('should have the property useAscender (base name: "UseAscender")', function() {
      // uncomment below and update the code to test the property useAscender
      //var instane = new Mslpsapi.ColumnText();
      //expect(instance).to.be();
    });

    it('should have the property filledWidth (base name: "FilledWidth")', function() {
      // uncomment below and update the code to test the property filledWidth
      //var instane = new Mslpsapi.ColumnText();
      //expect(instance).to.be();
    });

    it('should have the property adjustFirstLine (base name: "AdjustFirstLine")', function() {
      // uncomment below and update the code to test the property adjustFirstLine
      //var instane = new Mslpsapi.ColumnText();
      //expect(instance).to.be();
    });

  });

}));
