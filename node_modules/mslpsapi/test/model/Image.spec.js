/**
 * MS.LPS.API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Mslpsapi);
  }
}(this, function(expect, Mslpsapi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Mslpsapi.Image();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Image', function() {
    it('should create an instance of Image', function() {
      // uncomment below and update the code to test Image
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be.a(Mslpsapi.Image);
    });

    it('should have the property rotation (base name: "Rotation")', function() {
      // uncomment below and update the code to test the property rotation
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property rotationDegrees (base name: "RotationDegrees")', function() {
      // uncomment below and update the code to test the property rotationDegrees
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property annotation (base name: "Annotation")', function() {
      // uncomment below and update the code to test the property annotation
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property bpc (base name: "Bpc")', function() {
      // uncomment below and update the code to test the property bpc
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property rawData (base name: "RawData")', function() {
      // uncomment below and update the code to test the property rawData
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property templateData (base name: "TemplateData")', function() {
      // uncomment below and update the code to test the property templateData
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property absoluteX (base name: "AbsoluteX")', function() {
      // uncomment below and update the code to test the property absoluteX
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property absoluteY (base name: "AbsoluteY")', function() {
      // uncomment below and update the code to test the property absoluteY
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "Type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "Url")', function() {
      // uncomment below and update the code to test the property url
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property alignment (base name: "Alignment")', function() {
      // uncomment below and update the code to test the property alignment
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property alt (base name: "Alt")', function() {
      // uncomment below and update the code to test the property alt
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property scaledWidth (base name: "ScaledWidth")', function() {
      // uncomment below and update the code to test the property scaledWidth
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property scaledHeight (base name: "ScaledHeight")', function() {
      // uncomment below and update the code to test the property scaledHeight
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property colorspace (base name: "Colorspace")', function() {
      // uncomment below and update the code to test the property colorspace
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property colorTransform (base name: "ColorTransform")', function() {
      // uncomment below and update the code to test the property colorTransform
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property transparency (base name: "Transparency")', function() {
      // uncomment below and update the code to test the property transparency
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property plainWidth (base name: "PlainWidth")', function() {
      // uncomment below and update the code to test the property plainWidth
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property plainHeight (base name: "PlainHeight")', function() {
      // uncomment below and update the code to test the property plainHeight
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property mySerialId (base name: "MySerialId")', function() {
      // uncomment below and update the code to test the property mySerialId
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property dpiX (base name: "DpiX")', function() {
      // uncomment below and update the code to test the property dpiX
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property dpiY (base name: "DpiY")', function() {
      // uncomment below and update the code to test the property dpiY
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property imageMask (base name: "ImageMask")', function() {
      // uncomment below and update the code to test the property imageMask
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property inverted (base name: "Inverted")', function() {
      // uncomment below and update the code to test the property inverted
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property interpolation (base name: "Interpolation")', function() {
      // uncomment below and update the code to test the property interpolation
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property tagICC (base name: "TagICC")', function() {
      // uncomment below and update the code to test the property tagICC
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property deflated (base name: "Deflated")', function() {
      // uncomment below and update the code to test the property deflated
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property additional (base name: "Additional")', function() {
      // uncomment below and update the code to test the property additional
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property smask (base name: "Smask")', function() {
      // uncomment below and update the code to test the property smask
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property xYRatio (base name: "XYRatio")', function() {
      // uncomment below and update the code to test the property xYRatio
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property indentationLeft (base name: "IndentationLeft")', function() {
      // uncomment below and update the code to test the property indentationLeft
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property indentationRight (base name: "IndentationRight")', function() {
      // uncomment below and update the code to test the property indentationRight
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property originalType (base name: "OriginalType")', function() {
      // uncomment below and update the code to test the property originalType
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property originalData (base name: "OriginalData")', function() {
      // uncomment below and update the code to test the property originalData
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property spacingBefore (base name: "SpacingBefore")', function() {
      // uncomment below and update the code to test the property spacingBefore
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property spacingAfter (base name: "SpacingAfter")', function() {
      // uncomment below and update the code to test the property spacingAfter
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property paddingTop (base name: "PaddingTop")', function() {
      // uncomment below and update the code to test the property paddingTop
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property widthPercentage (base name: "WidthPercentage")', function() {
      // uncomment below and update the code to test the property widthPercentage
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property scaleToFitLineWhenOverflow (base name: "ScaleToFitLineWhenOverflow")', function() {
      // uncomment below and update the code to test the property scaleToFitLineWhenOverflow
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property scaleToFitHeight (base name: "ScaleToFitHeight")', function() {
      // uncomment below and update the code to test the property scaleToFitHeight
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property layer (base name: "Layer")', function() {
      // uncomment below and update the code to test the property layer
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property initialRotation (base name: "InitialRotation")', function() {
      // uncomment below and update the code to test the property initialRotation
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property directReference (base name: "DirectReference")', function() {
      // uncomment below and update the code to test the property directReference
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property compressionLevel (base name: "CompressionLevel")', function() {
      // uncomment below and update the code to test the property compressionLevel
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property role (base name: "Role")', function() {
      // uncomment below and update the code to test the property role
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property ID (base name: "ID")', function() {
      // uncomment below and update the code to test the property ID
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property isInline (base name: "IsInline")', function() {
      // uncomment below and update the code to test the property isInline
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property chunks (base name: "Chunks")', function() {
      // uncomment below and update the code to test the property chunks
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property top (base name: "Top")', function() {
      // uncomment below and update the code to test the property top
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property border (base name: "Border")', function() {
      // uncomment below and update the code to test the property border
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property grayFill (base name: "GrayFill")', function() {
      // uncomment below and update the code to test the property grayFill
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property left (base name: "Left")', function() {
      // uncomment below and update the code to test the property left
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property right (base name: "Right")', function() {
      // uncomment below and update the code to test the property right
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property bottom (base name: "Bottom")', function() {
      // uncomment below and update the code to test the property bottom
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property borderColorBottom (base name: "BorderColorBottom")', function() {
      // uncomment below and update the code to test the property borderColorBottom
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property borderColorTop (base name: "BorderColorTop")', function() {
      // uncomment below and update the code to test the property borderColorTop
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property borderColorLeft (base name: "BorderColorLeft")', function() {
      // uncomment below and update the code to test the property borderColorLeft
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property borderColorRight (base name: "BorderColorRight")', function() {
      // uncomment below and update the code to test the property borderColorRight
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property width (base name: "Width")', function() {
      // uncomment below and update the code to test the property width
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property height (base name: "Height")', function() {
      // uncomment below and update the code to test the property height
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property borderWidth (base name: "BorderWidth")', function() {
      // uncomment below and update the code to test the property borderWidth
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property borderColor (base name: "BorderColor")', function() {
      // uncomment below and update the code to test the property borderColor
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property backgroundColor (base name: "BackgroundColor")', function() {
      // uncomment below and update the code to test the property backgroundColor
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property borderWidthLeft (base name: "BorderWidthLeft")', function() {
      // uncomment below and update the code to test the property borderWidthLeft
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property borderWidthRight (base name: "BorderWidthRight")', function() {
      // uncomment below and update the code to test the property borderWidthRight
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property borderWidthTop (base name: "BorderWidthTop")', function() {
      // uncomment below and update the code to test the property borderWidthTop
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property borderWidthBottom (base name: "BorderWidthBottom")', function() {
      // uncomment below and update the code to test the property borderWidthBottom
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

    it('should have the property useVariableBorders (base name: "UseVariableBorders")', function() {
      // uncomment below and update the code to test the property useVariableBorders
      //var instane = new Mslpsapi.Image();
      //expect(instance).to.be();
    });

  });

}));
