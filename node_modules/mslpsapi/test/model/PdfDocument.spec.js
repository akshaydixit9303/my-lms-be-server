/**
 * MS.LPS.API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Mslpsapi);
  }
}(this, function(expect, Mslpsapi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Mslpsapi.PdfDocument();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PdfDocument', function() {
    it('should create an instance of PdfDocument', function() {
      // uncomment below and update the code to test PdfDocument
      //var instane = new Mslpsapi.PdfDocument();
      //expect(instance).to.be.a(Mslpsapi.PdfDocument);
    });

    it('should have the property leading (base name: "Leading")', function() {
      // uncomment below and update the code to test the property leading
      //var instane = new Mslpsapi.PdfDocument();
      //expect(instance).to.be();
    });

    it('should have the property tabSettings (base name: "TabSettings")', function() {
      // uncomment below and update the code to test the property tabSettings
      //var instane = new Mslpsapi.PdfDocument();
      //expect(instance).to.be();
    });

    it('should have the property xmpMetadata (base name: "XmpMetadata")', function() {
      // uncomment below and update the code to test the property xmpMetadata
      //var instane = new Mslpsapi.PdfDocument();
      //expect(instance).to.be();
    });

    it('should have the property pageCount (base name: "PageCount")', function() {
      // uncomment below and update the code to test the property pageCount
      //var instane = new Mslpsapi.PdfDocument();
      //expect(instance).to.be();
    });

    it('should have the property rootOutline (base name: "RootOutline")', function() {
      // uncomment below and update the code to test the property rootOutline
      //var instane = new Mslpsapi.PdfDocument();
      //expect(instance).to.be();
    });

    it('should have the property pageLabels (base name: "PageLabels")', function() {
      // uncomment below and update the code to test the property pageLabels
      //var instane = new Mslpsapi.PdfDocument();
      //expect(instance).to.be();
    });

    it('should have the property collection (base name: "Collection")', function() {
      // uncomment below and update the code to test the property collection
      //var instane = new Mslpsapi.PdfDocument();
      //expect(instance).to.be();
    });

    it('should have the property acroForm (base name: "AcroForm")', function() {
      // uncomment below and update the code to test the property acroForm
      //var instane = new Mslpsapi.PdfDocument();
      //expect(instance).to.be();
    });

    it('should have the property pageNumber (base name: "PageNumber")', function() {
      // uncomment below and update the code to test the property pageNumber
      //var instane = new Mslpsapi.PdfDocument();
      //expect(instance).to.be();
    });

    it('should have the property leftMargin (base name: "LeftMargin")', function() {
      // uncomment below and update the code to test the property leftMargin
      //var instane = new Mslpsapi.PdfDocument();
      //expect(instance).to.be();
    });

    it('should have the property rightMargin (base name: "RightMargin")', function() {
      // uncomment below and update the code to test the property rightMargin
      //var instane = new Mslpsapi.PdfDocument();
      //expect(instance).to.be();
    });

    it('should have the property topMargin (base name: "TopMargin")', function() {
      // uncomment below and update the code to test the property topMargin
      //var instane = new Mslpsapi.PdfDocument();
      //expect(instance).to.be();
    });

    it('should have the property bottomMargin (base name: "BottomMargin")', function() {
      // uncomment below and update the code to test the property bottomMargin
      //var instane = new Mslpsapi.PdfDocument();
      //expect(instance).to.be();
    });

    it('should have the property left (base name: "Left")', function() {
      // uncomment below and update the code to test the property left
      //var instane = new Mslpsapi.PdfDocument();
      //expect(instance).to.be();
    });

    it('should have the property right (base name: "Right")', function() {
      // uncomment below and update the code to test the property right
      //var instane = new Mslpsapi.PdfDocument();
      //expect(instance).to.be();
    });

    it('should have the property top (base name: "Top")', function() {
      // uncomment below and update the code to test the property top
      //var instane = new Mslpsapi.PdfDocument();
      //expect(instance).to.be();
    });

    it('should have the property bottom (base name: "Bottom")', function() {
      // uncomment below and update the code to test the property bottom
      //var instane = new Mslpsapi.PdfDocument();
      //expect(instance).to.be();
    });

    it('should have the property pageSize (base name: "PageSize")', function() {
      // uncomment below and update the code to test the property pageSize
      //var instane = new Mslpsapi.PdfDocument();
      //expect(instance).to.be();
    });

    it('should have the property javaScriptOnLoad (base name: "JavaScript_onLoad")', function() {
      // uncomment below and update the code to test the property javaScriptOnLoad
      //var instane = new Mslpsapi.PdfDocument();
      //expect(instance).to.be();
    });

    it('should have the property javaScriptOnUnLoad (base name: "JavaScript_onUnLoad")', function() {
      // uncomment below and update the code to test the property javaScriptOnUnLoad
      //var instane = new Mslpsapi.PdfDocument();
      //expect(instance).to.be();
    });

    it('should have the property htmlStyleClass (base name: "HtmlStyleClass")', function() {
      // uncomment below and update the code to test the property htmlStyleClass
      //var instane = new Mslpsapi.PdfDocument();
      //expect(instance).to.be();
    });

    it('should have the property role (base name: "Role")', function() {
      // uncomment below and update the code to test the property role
      //var instane = new Mslpsapi.PdfDocument();
      //expect(instance).to.be();
    });

    it('should have the property ID (base name: "ID")', function() {
      // uncomment below and update the code to test the property ID
      //var instane = new Mslpsapi.PdfDocument();
      //expect(instance).to.be();
    });

    it('should have the property isInline (base name: "IsInline")', function() {
      // uncomment below and update the code to test the property isInline
      //var instane = new Mslpsapi.PdfDocument();
      //expect(instance).to.be();
    });

  });

}));
