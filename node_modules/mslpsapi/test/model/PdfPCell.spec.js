/**
 * MS.LPS.API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Mslpsapi);
  }
}(this, function(expect, Mslpsapi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Mslpsapi.PdfPCell();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PdfPCell', function() {
    it('should create an instance of PdfPCell', function() {
      // uncomment below and update the code to test PdfPCell
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be.a(Mslpsapi.PdfPCell);
    });

    it('should have the property phrase (base name: "Phrase")', function() {
      // uncomment below and update the code to test the property phrase
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property horizontalAlignment (base name: "HorizontalAlignment")', function() {
      // uncomment below and update the code to test the property horizontalAlignment
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property verticalAlignment (base name: "VerticalAlignment")', function() {
      // uncomment below and update the code to test the property verticalAlignment
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property effectivePaddingLeft (base name: "EffectivePaddingLeft")', function() {
      // uncomment below and update the code to test the property effectivePaddingLeft
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property paddingLeft (base name: "PaddingLeft")', function() {
      // uncomment below and update the code to test the property paddingLeft
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property effectivePaddingRight (base name: "EffectivePaddingRight")', function() {
      // uncomment below and update the code to test the property effectivePaddingRight
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property paddingRight (base name: "PaddingRight")', function() {
      // uncomment below and update the code to test the property paddingRight
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property effectivePaddingTop (base name: "EffectivePaddingTop")', function() {
      // uncomment below and update the code to test the property effectivePaddingTop
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property paddingTop (base name: "PaddingTop")', function() {
      // uncomment below and update the code to test the property paddingTop
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property effectivePaddingBottom (base name: "EffectivePaddingBottom")', function() {
      // uncomment below and update the code to test the property effectivePaddingBottom
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property paddingBottom (base name: "PaddingBottom")', function() {
      // uncomment below and update the code to test the property paddingBottom
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property padding (base name: "Padding")', function() {
      // uncomment below and update the code to test the property padding
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property useBorderPadding (base name: "UseBorderPadding")', function() {
      // uncomment below and update the code to test the property useBorderPadding
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property leading (base name: "Leading")', function() {
      // uncomment below and update the code to test the property leading
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property multipliedLeading (base name: "MultipliedLeading")', function() {
      // uncomment below and update the code to test the property multipliedLeading
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property indent (base name: "Indent")', function() {
      // uncomment below and update the code to test the property indent
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property extraParagraphSpace (base name: "ExtraParagraphSpace")', function() {
      // uncomment below and update the code to test the property extraParagraphSpace
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property calculatedHeight (base name: "CalculatedHeight")', function() {
      // uncomment below and update the code to test the property calculatedHeight
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property fixedHeight (base name: "FixedHeight")', function() {
      // uncomment below and update the code to test the property fixedHeight
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property cachedMaxHeight (base name: "CachedMaxHeight")', function() {
      // uncomment below and update the code to test the property cachedMaxHeight
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property noWrap (base name: "NoWrap")', function() {
      // uncomment below and update the code to test the property noWrap
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property table (base name: "Table")', function() {
      // uncomment below and update the code to test the property table
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property minimumHeight (base name: "MinimumHeight")', function() {
      // uncomment below and update the code to test the property minimumHeight
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property colspan (base name: "Colspan")', function() {
      // uncomment below and update the code to test the property colspan
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property rowspan (base name: "Rowspan")', function() {
      // uncomment below and update the code to test the property rowspan
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property followingIndent (base name: "FollowingIndent")', function() {
      // uncomment below and update the code to test the property followingIndent
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property rightIndent (base name: "RightIndent")', function() {
      // uncomment below and update the code to test the property rightIndent
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property spaceCharRatio (base name: "SpaceCharRatio")', function() {
      // uncomment below and update the code to test the property spaceCharRatio
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property runDirection (base name: "RunDirection")', function() {
      // uncomment below and update the code to test the property runDirection
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property image (base name: "Image")', function() {
      // uncomment below and update the code to test the property image
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property cellEvent (base name: "CellEvent")', function() {
      // uncomment below and update the code to test the property cellEvent
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property arabicOptions (base name: "ArabicOptions")', function() {
      // uncomment below and update the code to test the property arabicOptions
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property useAscender (base name: "UseAscender")', function() {
      // uncomment below and update the code to test the property useAscender
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property useDescender (base name: "UseDescender")', function() {
      // uncomment below and update the code to test the property useDescender
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property column (base name: "Column")', function() {
      // uncomment below and update the code to test the property column
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property compositeElements (base name: "CompositeElements")', function() {
      // uncomment below and update the code to test the property compositeElements
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property rotation (base name: "Rotation")', function() {
      // uncomment below and update the code to test the property rotation
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property role (base name: "Role")', function() {
      // uncomment below and update the code to test the property role
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property ID (base name: "ID")', function() {
      // uncomment below and update the code to test the property ID
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property isInline (base name: "IsInline")', function() {
      // uncomment below and update the code to test the property isInline
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property headers (base name: "Headers")', function() {
      // uncomment below and update the code to test the property headers
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "Type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property chunks (base name: "Chunks")', function() {
      // uncomment below and update the code to test the property chunks
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property top (base name: "Top")', function() {
      // uncomment below and update the code to test the property top
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property border (base name: "Border")', function() {
      // uncomment below and update the code to test the property border
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property grayFill (base name: "GrayFill")', function() {
      // uncomment below and update the code to test the property grayFill
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property left (base name: "Left")', function() {
      // uncomment below and update the code to test the property left
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property right (base name: "Right")', function() {
      // uncomment below and update the code to test the property right
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property bottom (base name: "Bottom")', function() {
      // uncomment below and update the code to test the property bottom
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property borderColorBottom (base name: "BorderColorBottom")', function() {
      // uncomment below and update the code to test the property borderColorBottom
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property borderColorTop (base name: "BorderColorTop")', function() {
      // uncomment below and update the code to test the property borderColorTop
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property borderColorLeft (base name: "BorderColorLeft")', function() {
      // uncomment below and update the code to test the property borderColorLeft
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property borderColorRight (base name: "BorderColorRight")', function() {
      // uncomment below and update the code to test the property borderColorRight
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property width (base name: "Width")', function() {
      // uncomment below and update the code to test the property width
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property height (base name: "Height")', function() {
      // uncomment below and update the code to test the property height
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property borderWidth (base name: "BorderWidth")', function() {
      // uncomment below and update the code to test the property borderWidth
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property borderColor (base name: "BorderColor")', function() {
      // uncomment below and update the code to test the property borderColor
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property backgroundColor (base name: "BackgroundColor")', function() {
      // uncomment below and update the code to test the property backgroundColor
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property borderWidthLeft (base name: "BorderWidthLeft")', function() {
      // uncomment below and update the code to test the property borderWidthLeft
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property borderWidthRight (base name: "BorderWidthRight")', function() {
      // uncomment below and update the code to test the property borderWidthRight
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property borderWidthTop (base name: "BorderWidthTop")', function() {
      // uncomment below and update the code to test the property borderWidthTop
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property borderWidthBottom (base name: "BorderWidthBottom")', function() {
      // uncomment below and update the code to test the property borderWidthBottom
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

    it('should have the property useVariableBorders (base name: "UseVariableBorders")', function() {
      // uncomment below and update the code to test the property useVariableBorders
      //var instane = new Mslpsapi.PdfPCell();
      //expect(instance).to.be();
    });

  });

}));
