/**
 * MS.LPS.API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Mslpsapi);
  }
}(this, function(expect, Mslpsapi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Mslpsapi.PdfPTable();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PdfPTable', function() {
    it('should create an instance of PdfPTable', function() {
      // uncomment below and update the code to test PdfPTable
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be.a(Mslpsapi.PdfPTable);
    });

    it('should have the property complete (base name: "Complete")', function() {
      // uncomment below and update the code to test the property complete
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property totalWidth (base name: "TotalWidth")', function() {
      // uncomment below and update the code to test the property totalWidth
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property defaultCell (base name: "DefaultCell")', function() {
      // uncomment below and update the code to test the property defaultCell
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property size (base name: "Size")', function() {
      // uncomment below and update the code to test the property size
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property totalHeight (base name: "TotalHeight")', function() {
      // uncomment below and update the code to test the property totalHeight
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property headerHeight (base name: "HeaderHeight")', function() {
      // uncomment below and update the code to test the property headerHeight
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property footerHeight (base name: "FooterHeight")', function() {
      // uncomment below and update the code to test the property footerHeight
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property numberOfColumns (base name: "NumberOfColumns")', function() {
      // uncomment below and update the code to test the property numberOfColumns
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property headerRows (base name: "HeaderRows")', function() {
      // uncomment below and update the code to test the property headerRows
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property footerRows (base name: "FooterRows")', function() {
      // uncomment below and update the code to test the property footerRows
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property chunks (base name: "Chunks")', function() {
      // uncomment below and update the code to test the property chunks
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "Type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property widthPercentage (base name: "WidthPercentage")', function() {
      // uncomment below and update the code to test the property widthPercentage
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property horizontalAlignment (base name: "HorizontalAlignment")', function() {
      // uncomment below and update the code to test the property horizontalAlignment
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property rows (base name: "Rows")', function() {
      // uncomment below and update the code to test the property rows
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property tableEvent (base name: "TableEvent")', function() {
      // uncomment below and update the code to test the property tableEvent
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property absoluteWidths (base name: "AbsoluteWidths")', function() {
      // uncomment below and update the code to test the property absoluteWidths
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property skipFirstHeader (base name: "SkipFirstHeader")', function() {
      // uncomment below and update the code to test the property skipFirstHeader
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property skipLastFooter (base name: "SkipLastFooter")', function() {
      // uncomment below and update the code to test the property skipLastFooter
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property runDirection (base name: "RunDirection")', function() {
      // uncomment below and update the code to test the property runDirection
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property lockedWidth (base name: "LockedWidth")', function() {
      // uncomment below and update the code to test the property lockedWidth
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property splitRows (base name: "SplitRows")', function() {
      // uncomment below and update the code to test the property splitRows
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property spacingBefore (base name: "SpacingBefore")', function() {
      // uncomment below and update the code to test the property spacingBefore
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property spacingAfter (base name: "SpacingAfter")', function() {
      // uncomment below and update the code to test the property spacingAfter
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property paddingTop (base name: "PaddingTop")', function() {
      // uncomment below and update the code to test the property paddingTop
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property summary (base name: "Summary")', function() {
      // uncomment below and update the code to test the property summary
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property extendLastRow (base name: "ExtendLastRow")', function() {
      // uncomment below and update the code to test the property extendLastRow
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property headersInEvent (base name: "HeadersInEvent")', function() {
      // uncomment below and update the code to test the property headersInEvent
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property splitLate (base name: "SplitLate")', function() {
      // uncomment below and update the code to test the property splitLate
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property keepTogether (base name: "KeepTogether")', function() {
      // uncomment below and update the code to test the property keepTogether
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property elementComplete (base name: "ElementComplete")', function() {
      // uncomment below and update the code to test the property elementComplete
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property loopCheck (base name: "LoopCheck")', function() {
      // uncomment below and update the code to test the property loopCheck
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property role (base name: "Role")', function() {
      // uncomment below and update the code to test the property role
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property ID (base name: "ID")', function() {
      // uncomment below and update the code to test the property ID
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

    it('should have the property isInline (base name: "IsInline")', function() {
      // uncomment below and update the code to test the property isInline
      //var instane = new Mslpsapi.PdfPTable();
      //expect(instance).to.be();
    });

  });

}));
