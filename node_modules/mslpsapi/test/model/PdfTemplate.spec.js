/**
 * MS.LPS.API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Mslpsapi);
  }
}(this, function(expect, Mslpsapi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Mslpsapi.PdfTemplate();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PdfTemplate', function() {
    it('should create an instance of PdfTemplate', function() {
      // uncomment below and update the code to test PdfTemplate
      //var instane = new Mslpsapi.PdfTemplate();
      //expect(instance).to.be.a(Mslpsapi.PdfTemplate);
    });

    it('should have the property width (base name: "Width")', function() {
      // uncomment below and update the code to test the property width
      //var instane = new Mslpsapi.PdfTemplate();
      //expect(instance).to.be();
    });

    it('should have the property height (base name: "Height")', function() {
      // uncomment below and update the code to test the property height
      //var instane = new Mslpsapi.PdfTemplate();
      //expect(instance).to.be();
    });

    it('should have the property boundingBox (base name: "BoundingBox")', function() {
      // uncomment below and update the code to test the property boundingBox
      //var instane = new Mslpsapi.PdfTemplate();
      //expect(instance).to.be();
    });

    it('should have the property layer (base name: "Layer")', function() {
      // uncomment below and update the code to test the property layer
      //var instane = new Mslpsapi.PdfTemplate();
      //expect(instance).to.be();
    });

    it('should have the property indirectReference (base name: "IndirectReference")', function() {
      // uncomment below and update the code to test the property indirectReference
      //var instane = new Mslpsapi.PdfTemplate();
      //expect(instance).to.be();
    });

    it('should have the property duplicate (base name: "Duplicate")', function() {
      // uncomment below and update the code to test the property duplicate
      //var instane = new Mslpsapi.PdfTemplate();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "Type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new Mslpsapi.PdfTemplate();
      //expect(instance).to.be();
    });

    it('should have the property group (base name: "Group")', function() {
      // uncomment below and update the code to test the property group
      //var instane = new Mslpsapi.PdfTemplate();
      //expect(instance).to.be();
    });

    it('should have the property additional (base name: "Additional")', function() {
      // uncomment below and update the code to test the property additional
      //var instane = new Mslpsapi.PdfTemplate();
      //expect(instance).to.be();
    });

    it('should have the property pageReference (base name: "PageReference")', function() {
      // uncomment below and update the code to test the property pageReference
      //var instane = new Mslpsapi.PdfTemplate();
      //expect(instance).to.be();
    });

    it('should have the property contentTagged (base name: "ContentTagged")', function() {
      // uncomment below and update the code to test the property contentTagged
      //var instane = new Mslpsapi.PdfTemplate();
      //expect(instance).to.be();
    });

    it('should have the property role (base name: "Role")', function() {
      // uncomment below and update the code to test the property role
      //var instane = new Mslpsapi.PdfTemplate();
      //expect(instance).to.be();
    });

    it('should have the property ID (base name: "ID")', function() {
      // uncomment below and update the code to test the property ID
      //var instane = new Mslpsapi.PdfTemplate();
      //expect(instance).to.be();
    });

    it('should have the property isInline (base name: "IsInline")', function() {
      // uncomment below and update the code to test the property isInline
      //var instane = new Mslpsapi.PdfTemplate();
      //expect(instance).to.be();
    });

    it('should have the property suppressTagging (base name: "SuppressTagging")', function() {
      // uncomment below and update the code to test the property suppressTagging
      //var instane = new Mslpsapi.PdfTemplate();
      //expect(instance).to.be();
    });

    it('should have the property internalBuffer (base name: "InternalBuffer")', function() {
      // uncomment below and update the code to test the property internalBuffer
      //var instane = new Mslpsapi.PdfTemplate();
      //expect(instance).to.be();
    });

    it('should have the property XTLM (base name: "XTLM")', function() {
      // uncomment below and update the code to test the property XTLM
      //var instane = new Mslpsapi.PdfTemplate();
      //expect(instance).to.be();
    });

    it('should have the property YTLM (base name: "YTLM")', function() {
      // uncomment below and update the code to test the property YTLM
      //var instane = new Mslpsapi.PdfTemplate();
      //expect(instance).to.be();
    });

    it('should have the property characterSpacing (base name: "CharacterSpacing")', function() {
      // uncomment below and update the code to test the property characterSpacing
      //var instane = new Mslpsapi.PdfTemplate();
      //expect(instance).to.be();
    });

    it('should have the property wordSpacing (base name: "WordSpacing")', function() {
      // uncomment below and update the code to test the property wordSpacing
      //var instane = new Mslpsapi.PdfTemplate();
      //expect(instance).to.be();
    });

    it('should have the property horizontalScaling (base name: "HorizontalScaling")', function() {
      // uncomment below and update the code to test the property horizontalScaling
      //var instane = new Mslpsapi.PdfTemplate();
      //expect(instance).to.be();
    });

    it('should have the property leading (base name: "Leading")', function() {
      // uncomment below and update the code to test the property leading
      //var instane = new Mslpsapi.PdfTemplate();
      //expect(instance).to.be();
    });

    it('should have the property rootOutline (base name: "RootOutline")', function() {
      // uncomment below and update the code to test the property rootOutline
      //var instane = new Mslpsapi.PdfTemplate();
      //expect(instance).to.be();
    });

    it('should have the property pdfWriter (base name: "PdfWriter")', function() {
      // uncomment below and update the code to test the property pdfWriter
      //var instane = new Mslpsapi.PdfTemplate();
      //expect(instance).to.be();
    });

    it('should have the property pdfDocument (base name: "PdfDocument")', function() {
      // uncomment below and update the code to test the property pdfDocument
      //var instane = new Mslpsapi.PdfTemplate();
      //expect(instance).to.be();
    });

  });

}));
