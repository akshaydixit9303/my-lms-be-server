/**
 * MS.LPS.API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Mslpsapi);
  }
}(this, function(expect, Mslpsapi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Mslpsapi.TextField();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TextField', function() {
    it('should create an instance of TextField', function() {
      // uncomment below and update the code to test TextField
      //var instane = new Mslpsapi.TextField();
      //expect(instance).to.be.a(Mslpsapi.TextField);
    });

    it('should have the property defaultText (base name: "DefaultText")', function() {
      // uncomment below and update the code to test the property defaultText
      //var instane = new Mslpsapi.TextField();
      //expect(instance).to.be();
    });

    it('should have the property choices (base name: "Choices")', function() {
      // uncomment below and update the code to test the property choices
      //var instane = new Mslpsapi.TextField();
      //expect(instance).to.be();
    });

    it('should have the property choiceExports (base name: "ChoiceExports")', function() {
      // uncomment below and update the code to test the property choiceExports
      //var instane = new Mslpsapi.TextField();
      //expect(instance).to.be();
    });

    it('should have the property choiceSelection (base name: "ChoiceSelection")', function() {
      // uncomment below and update the code to test the property choiceSelection
      //var instane = new Mslpsapi.TextField();
      //expect(instance).to.be();
    });

    it('should have the property choiceSelections (base name: "ChoiceSelections")', function() {
      // uncomment below and update the code to test the property choiceSelections
      //var instane = new Mslpsapi.TextField();
      //expect(instance).to.be();
    });

    it('should have the property visibleTopChoice (base name: "VisibleTopChoice")', function() {
      // uncomment below and update the code to test the property visibleTopChoice
      //var instane = new Mslpsapi.TextField();
      //expect(instance).to.be();
    });

    it('should have the property substitutionFonts (base name: "SubstitutionFonts")', function() {
      // uncomment below and update the code to test the property substitutionFonts
      //var instane = new Mslpsapi.TextField();
      //expect(instance).to.be();
    });

    it('should have the property extensionFont (base name: "ExtensionFont")', function() {
      // uncomment below and update the code to test the property extensionFont
      //var instane = new Mslpsapi.TextField();
      //expect(instance).to.be();
    });

    it('should have the property borderWidth (base name: "BorderWidth")', function() {
      // uncomment below and update the code to test the property borderWidth
      //var instane = new Mslpsapi.TextField();
      //expect(instance).to.be();
    });

    it('should have the property borderStyle (base name: "BorderStyle")', function() {
      // uncomment below and update the code to test the property borderStyle
      //var instane = new Mslpsapi.TextField();
      //expect(instance).to.be();
    });

    it('should have the property borderColor (base name: "BorderColor")', function() {
      // uncomment below and update the code to test the property borderColor
      //var instane = new Mslpsapi.TextField();
      //expect(instance).to.be();
    });

    it('should have the property backgroundColor (base name: "BackgroundColor")', function() {
      // uncomment below and update the code to test the property backgroundColor
      //var instane = new Mslpsapi.TextField();
      //expect(instance).to.be();
    });

    it('should have the property textColor (base name: "TextColor")', function() {
      // uncomment below and update the code to test the property textColor
      //var instane = new Mslpsapi.TextField();
      //expect(instance).to.be();
    });

    it('should have the property font (base name: "Font")', function() {
      // uncomment below and update the code to test the property font
      //var instane = new Mslpsapi.TextField();
      //expect(instance).to.be();
    });

    it('should have the property fontSize (base name: "FontSize")', function() {
      // uncomment below and update the code to test the property fontSize
      //var instane = new Mslpsapi.TextField();
      //expect(instance).to.be();
    });

    it('should have the property alignment (base name: "Alignment")', function() {
      // uncomment below and update the code to test the property alignment
      //var instane = new Mslpsapi.TextField();
      //expect(instance).to.be();
    });

    it('should have the property text (base name: "Text")', function() {
      // uncomment below and update the code to test the property text
      //var instane = new Mslpsapi.TextField();
      //expect(instance).to.be();
    });

    it('should have the property box (base name: "Box")', function() {
      // uncomment below and update the code to test the property box
      //var instane = new Mslpsapi.TextField();
      //expect(instance).to.be();
    });

    it('should have the property rotation (base name: "Rotation")', function() {
      // uncomment below and update the code to test the property rotation
      //var instane = new Mslpsapi.TextField();
      //expect(instance).to.be();
    });

    it('should have the property visibility (base name: "Visibility")', function() {
      // uncomment below and update the code to test the property visibility
      //var instane = new Mslpsapi.TextField();
      //expect(instance).to.be();
    });

    it('should have the property fieldName (base name: "FieldName")', function() {
      // uncomment below and update the code to test the property fieldName
      //var instane = new Mslpsapi.TextField();
      //expect(instance).to.be();
    });

    it('should have the property options (base name: "Options")', function() {
      // uncomment below and update the code to test the property options
      //var instane = new Mslpsapi.TextField();
      //expect(instance).to.be();
    });

    it('should have the property maxCharacterLength (base name: "MaxCharacterLength")', function() {
      // uncomment below and update the code to test the property maxCharacterLength
      //var instane = new Mslpsapi.TextField();
      //expect(instance).to.be();
    });

    it('should have the property writer (base name: "Writer")', function() {
      // uncomment below and update the code to test the property writer
      //var instane = new Mslpsapi.TextField();
      //expect(instance).to.be();
    });

  });

}));
