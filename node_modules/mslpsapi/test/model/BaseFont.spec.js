/**
 * MS.LPS.API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Mslpsapi);
  }
}(this, function(expect, Mslpsapi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Mslpsapi.BaseFont();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BaseFont', function() {
    it('should create an instance of BaseFont', function() {
      // uncomment below and update the code to test BaseFont
      //var instane = new Mslpsapi.BaseFont();
      //expect(instance).to.be.a(Mslpsapi.BaseFont);
    });

    it('should have the property subsetRanges (base name: "SubsetRanges")', function() {
      // uncomment below and update the code to test the property subsetRanges
      //var instane = new Mslpsapi.BaseFont();
      //expect(instance).to.be();
    });

    it('should have the property encoding (base name: "Encoding")', function() {
      // uncomment below and update the code to test the property encoding
      //var instane = new Mslpsapi.BaseFont();
      //expect(instance).to.be();
    });

    it('should have the property fontType (base name: "FontType")', function() {
      // uncomment below and update the code to test the property fontType
      //var instane = new Mslpsapi.BaseFont();
      //expect(instance).to.be();
    });

    it('should have the property postscriptFontName (base name: "PostscriptFontName")', function() {
      // uncomment below and update the code to test the property postscriptFontName
      //var instane = new Mslpsapi.BaseFont();
      //expect(instance).to.be();
    });

    it('should have the property subfamily (base name: "Subfamily")', function() {
      // uncomment below and update the code to test the property subfamily
      //var instane = new Mslpsapi.BaseFont();
      //expect(instance).to.be();
    });

    it('should have the property fullFontName (base name: "FullFontName")', function() {
      // uncomment below and update the code to test the property fullFontName
      //var instane = new Mslpsapi.BaseFont();
      //expect(instance).to.be();
    });

    it('should have the property allNameEntries (base name: "AllNameEntries")', function() {
      // uncomment below and update the code to test the property allNameEntries
      //var instane = new Mslpsapi.BaseFont();
      //expect(instance).to.be();
    });

    it('should have the property familyFontName (base name: "FamilyFontName")', function() {
      // uncomment below and update the code to test the property familyFontName
      //var instane = new Mslpsapi.BaseFont();
      //expect(instance).to.be();
    });

    it('should have the property codePagesSupported (base name: "CodePagesSupported")', function() {
      // uncomment below and update the code to test the property codePagesSupported
      //var instane = new Mslpsapi.BaseFont();
      //expect(instance).to.be();
    });

    it('should have the property widths (base name: "Widths")', function() {
      // uncomment below and update the code to test the property widths
      //var instane = new Mslpsapi.BaseFont();
      //expect(instance).to.be();
    });

    it('should have the property differences (base name: "Differences")', function() {
      // uncomment below and update the code to test the property differences
      //var instane = new Mslpsapi.BaseFont();
      //expect(instance).to.be();
    });

    it('should have the property unicodeDifferences (base name: "UnicodeDifferences")', function() {
      // uncomment below and update the code to test the property unicodeDifferences
      //var instane = new Mslpsapi.BaseFont();
      //expect(instance).to.be();
    });

    it('should have the property forceWidthsOutput (base name: "ForceWidthsOutput")', function() {
      // uncomment below and update the code to test the property forceWidthsOutput
      //var instane = new Mslpsapi.BaseFont();
      //expect(instance).to.be();
    });

    it('should have the property directTextToByte (base name: "DirectTextToByte")', function() {
      // uncomment below and update the code to test the property directTextToByte
      //var instane = new Mslpsapi.BaseFont();
      //expect(instance).to.be();
    });

    it('should have the property subset (base name: "Subset")', function() {
      // uncomment below and update the code to test the property subset
      //var instane = new Mslpsapi.BaseFont();
      //expect(instance).to.be();
    });

    it('should have the property compressionLevel (base name: "CompressionLevel")', function() {
      // uncomment below and update the code to test the property compressionLevel
      //var instane = new Mslpsapi.BaseFont();
      //expect(instance).to.be();
    });

  });

}));
