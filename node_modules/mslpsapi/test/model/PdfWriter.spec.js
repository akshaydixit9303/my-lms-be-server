/**
 * MS.LPS.API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Mslpsapi);
  }
}(this, function(expect, Mslpsapi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Mslpsapi.PdfWriter();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PdfWriter', function() {
    it('should create an instance of PdfWriter', function() {
      // uncomment below and update the code to test PdfWriter
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be.a(Mslpsapi.PdfWriter);
    });

    it('should have the property info (base name: "Info")', function() {
      // uncomment below and update the code to test the property info
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property initialLeading (base name: "InitialLeading")', function() {
      // uncomment below and update the code to test the property initialLeading
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property directContent (base name: "DirectContent")', function() {
      // uncomment below and update the code to test the property directContent
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property directContentUnder (base name: "DirectContentUnder")', function() {
      // uncomment below and update the code to test the property directContentUnder
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property colorProfile (base name: "ColorProfile")', function() {
      // uncomment below and update the code to test the property colorProfile
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property pdfIndirectReference (base name: "PdfIndirectReference")', function() {
      // uncomment below and update the code to test the property pdfIndirectReference
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property os (base name: "Os")', function() {
      // uncomment below and update the code to test the property os
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property extraCatalog (base name: "ExtraCatalog")', function() {
      // uncomment below and update the code to test the property extraCatalog
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property pageDictEntries (base name: "PageDictEntries")', function() {
      // uncomment below and update the code to test the property pageDictEntries
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property pageNumber (base name: "PageNumber")', function() {
      // uncomment below and update the code to test the property pageNumber
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property currentPageNumber (base name: "CurrentPageNumber")', function() {
      // uncomment below and update the code to test the property currentPageNumber
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property tabs (base name: "Tabs")', function() {
      // uncomment below and update the code to test the property tabs
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property pageEvent (base name: "PageEvent")', function() {
      // uncomment below and update the code to test the property pageEvent
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property rootOutline (base name: "RootOutline")', function() {
      // uncomment below and update the code to test the property rootOutline
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property outlines (base name: "Outlines")', function() {
      // uncomment below and update the code to test the property outlines
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property pdfVersion (base name: "PdfVersion")', function() {
      // uncomment below and update the code to test the property pdfVersion
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property viewerPreferences (base name: "ViewerPreferences")', function() {
      // uncomment below and update the code to test the property viewerPreferences
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property pageLabels (base name: "PageLabels")', function() {
      // uncomment below and update the code to test the property pageLabels
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property collection (base name: "Collection")', function() {
      // uncomment below and update the code to test the property collection
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property acroForm (base name: "AcroForm")', function() {
      // uncomment below and update the code to test the property acroForm
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property sigFlags (base name: "SigFlags")', function() {
      // uncomment below and update the code to test the property sigFlags
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property xmpMetadata (base name: "XmpMetadata")', function() {
      // uncomment below and update the code to test the property xmpMetadata
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property pageXmpMetadata (base name: "PageXmpMetadata")', function() {
      // uncomment below and update the code to test the property pageXmpMetadata
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property xmpWriter (base name: "XmpWriter")', function() {
      // uncomment below and update the code to test the property xmpWriter
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property pDFXConformance (base name: "PDFXConformance")', function() {
      // uncomment below and update the code to test the property pDFXConformance
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property fullCompression (base name: "FullCompression")', function() {
      // uncomment below and update the code to test the property fullCompression
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property compressionLevel (base name: "CompressionLevel")', function() {
      // uncomment below and update the code to test the property compressionLevel
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property currentDocumentSize (base name: "CurrentDocumentSize")', function() {
      // uncomment below and update the code to test the property currentDocumentSize
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property structureTreeRoot (base name: "StructureTreeRoot")', function() {
      // uncomment below and update the code to test the property structureTreeRoot
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property oCProperties (base name: "OCProperties")', function() {
      // uncomment below and update the code to test the property oCProperties
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property pageSize (base name: "PageSize")', function() {
      // uncomment below and update the code to test the property pageSize
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property cropBoxSize (base name: "CropBoxSize")', function() {
      // uncomment below and update the code to test the property cropBoxSize
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property pageEmpty (base name: "PageEmpty")', function() {
      // uncomment below and update the code to test the property pageEmpty
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property duration (base name: "Duration")', function() {
      // uncomment below and update the code to test the property duration
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property transition (base name: "Transition")', function() {
      // uncomment below and update the code to test the property transition
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property thumbnail (base name: "Thumbnail")', function() {
      // uncomment below and update the code to test the property thumbnail
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property group (base name: "Group")', function() {
      // uncomment below and update the code to test the property group
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property spaceCharRatio (base name: "SpaceCharRatio")', function() {
      // uncomment below and update the code to test the property spaceCharRatio
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property runDirection (base name: "RunDirection")', function() {
      // uncomment below and update the code to test the property runDirection
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property userunit (base name: "Userunit")', function() {
      // uncomment below and update the code to test the property userunit
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property defaultColorspace (base name: "DefaultColorspace")', function() {
      // uncomment below and update the code to test the property defaultColorspace
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property strictImageSequence (base name: "StrictImageSequence")', function() {
      // uncomment below and update the code to test the property strictImageSequence
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property userProperties (base name: "UserProperties")', function() {
      // uncomment below and update the code to test the property userProperties
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property rgbTransparencyBlending (base name: "RgbTransparencyBlending")', function() {
      // uncomment below and update the code to test the property rgbTransparencyBlending
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property pageCount (base name: "PageCount")', function() {
      // uncomment below and update the code to test the property pageCount
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

    it('should have the property closeStream (base name: "CloseStream")', function() {
      // uncomment below and update the code to test the property closeStream
      //var instane = new Mslpsapi.PdfWriter();
      //expect(instance).to.be();
    });

  });

}));
