(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Mslpsapi);
  }
}(this, function(expect, Mslpsapi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Mslpsapi.LogisticsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('LogisticsApi', function() {
    describe('logisticsDeleteChannelInfo', function() {
      it('should call logisticsDeleteChannelInfo successfully', function(done) {
        //uncomment below and update the code to test logisticsDeleteChannelInfo
        //instance.logisticsDeleteChannelInfo(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('logisticsDeleteCofigs', function() {
      it('should call logisticsDeleteCofigs successfully', function(done) {
        //uncomment below and update the code to test logisticsDeleteCofigs
        //instance.logisticsDeleteCofigs(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('logisticsGetChannelInfo', function() {
      it('should call logisticsGetChannelInfo successfully', function(done) {
        //uncomment below and update the code to test logisticsGetChannelInfo
        //instance.logisticsGetChannelInfo(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('logisticsGetConfig', function() {
      it('should call logisticsGetConfig successfully', function(done) {
        //uncomment below and update the code to test logisticsGetConfig
        //instance.logisticsGetConfig(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('logisticsRefreshLogisticsNo', function() {
      it('should call logisticsRefreshLogisticsNo successfully', function(done) {
        //uncomment below and update the code to test logisticsRefreshLogisticsNo
        //instance.logisticsRefreshLogisticsNo(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('logisticsSaveChannelInfo', function() {
      it('should call logisticsSaveChannelInfo successfully', function(done) {
        //uncomment below and update the code to test logisticsSaveChannelInfo
        //instance.logisticsSaveChannelInfo(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('logisticsSaveConfig', function() {
      it('should call logisticsSaveConfig successfully', function(done) {
        //uncomment below and update the code to test logisticsSaveConfig
        //instance.logisticsSaveConfig(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('logisticsSubMit', function() {
      it('should call logisticsSubMit successfully', function(done) {
        //uncomment below and update the code to test logisticsSubMit
        //instance.logisticsSubMit(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
