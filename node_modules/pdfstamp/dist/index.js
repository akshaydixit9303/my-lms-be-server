#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stamp = void 0;
var commander_1 = __importDefault(require("commander"));
var chalk_1 = __importDefault(require("chalk"));
var os_1 = __importDefault(require("os"));
var path_1 = __importDefault(require("path"));
var rimraf_1 = __importDefault(require("rimraf"));
var shelljs_1 = __importDefault(require("shelljs"));
var exec_1 = require("./utils/exec");
var signature_utils_1 = require("./utils/signature-utils");
var IS_DEBUG = false;
function log() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    IS_DEBUG && console.log.apply(console, __spreadArray(['DEBUG: '], args, false));
}
function exists(commandName, installTxt) {
    return __awaiter(this, void 0, void 0, function () {
        var valid, resultText;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, exec_1.execCmdResult)("which " + commandName)
                        .then(function () { return true; })
                        .catch(function () { return false; })];
                case 1:
                    valid = _a.sent();
                    resultText = valid ? chalk_1.default.green("exists!") : chalk_1.default.red("not found");
                    log("- checking " + commandName + ": " + resultText);
                    if (!valid) {
                        log(chalk_1.default.blue(installTxt));
                    }
                    return [2 /*return*/];
            }
        });
    });
}
commander_1.default
    .command("doctor")
    .description("Checks to make sure your dependencies are installed")
    .action(function () { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, exists("convert", "Install this tool: https://imagemagick.org/script/convert.php")];
            case 1:
                _a.sent();
                return [4 /*yield*/, exists("pdftk", "Install this tool: https://askubuntu.com/questions/1028522/how-can-i-install-pdftk-in-ubuntu-18-04-and-later")];
            case 2:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); });
commander_1.default
    .command("stamp")
    .description('Stamps the pdf document')
    .requiredOption("-i, --input <inputPdfPath>", "Input document, e.g: file.pdf")
    .requiredOption("-s, --signature <signaturePath>", "Signature file, e.g: signature.png")
    .option("-p, --page <pageNum>", "Page to input the signature, default: 1", '1')
    .option("-o, --output <outputPdfPath>", "Output stamped document, default: output.pdf", "output.pdf")
    .option("-l, --left <leftAmount>", "Signature position from page left (px), e.g: 120")
    .option("-r, --right <rightAmount>", "Signature position from page right (px), e.g: 120")
    .option("-t, --top <topAmount>", "Signature position from page top (px), e.g: 120")
    .option("-b, --bottom <bottomAmount>", "Signature position from page bottom (px), e.g: 120")
    .option("-z, --zoom <zoomPercent>", "Signature zoom percentage on page (100% is full pagewidth), default: 25", '25')
    .option("--debug", "Keeps temporary PDF files (for development purposes)")
    .action(function (args) {
    return stamp(args);
});
function stamp(_a) {
    var debug = _a.debug, bottom = _a.bottom, left = _a.left, right = _a.right, top = _a.top, input = _a.input, output = _a.output, page = _a.page, pageSize = _a.pageSize, signature = _a.signature, zoom = _a.zoom;
    return __awaiter(this, void 0, void 0, function () {
        var TEMP_SIG_PDF, TEMP_PAGE_PRE_SIGN_PDF, TEMP_PAGE_SIGNED_PDF, TEMP_NORMALISED_SIGNATURE_FILE, TempFiles, INPUT_PDF, INPUT_SIGNATURE_FILE, defaults, SIGNATURE_WIDTH, PAGE_NUM, PAGE_SIZE, OUTPUT_PDF, ZOOM, pdfDataDump, pageCount, pageSize_1, MakeSignatureCommand, joinDash, start1, start2, end1, end2, catCommand, err_1, debugDir;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    IS_DEBUG = !!debug;
                    TEMP_SIG_PDF = MakeTmpPath("signature") + ".pdf";
                    TEMP_PAGE_PRE_SIGN_PDF = MakeTmpPath("page-pre-sign") + ".pdf";
                    TEMP_PAGE_SIGNED_PDF = MakeTmpPath("page-signed-single") + ".pdf";
                    TEMP_NORMALISED_SIGNATURE_FILE = MakeTmpPath("signature-normalised") + ".png";
                    TempFiles = [
                        TEMP_SIG_PDF,
                        TEMP_PAGE_PRE_SIGN_PDF,
                        TEMP_PAGE_SIGNED_PDF,
                        TEMP_NORMALISED_SIGNATURE_FILE,
                    ];
                    INPUT_PDF = input;
                    INPUT_SIGNATURE_FILE = signature;
                    defaults = {
                        left: 0,
                        bottom: 0,
                        right: 0,
                        top: 0,
                    };
                    SIGNATURE_WIDTH = 500;
                    PAGE_NUM = +(page || 1);
                    PAGE_SIZE = pageSize;
                    OUTPUT_PDF = output || "output.pdf";
                    ZOOM = +(zoom || 25);
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 6, , 7]);
                    pdfDataDump = GetPdfDataString(INPUT_PDF);
                    pageCount = GetPageCount(pdfDataDump, PAGE_NUM);
                    pageSize_1 = GetPageSize(pdfDataDump, PAGE_NUM);
                    return [4 /*yield*/, NormaliseSignatureGetPath(INPUT_SIGNATURE_FILE, TEMP_NORMALISED_SIGNATURE_FILE, SIGNATURE_WIDTH)];
                case 2:
                    _b.sent();
                    MakeSignatureCommand = function () {
                        // TODO add pagesize option
                        function GetOrientation() {
                            var MOVE_RIGHT = +(right || 0) || defaults.right;
                            var MOVE_LEFT = +(left || 0) || defaults.left;
                            var IS_LEFT = right === undefined;
                            var MOVE_BOTTOM = +(bottom || 0) || defaults.bottom;
                            var MOVE_TOP = +(top || 0) || defaults.top;
                            var IS_BOTTOM = top === undefined;
                            return (0, signature_utils_1.CalculateOrientation)(IS_BOTTOM, IS_LEFT, MOVE_LEFT, MOVE_RIGHT, MOVE_TOP, MOVE_BOTTOM);
                        }
                        var pageWidth = +pageSize_1.width;
                        var zoomSig = (0, signature_utils_1.CalculateZoom)(ZOOM, pageWidth, SIGNATURE_WIDTH).toFixed(3);
                        var orientation = GetOrientation();
                        var size = pageSize_1.width + "x" + pageSize_1.height; // a4
                        var translationFragment = "-page " + size + "-" + orientation.x + "-" + orientation.y;
                        log('Zoom: ', { zoomSig: zoomSig, orientation: orientation, pageWidth: pageWidth, pageSize: pageSize_1 });
                        // More info on imagemagick commands here: https://imagemagick.org/script/command-line-options.php#page
                        var cmd = "convert \"" + TEMP_NORMALISED_SIGNATURE_FILE + "\" -gravity " + orientation.gravity + " -resize " + zoomSig + "% -transparent white " + translationFragment + " -quality 75 \"" + TEMP_SIG_PDF + "\"";
                        log('Signature CMD: ', cmd);
                        return cmd;
                    };
                    return [4 /*yield*/, Promise.all([
                            // Make signature pdf
                            (0, exec_1.execCmd)(MakeSignatureCommand()),
                            // Pull out single page
                            (0, exec_1.execCmd)("pdftk A=\"" + INPUT_PDF + "\" cat A" + PAGE_NUM + " output \"" + TEMP_PAGE_PRE_SIGN_PDF + "\""),
                        ])];
                case 3:
                    _b.sent();
                    // Stamp page
                    return [4 /*yield*/, (0, exec_1.execCmd)("pdftk \"" + TEMP_PAGE_PRE_SIGN_PDF + "\" stamp \"" + TEMP_SIG_PDF + "\" output \"" + TEMP_PAGE_SIGNED_PDF + "\"")];
                case 4:
                    // Stamp page
                    _b.sent();
                    joinDash = function (a, b) {
                        return [a, b].filter(function (a) { return !!a; }).join("-");
                    };
                    start1 = PAGE_NUM == 1 ? "" : "A1";
                    start2 = PAGE_NUM <= 2 ? "" : "" + (PAGE_NUM - 1);
                    end1 = PAGE_NUM == pageCount ? "" : "A" + (PAGE_NUM + 1);
                    end2 = PAGE_NUM > pageCount - 2 ? "" : "" + pageCount;
                    catCommand = joinDash(start1, start2) + " B1 " + joinDash(end1, end2);
                    return [4 /*yield*/, (0, exec_1.execCmd)("pdftk A=\"" + INPUT_PDF + "\" B=\"" + TEMP_PAGE_SIGNED_PDF + "\" cat " + catCommand + " output \"" + OUTPUT_PDF + "\"")];
                case 5:
                    _b.sent();
                    return [3 /*break*/, 7];
                case 6:
                    err_1 = _b.sent();
                    console.log(chalk_1.default.red(err_1));
                    return [3 /*break*/, 7];
                case 7:
                    if (!IS_DEBUG) return [3 /*break*/, 9];
                    debugDir = './_pdf-stamp-temp';
                    shelljs_1.default.mkdir('-p', debugDir);
                    return [4 /*yield*/, (0, exec_1.execCmd)("mv " + TempFiles.map(function (f) { return "\"" + f + "\""; }).join(' ') + " " + debugDir)];
                case 8:
                    _b.sent();
                    _b.label = 9;
                case 9: return [4 /*yield*/, Promise.all(TempFiles.map(function (f) { return RemoveFile(f); }))];
                case 10:
                    _b.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.stamp = stamp;
function NormaliseSignatureGetPath(inputSignaturePath, outputPath, width) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, exec_1.execCmd)("convert " + inputSignaturePath + " -set colorspace sRGB -resize '" + width + "x" + width + "' \"" + outputPath + "\"")];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function GetPdfDataString(inputPdfPath) {
    var res = shelljs_1.default
        .exec("pdftk \"" + inputPdfPath + "\" dump_data", { silent: true })
        .toString();
    if (!res.includes("NumberOfPages")) {
        throw "There was a problem reading the input PDF \"" + inputPdfPath + "\"";
    }
    return res;
}
function GetPageCount(pdfDataDump, pageNum) {
    var _a, _b, _c;
    var pageCount = +(((_c = (_b = (_a = pdfDataDump === null || pdfDataDump === void 0 ? void 0 : pdfDataDump.split("NumberOfPages: ")) === null || _a === void 0 ? void 0 : _a.pop()) === null || _b === void 0 ? void 0 : _b.split("\n")) === null || _c === void 0 ? void 0 : _c.shift()) || '');
    if (pageNum > pageCount) {
        throw "--page must be <= the number of pages in the input document";
    }
    if (pageNum < 1) {
        throw "--page must be > 0";
    }
    return pageCount;
}
function GetPageSize(pdfDataDump, pageNum) {
    var pages = pdfDataDump === null || pdfDataDump === void 0 ? void 0 : pdfDataDump.split('\nPageMediaNumber: ');
    var page = pages.find(function (p) { return p.startsWith(pageNum + ''); });
    var pageSizePre = (page === null || page === void 0 ? void 0 : page.split('\n').find(function (p) { return p.startsWith('PageMediaDimensions: '); })) || '';
    var pageSizeString = pageSizePre.replace("PageMediaDimensions: ", '');
    var pageSize = {
        width: pageSizeString.split(' ').shift() || '',
        height: pageSizeString.split(' ').pop() || '',
    };
    log('Get Page Size (from pdf_dump)', { pages: pages, pageNum: pageNum, pageSizeString: pageSizeString, pageSize: pageSize });
    return pageSize;
}
function RemoveFile(filePath) {
    return new Promise(function (res, rej) {
        (0, rimraf_1.default)(filePath, function (err) {
            if (err) {
                rej(err);
            }
            else {
                res(undefined);
            }
        });
    });
}
var UUID = Math.random().toString(32).slice(2, 10);
function MakeTmpPath(fname) {
    return path_1.default.join(os_1.default.tmpdir(), UUID + '-' + fname);
}
var package_json_1 = __importDefault(require("./package.json"));
commander_1.default
    .option('-v, --version', 'Displays version')
    .action(function () { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        console.log(package_json_1.default.version);
        return [2 /*return*/];
    });
}); });
if (process.argv.length < 3) {
    commander_1.default.help();
}
else {
    commander_1.default.parse(process.argv);
}
