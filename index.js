const express = require("express");
const bodyParser = require("body-parser");
const app = express();
const path = require("path");
const db = require("./config/db");
const nodemailer = require("nodemailer");
const mysql = require("mysql2");
const cors = require("cors");
const fs = require("fs");
const zipper = require("jszip");
const meet = require("./meet");
const rp = require("request-promise");
const pdfParse = require("pdf-parse");
const { Readable } = require("stream");
const readXlsxFile = require("read-excel-file/node");
const multer = require("multer");
const PNG = require("pngjs").PNG;
const base64 = require("image-to-base64");
const axios = require("axios");
var Diff = require("text-diff");
const compression = require("compression");
const offlineRouteInvoices = require("./routes/offline invoices/InvoiceRoute");
const proformaRouteInvoices = require("./routes/offline invoices/proformaRoute");
const myHrmsCustomer = require("./routes/MYHRMS/routes");
const myShopCustomer = require("./routes/myshop/routes");
const emailTemplates = require("./routes/EmailTemp/EmailTemp");
const traingingUpload = require("./routes/Content/routes");
const courseRoute = require("./routes/course/routes");
const learnerExercise = require("./routes/Learner_Exercise/routes");
const customerData = require("./routes/Others/others");
const practiceRoute = require("./routes/praxis/routes");
const OrderMgmt = require("./routes/Orders/routes");
const OnlineInvoices = require("./routes/Online Invoices/routes");
const crypto = require("crypto-js");

// payment option

// app.use(express.static("/test/public"));

// app.set("views", __dirname + "/test/public");
// app.engine("html", require("ejs").renderFile);

// app.get("/about", function (req, res) {
//   res.sendFile(__dirname + "/success.html");
//   res.render("success.html");
// });

// Serve static files from the 'test/public' directory
app.use(express.static(path.join(__dirname, "test/public")));
app.use(express.static(path.join(__dirname, "app_data")));

// Set the views directory and configure the template engine
app.set("views", path.join(__dirname, "test/public"));
app.engine("html", require("ejs").renderFile);
app.set("view engine", "html"); // Set the view engine to EJS

//

// index.js

const https = require("https");
const jwt = require("jsonwebtoken");
const pdfLib = require("pdf-lib");
const fileUpload = require("express-fileupload");
var DecompressZip = require("decompress-zip");
const unzipper = require("unzipper");
const { PDFDocument, rgb, StandardFonts } = pdfLib;
const pdfReader = require("pdfreader");
var cron = require("node-cron");
const pdfByte = require("mslpsapi");
const pdf = pdfReader.PdfReader("./certificate.pdf");
const bCrypt = require("bcryptjs");
// const fs = require("fs");
// const multer = require("multer");
const { Base64 } = require("js-base64");
var facepp = require("face-plusplus-node"); //face plus plus module for face compare

facepp.setApiKey("GWtO9NfgQg3UJTFHDzlV7T7L4vBMtTzO"); //face plus plus api key
facepp.setApiSecret("zV6CB-lqqHrewS4vUG1rqkSCX1uWKLIH"); //face plus plus secret key

module.exports = app;

app.use("/Uploads", express.static(path.join(__dirname, "/Uploads")));
const { isRegExp } = require("util/types");
const { isBuffer } = require("util");
const helmet = require("helmet");

var filePath = "E:/SLOT -SLMS/USR APP/client/public/data";
var admFilePath = "E:/SLOT -SLMS/ADM APP/client/public/data";

var trainerPath = "E:/SLOT -SLMS/ADM APP/client/public/data/trainers/";
var EngPath = "E:/SLOT -SLMS/ADM APP/client/public/data/engineer";

const generator = require("generate-password");
const { Console, table } = require("console");
const { emit } = require("process");
const { last, encodeToBase64 } = require("pdf-lib");
const JSZip = require("jszip");
var password = generator.generate({
  length: 6,
  numbers: true,
  uppercase: true,
  lowercase: false,
});
app.use(fileUpload()); //

app.use(compression());

app.use(helmet());

app.use(cors());
app.use(
  express.json({
    limit: "50mb",
  })
);

app.use(
  bodyParser.urlencoded({
    limit: "50mb",
    parameterLimit: 100000,
    extended: true,
  })
);
app.use(bodyParser.raw({ limit: "1gb", type: "application/pdf" }));

// routes of offline invoices
app.use("/api/v1/offline/invoices", offlineRouteInvoices);
// myvedatemplate
app.use("/api/v1/email/templates", emailTemplates);
// routes of proforma invoices
app.use("/api/v1/proforma/invoices", proformaRouteInvoices);
// myhrms data
app.use("/api/v1/myhrms", myHrmsCustomer);
// myshop data
app.use("/api/v1/myshop", myShopCustomer);
// upload documents
app.use("/api/v1/upload/training", traingingUpload);
// course
app.use("/api/v1/course", courseRoute);
// á¸·earner exercises
app.use("/api/v1/learner/exercise", learnerExercise);
// customer data
app.use("/api/v1/get/data", customerData);
// get orders
app.use("/api/v1/orders/mgmt", OrderMgmt);
// online invoices
app.use("/api/v1/create/online/invoice", OnlineInvoices);
// practice route
app.use("/api/v1/practice", practiceRoute);
//
app.get("/myhrms/roles&permissions/:cust_id/:name", (req, res) => {
  const file_name = (req.params.name + ".pdf").toLowerCase();
  const { cust_id } = req.params;
  res.sendFile(file_name, {
    root: path.join(__dirname, `/app_data/myhrms-customers/${cust_id}`),
  });
});

app.get("/user_certificate/id/:name", (req, res) => {
  res.sendFile(req.params.name, {
    root: path.join(__dirname, "/USR_CERT"),
  });
});

app.get("/engineers/id/:filename", (req, res) => {
  res.sendFile(req.params.filename, {
    root: path.join(__dirname, "/engineers_id"),
  });
});
app.get("/excel/demo", (req, res) => {
  res.sendFile("demo.xlsx", {
    root: path.join(__dirname, "/excel"),
  });
});
app.get("/offline/invoice/:id", (req, res) => {
  console.log(req.params.id);
  res.sendFile(req.params.id, {
    root: path.join(__dirname, "/offline_invoices"),
  });
});
app.get("/ppt/name/:id", (req, res) => {
  console.log(req.params.id);
  res.sendFile(req.params.id, {
    root: path.join(__dirname, "/ppt"),
  });
});
app.get("/career/resume/:id", (req, res) => {
  res.sendFile(req.params.id, {
    root: path.join(__dirname, "/career_resume"),
  });
});
app.get("/myveda/online/invoice/:id", (req, res) => {
  console.log(req.params.id);
  res.sendFile(req.params.id, {
    root: path.join(__dirname, "/invoices"),
  });
});
app.get("/myit/online/invoice/:id", (req, res) => {
  console.log(req.params.id);
  res.sendFile(req.params.id, {
    root: path.join(__dirname, "/ticket_log"),
  });
});
// praxis invoices
app.get("/myvedait/praxis/online/invoice/:id", (req, res) => {
  console.log(req.params.id);
  res.sendFile(req.params.id, {
    root: path.join(__dirname, "/praxis_invoices"),
  });
});
// myshop invoices
app.get("/myvedait/myshop/online/invoice/:id", (req, res) => {
  res.sendFile(req.params.id, {
    root: path.join(__dirname, "/myshop_invoices"),
  });
});

// myhrms invoices
app.get("/myvedait/myhrms/online/invoice/:id", (req, res) => {
  console.log(req.params.id);
  res.sendFile(req.params.id, {
    root: path.join(__dirname, "/myhrms_invoices"),
  });
});
// other invoices
app.get("/myvedait/other/online/invoice/:id", (req, res) => {
  console.log(req.params.id);
  res.sendFile(req.params.id, {
    root: path.join(__dirname, "/other_invoices"),
  });
});
//
app.put("/api/v1/update/offline/invoice", (req, res) => {
  console.log(req.body);
  const { payment_status, status_remark, payment_mode, details } =
    req.body.states;

  var today = new Date();
  var dd = String(today.getDate()).padStart(2, "0");
  var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
  var yyyy = today.getFullYear();

  today = yyyy + "-" + mm + "-" + dd;
  try {
    db.query(
      "update `main_admin_db`.offline_myvedait_invoices_corp_cust set payment_status_remark = ?, invoice_type = ?,payment_date_time = ?,payment_mode = ?,txn_details = ?,payment_status = ? where invoice_no = ?",
      [
        status_remark,
        payment_status,
        today,
        payment_mode,
        details,
        payment_status,
        req.body.invoice,
      ],
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (err) {
    console.log(err);
  }
});
// get invoice data after update a invoice
app.get("/api/v1/get/offline/invoice/data/:id", (req, res) => {
  try {
    db.query(
      "select * from `main_admin_db`.offline_myvedait_invoices_corp_cust where invoice_no = ?",
      [req.params.id],
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {
    console.log(error);
  }
});
//registration api
app.post("/api/dbinsert", (req, res) => {
  const company = req.body.company;
  const webPortal = req.body.webPortal;
  const gstin = req.body.gstin;
  const spocName = req.body.spocName;
  const spocContact = req.body.spocContact;
  const buildingBlock = req.body.buildingBlock;
  const spocEmail = req.body.spocEmail;
  const country = req.body.country;
  const pincode = req.body.pincode;
  const city = req.body.city;
  const address = req.body.address;
  const compId = req.body.compId;

  const custID = compId.slice(0, 4) + password;

  const sqlInsert =
    "INSERT INTO `myveda-db`.comp_cust_req_db(companyName,webPortal,GSTIN,spocName,spocEmail,spocContact,country,city,pincode,address,buildingBlock,comp_id,cust_id,status) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
  db.query(
    sqlInsert,
    [
      company,
      webPortal,
      gstin,
      spocName,
      spocEmail,
      spocContact,
      country,
      city,
      pincode,
      address,
      buildingBlock,
      compId,
      custID,
      "Active",
    ],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );

  const output = `

     <h3>Dear Admin</h3>
     <p>New Customer Registered Successfully, details are as per below:</p>
     <br />
     <p>Company Name: ${req.body.company}</p>
     <p>Cust ID: ${custID}</p>
     <p>SPOC Name: ${req.body.spocName} </p>
     <p>SPOC Contact: ${req.body.spocContact} </p>
     <p>SPOC Email: ${req.body.spocEmail}</p>

     <p><b>!!! This is an automatically system generated email ? please do not reply to it.</b></p>
    <br />
     <p>Thanks & Regards</p>
     <p>MYVEDAIT TEAM</p>
     `;

  db.query("SELECT * FROM `myveda-db`.email_srv", (err, result) => {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
      let host1 = result[0]?.host;
      let port1 = result[0]?.port;
      let user1 = result[0]?.auth_uid;
      let pass1 = result[0]?.auth_pass;
      let fromEmail = result[0]?.from_email;
      let bccEmail = result[0]?.bcc_email;
      let transporter = nodemailer.createTransport({
        host: host1,
        port: port1,
        secure: true, // true for 465, false for other p orts
        auth: {
          user: user1, // generated ethereal user
          pass: pass1, // generated ethereal password
        },
      });

      // send mail with defined transport object
      let info = transporter.sendMail({
        from: `"" ${fromEmail}`, // sender address
        to: bccEmail, // list of receivers
        subject: "New Customer Registration", // Subject line
        bcc: bccEmail,
        html: output, // html body
      });

      console.log("Message sent: %s", info.messageId);
      console.log("Preview URL: %s", nodemailer.getTestMessageUrl(info));
    }
  });
});
//corporate registration api
app.post("/api/v1/api/customer/reg/myvedait", (req, res) => {
  const company = req.body.company;
  const webPortal = req.body.webPortal;
  const gstin = req.body.gstin;
  const spocName = req.body.spocName;
  const spocContact = req.body.spocContact;
  const buildingBlock = req.body.buildingBlock;
  const spocEmail = req.body.spocEmail;
  const country = req.body.country;
  const pincode = req.body.pincode;
  const city = req.body.city;
  const address = req.body.address;
  const compId = req.body.compId;
  const { state, service } = req.body;

  const custID = compId.slice(0, 4) + password;

  const sqlInsert =
    "INSERT INTO `main_admin_db`.offline_cust_reg_corp(companyName,webPortal,GSTIN,spocName,spocEmail,spocContact,country,city,pincode,address,state,comp_id,cust_id,status,service_id,service_name) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
  db.query(
    sqlInsert,
    [
      company,
      webPortal,
      gstin,
      spocName,
      spocEmail,
      spocContact,
      country,
      city,
      pincode,
      address,
      state,
      compId,
      custID,
      "Active",
      service?.id,
      service?.service_name,
    ],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        console.log(result);
      }
    }
  );

  const output = `

     <h3>Dear Admin</h3>
     <p>New Customer Registered Successfully, details are as per below:</p>
     <br />
     <p>Service Name : ${service?.service_name}</p>
     <p>Company Name: ${req.body.company}</p>
     <p>Cust ID: ${custID}</p>
     <p>SPOC Name: ${req.body.spocName} </p>
     <p>SPOC Contact: ${req.body.spocContact} </p>
     <p>SPOC Email: ${req.body.spocEmail}</p>

     <p><b>!!! This is an automatically system generated email ? please do not reply to it.</b></p>
    <br />
     <p>Thanks & Regards</p>
     <p>MYVEDAIT TEAM</p>
     `;

  db.query("SELECT * FROM `myveda-db`.email_srv", (err, result) => {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
      let host1 = result[0]?.host;
      let port1 = result[0]?.port;
      let user1 = result[0]?.auth_uid;
      let pass1 = result[0]?.auth_pass;
      let fromEmail = result[0]?.from_email;
      let bccEmail = result[0]?.bcc_email;
      let transporter = nodemailer.createTransport({
        host: host1,
        port: port1,
        secure: true, // true for 465, false for other p orts
        auth: {
          user: user1, // generated ethereal user
          pass: pass1, // generated ethereal password
        },
      });

      // send mail with defined transport object
      let info = transporter
        .sendMail({
          from: `"" ${fromEmail}`, // sender address
          to: bccEmail, // list of receivers
          subject: "New Customer Registration", // Subject line
          bcc: bccEmail,
          html: output, // html body
        })
        .then(() => {
          res.status(200).send({
            success: true,
            message: "! Corporate Customer Register Successfully",
          });
        });

      console.log("Message sent: %s", info.messageId);
      console.log("Preview URL: %s", nodemailer.getTestMessageUrl(info));
    }
  });
});

app.put("/api/v1/update/employee/status", (req, res) => {
  try {
    var today = new Date();
    var dd = String(today.getDate()).padStart(2, "0");
    var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
    var yyyy = today.getFullYear();

    today = yyyy + "-" + mm + "-" + dd;
    const { formData, data } = req.body;
    const { remark, hiring_status } = formData;
    db.query(
      `update main_admin_db.career_resumes_table set hiring_status = ?, approve_date = ?, remark = ? where email = ?`,
      [hiring_status, today, remark, data?.email],
      (err, result) => {
        if (err) console.log(err);
        else res.status(200).send({ success: true });
      }
    );
  } catch (error) {}
});
// get all customer id
app.get("/api/v1/get/customer/id/myvedait", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.offline_cust_reg_corp",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// get data for customer ID
app.get("/api/v1/get/data/customer/id/:id", (req, res) => {
  const { id } = req.params;
  db.query(
    "SELECT * FROM main_admin_db.offline_cust_reg_corp where cust_id = ?",
    [id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//post la learner thing

// app.post("/insert/ex/la/learner", (req, res) => {
//   const { mail, compName, designation, experience } = req.body;

//   db.query(
//     "INSERT INTO `myveda-db`.learner_ex_la(uid_leaner,designation,experience,comp_name) VALUES(?,?,?,?)",
//     [mail, designation, experience, compName],
//     (err, result) => {
//       if (err) console.log(err);
//       else console.log(result);
//     }
//   );
// });

//check for LA course for feild validation
app.get("/get/validation/la/reg/form/:cust_id", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.user_course_map_table_la where course = ? AND cust_id = ?",
    ["LEAD AUDITOR", req.params.cust_id],
    (err, result) => {
      if (err) console.log(err);
      else {
        res.send(result);
      }
    }
  );
});

//for update user email subject
app.put("/updatesubject", (req, res) => {
  const subjectUpdate = req.body.subject1;

  db.query(
    "UPDATE `myveda-db`.usr_email_body SET subject = ? WHERE id = 1",
    [subjectUpdate],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//
//for update user email URL
//
app.put("/updateurl", (req, res) => {
  const url = req.body.url;

  db.query(
    "UPDATE `myveda-db`.usr_email_body SET url = ? WHERE id = 1",
    [url],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//for update message usr email body config

app.put("/updateusermsg", (req, res) => {
  const message = req.body.message;
  db.query(
    "UPDATE `myveda-db`.usr_email_body SET message1 = ? WHERE id = 1",
    [message],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//for update caution usr email body config

app.put("/updateusercaution", (req, res) => {
  const caution = req.body.caution;

  db.query(
    "UPDATE `myveda-db`.usr_email_body SET caution1 = ? WHERE id = 1",
    [caution],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//for update signature usr email body config

app.put("/updateusersign", (req, res) => {
  const sign = req.body.sign;

  db.query(
    "UPDATE `myveda-db`.usr_email_body SET signature1 = ? WHERE id = 1",
    [sign],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//
//
//For Email Server Update
//
//for update Host
app.put("/updatehost", (req, res) => {
  const host = req.body.host;
  db.query(
    "UPDATE `myveda-db`.email_srv SET host = ? WHERE id = 1",
    [host],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//for update PORT
app.put("/updateport", (req, res) => {
  const port = req.body.port;
  db.query(
    "UPDATE `myveda-db`.email_srv SET port = ? WHERE id = 1",
    [port],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//for update Email Server Auth UID
app.put("/updateuid", (req, res) => {
  const authId = req.body.authId;
  db.query(
    "UPDATE `myveda-db`.email_srv SET auth_uid = ? WHERE id = 1",
    [authId],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//for Update Email Server Auth Passcode

app.put("/updatepasscode", (req, res) => {
  const authPass = req.body.authPass;
  db.query(
    "UPDATE `myveda-db`.email_srv SET auth_pass = ? WHERE id = 1",
    [authPass],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//for Update Email Server From Email

app.put("/updatefromemail", (req, res) => {
  const fromEmail = req.body.fromEmail;
  db.query(
    "UPDATE `myveda-db`.email_srv SET from_email = ? WHERE id = 1",
    [fromEmail],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//for update Email server BCC Email

app.put("/updatebccemail", (req, res) => {
  const bccEmail = req.body.bccEmail;
  db.query(
    "UPDATE `myveda-db`.email_srv SET bcc_email = ? WHERE id = 1",
    [bccEmail],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

app.get("/formdata", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.usr_email_body", (err, result) => {
    if (err) {
      console.log(err);
    } else {
      res.send(result);
    }
  });
});
//for email server
app.get("/emailsrv", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.email_srv", (err, result) => {
    if (err) {
      console.log(err);
    } else {
      res.send(result);
    }
  });
});

//course insert data in db

app.post("/insertcoursedata", (req, res) => {
  const courseTtl = req.body.courseTtl;
  const courseType = req.body.courseType;
  const standard1 = req.body.standard;
  const StartDt = req.body.startDt;
  const endDt = req.body.endDt;
  const courseID = req.body.courseID;
  const courseType2 = req.body.courseType2;
  const lowerCourseID = courseID.toLowerCase().replace("-", "_");
  const l_mode = req.body.l_mode;

  const { trainerVC, trainerInDemand, liveProject, course_des, formData } =
    req.body;

  const folderName = `${filePath}/${courseID}`;

  const exList = `${filePath}/${courseID}/ex-list`;
  const pdf = `${filePath}/${courseID}/pdf`;
  const ppt = `${filePath}/${courseID}/ppt`;
  const video = `${filePath}/${courseID}/video`;

  try {
    if (!fs.existsSync(folderName)) {
      fs.mkdirSync(folderName);
    }
  } catch (err) {
    console.error(err);
  }

  try {
    if (!fs.existsSync(exList)) {
      fs.mkdirSync(exList);
    }
  } catch (err) {
    console.error(err);
  }

  try {
    if (!fs.existsSync(pdf)) {
      fs.mkdirSync(pdf);
    }
  } catch (err) {
    console.error(err);
  }

  try {
    if (!fs.existsSync(ppt)) {
      fs.mkdirSync(ppt);
    }
  } catch (err) {
    console.error(err);
  }

  try {
    if (!fs.existsSync(video)) {
      fs.mkdirSync(video);
    }
  } catch (err) {
    console.error(err);
  }

  db.query(
    "SELECT * from `myveda-db`.add_courses WHERE course_id = ? ",
    [courseID],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        if (result.length > 0) {
          res.send("fail");
        } else {
          db.query(
            "INSERT INTO `myveda-db`.add_courses (course_ttl_2,content_type,trainer_meet_sessions,in_demand_meet,in_person_ex,course_ttl,start_dt,end_dt,course_id,delivery_mode,standard,course_category,course_price_in,course_price_oth,cat_id,img_name,iso_std_cn,l_mode,duration,min_hours,course_des) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);",
            [
              "Certificate In",
              "Voice Over-PPTs, PDFs, Custom Videos ",
              trainerVC,
              trainerInDemand,
              liveProject,
              courseTtl,
              StartDt,
              endDt,
              courseID,
              courseType,
              standard1,
              l_mode === "1" ? "Foundation" : "Advanced",
              formData?.price_inr,
              formData?.price_oth,
              1,
              "",
              "IT",
              l_mode,
              formData?.duration,
              formData?.min_hours,
              course_des,
            ],
            (err1, result1) => {
              if (err1) {
                console.log(err1);
              } else {
                res.json(result1);

                db.query(
                  "CREATE TABLE `myveda-db`.?? ( `id` int NOT NULL AUTO_INCREMENT, `uid` varchar(45) DEFAULT NULL, `cust_id` varchar(45) DEFAULT NULL, `tfq_sc_apt1` varchar(45) DEFAULT NULL, `scq_sc_apt1` varchar(45) DEFAULT NULL, `orq_sc_apt1` varchar(45) DEFAULT NULL, `tot_sc_apt1` varchar(45) DEFAULT NULL, `ques_1_apt1` longtext, `ans_1_apt1` longtext, `ques_2_apt1` longtext, `ans_2_apt1` longtext, `firstName` varchar(45) DEFAULT NULL, `lastName` varchar(45) DEFAULT NULL, `ques_3_apt1` longtext, `ans_3_apt1` longtext, `ques_4_apt1` longtext, `ans_4_apt1` longtext, `ques_5_apt1` longtext, `ans_5_apt1` longtext, `percent_apt1` varchar(45) DEFAULT NULL, `stats_apt1` varchar(45) DEFAULT NULL, `course_id` varchar(45) DEFAULT NULL, `tfq_sc_apt2` varchar(45) DEFAULT NULL, `scq_sc_apt2` varchar(45) DEFAULT NULL, `orq_sc_apt2` varchar(45) DEFAULT NULL, `tot_sc_apt2` varchar(45) DEFAULT NULL, `ques_1_apt2` longtext, `ans_1_apt2` longtext, `ques_2_apt2` longtext, `ans_2_apt2` longtext, `ques_3_apt2` longtext, `ans_3_apt2` longtext, `ques_4_apt2` longtext, `ans_4_apt2` longtext, `ques_5_apt2` longtext, `ans_5_apt2` longtext, `percent_apt2` varchar(45) DEFAULT NULL, `stats_apt2` varchar(45) DEFAULT NULL, `tfq_sc_apt3` varchar(45) DEFAULT NULL, `scq_sc_apt3` varchar(45) DEFAULT NULL, `orq_sc_apt3` varchar(45) DEFAULT NULL, `tot_sc_apt3` varchar(45) DEFAULT NULL, `ques_1_apt3` longtext, `ans_1_apt3` longtext, `ques_2_apt3` longtext, `ans_2_apt3` longtext, `ques_3_apt3` longtext, `ans_3_apt3` longtext, `ques_4_apt3` longtext, `ans_4_apt3` longtext, `ques_5_apt3` longtext, `ans_5_apt3` longtext, `percent_apt3` varchar(45) DEFAULT NULL, `stats_apt3` varchar(45) DEFAULT NULL, `correct_ans1_apt1` longtext, `correct_ans2_apt1` longtext, `correct_ans3_apt1` longtext, `correct_ans4_apt1` longtext, `correct_ans5_apt1` longtext, `correct_ans1_apt2` longtext, `correct_ans2_apt2` longtext, `correct_ans3_apt2` longtext, `correct_ans4_apt2` longtext, `correct_ans5_apt2` longtext, `correct_ans1_apt3` longtext, `correct_ans2_apt3` longtext, `correct_ans3_apt3` longtext, `correct_ans4_apt3` longtext, `correct_ans5_apt3` longtext, `exam_date_tfq_apt1` varchar(45) DEFAULT NULL, `exam_date_scq_apt1` varchar(45) DEFAULT NULL, `exam_date_orq_apt1` varchar(45) DEFAULT NULL, `eval_date_orq_apt1` varchar(45) DEFAULT NULL, `exam_date_tfq_apt2` varchar(45) DEFAULT NULL, `exam_date_scq_apt2` varchar(45) DEFAULT NULL, `exam_date_orq_apt2` varchar(45) DEFAULT NULL, `eval_date_orq_apt2` varchar(45) DEFAULT NULL, `exam_date_tfq_apt3` varchar(45) DEFAULT NULL, `exam_date_scq_apt3` varchar(45) DEFAULT NULL, `exam_date_orq_apt3` varchar(45) DEFAULT NULL, `eval_date_orq_apt3` varchar(45) DEFAULT NULL, `uid_status` INT DEFAULT NULL,`cert_id` varchar(45) DEFAULT NULL,`cert_name` varchar(100) DEFAULT NULL,`exam_status` varchar(45) DEFAULT NULL,`status` varchar(45) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=80 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;",
                  [lowerCourseID],
                  (err2, result2) => {
                    if (err2) console.log(err2);
                    else console.log(result2);
                  }
                );
              }
            }
          );
        }
      }
    }
  );
});

//get data for course data from database

app.get("/coursefetchdata", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.add_courses where course_id is not NULL",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});

//get data for course data from database

app.get("/coursefetchdata/la", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.add_courses where course_id is not NULL",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});

app.put("/update/course/description", (req, res) => {
  db.query(
    "update `myveda-db`.add_courses SET stats = ? where course_id = ?",
    [1, req.body.course_id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// app.get("/coursefetchdata/null", (req, res) => {
//   db.query("SELECT * FROM `myveda-db`.add_courses", (err, result) => {
//     if (err) {
//       console.log(err);
//     } else {
//       res.send(result);
//     }
//   });
// });

//delete row of course database
app.delete("/deletedata/:id", (req, res) => {
  const id = req.params.id;
  const lowerCourseID = id.toLowerCase().replace("-", "_");
  const folderName = `${filePath}/${id}`;

  try {
    if (fs.existsSync(folderName)) {
      fs.rmSync(folderName, { recursive: true, force: true });
    }
  } catch (err) {
    console.error(err);
  }

  db.query(
    "DELETE FROM `myveda-db`.add_courses WHERE course_id = ?",
    [id],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        db.query("DROP TABLE ??", [lowerCourseID], (err, result1) => {
          if (err) console.log;
          else {
            res.send(result1);
          }
        });
      }
    }
  );

  db.query(
    "UPDATE `myveda-db`.comp_cust_req_db SET course_id = REPLACE(course_id,?,''),course_id2 = REPLACE(course_id2,?,''),course_id3 = REPLACE(course_id3,?,'');",
    [id, id, id],
    (err, result) => {
      console.log(err);
    }
  );

  db.query(
    "DELETE FROM `myveda-db`.vdo_mat where course_id = ?",
    [id],
    (err, result) => {
      console.log(err);
    }
  );
  db.query(
    "DELETE FROM `myveda-db`.pdf_mat where course_id = ?",
    [id],
    (err, result) => {
      console.log(err);
    }
  );
  db.query(
    "DELETE FROM `myveda-db`.ppt_mat where course_id = ?",
    [id],
    (err, result) => {
      console.log(err);
    }
  );
});

//Update row of course database
app.put("/updatecoursedata", (req, res) => {
  const courseTitle = req.body.newTitle;
  const newCourseType = req.body.newCourseType;
  const id = req.body.id;

  const newPqbId = req.body.newPqbId;
  const newQbId = req.body.newQbId;
  const newCourseID = req.body.newCourseID;
  const newStandard = req.body.newStandard;

  db.query(
    "UPDATE `myveda-db`.add_courses SET course_ttl = ?, p_qb_id = ?, qb_id = ?, course_id = ?,course_typ=?,standard = ?,ex_id = ?,course_category = ? WHERE id = ?",
    [
      courseTitle,
      newPqbId,
      newQbId,
      newCourseID,
      newCourseType,
      newStandard,
      req.body.newExId,
      req.body.newCourseType2,
      id,
    ],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});

//get data for admin homepage for showing in mapped courses

app.get("/mapcoursefetch", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.add_courses", (err, result) => {
    if (err) {
      console.log(err);
    } else {
      res.send(result);
    }
  });
});
//for admin home page edit pop up data of customers

app.put("/updatecustdata", (req, res) => {
  const customerName = req.body.customerName;
  const id = req.body.id;

  db.query(
    "UPDATE `myveda-db`.add_courses SET companyName =?  WHERE id = ?",
    [customerName, id],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});

//update customer
app.put("/newcustomername", (req, res) => {
  const customerName = req.body.customerName;
  const custID1 = req.body.cust_id;

  db.query(
    "UPDATE `myveda-db`.comp_cust_req_db SET companyName =?  WHERE cust_id = ?",
    [customerName, custID1],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
//update cust id
app.put("/newcustid", (req, res) => {
  const cust_id_pro = req.body.custID;
  const custID1 = req.body.cust_id;

  db.query(
    "UPDATE `myveda-db`.comp_cust_req_db SET cust_id =?  WHERE cust_id = ?",
    [cust_id_pro, custID1],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
//UPATE spoc NAME
app.put("/newspocname", (req, res) => {
  const spocName = req.body.spocName;
  const custID1 = req.body.cust_id;

  console.log(spocName);

  db.query(
    "UPDATE `myveda-db`.comp_cust_req_db SET spocName =?  WHERE cust_id = ?",
    [spocName, custID1],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
//update customer GSTIN
app.put("/newgstin", (req, res) => {
  const gstin = req.body.gstin;
  const custID1 = req.body.cust_id;
  db.query(
    "UPDATE `myveda-db`.comp_cust_req_db SET GSTIN =?  WHERE cust_id = ?",
    [gstin, custID1],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
//update Spoc email
app.put("/newspocemail", (req, res) => {
  const spocEmail = req.body.spocEmail;
  const custID1 = req.body.cust_id;
  db.query(
    "UPDATE `myveda-db`.comp_cust_req_db SET spocEmail =?  WHERE cust_id = ?",
    [spocEmail, custID1],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
//update Spoc Contact
app.put("/newspoccontact", (req, res) => {
  const spocContact = req.body.spocContact;
  const custID1 = req.body.cust_id;
  db.query(
    "UPDATE `myveda-db`.comp_cust_req_db SET spocContact =?  WHERE cust_id = ?",
    [spocContact, custID1],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
//update Spoc Contact
app.put("/newcompid", (req, res) => {
  const compId = req.body.compId;
  const custID1 = req.body.cust_id;
  db.query(
    "UPDATE `myveda-db`.comp_cust_req_db SET comp_id =?  WHERE cust_id = ?",
    [compId, custID1],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
//update customer status
app.put("/newstatus", (req, res) => {
  const status = req.body.getStatus;
  const custID1 = req.body.cust_id;
  db.query(
    "UPDATE `myveda-db`.comp_cust_req_db SET status =?  WHERE cust_id = ?",
    [status, custID1],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
//change passcode

app.put("/changeadmpasscode", (req, res) => {
  const passcode = req.body.changePasscode;
  console.log(passcode);

  db.query(
    "UPDATE `myveda-db`.admin_auth SET passcode =?  WHERE id = 1",
    [passcode],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
//update Questions Feedback
app.put("/updatequestion", (req, res) => {
  const newQuestion = req.body.newQuestion;
  const id = req.body.id;
  db.query(
    "UPDATE `myveda-db`.snd_feedbck_db SET question =?  WHERE id = ?",
    [newQuestion, id],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
//for homepage training material (PDF)
app.post("/pdfdata", (req, res) => {
  const file = req.files.pdf;
  const { courseId, filename } = req.body;
  if (file) {
    fs.writeFileSync(`${filePath}/${courseId}/pdf/${file?.name}`, file?.data);
    db.query(
      "INSERT INTO `myveda-db`.pdf_mat (course_id,file_name)  VALUES(?,?)",
      [courseId, file?.name],
      (err, result) => {
        if (err) console.log(err);
        else res.send();
      }
    );
  } else {
    console.log("err");
  }
  try {
    db.query("select * from `myveda-db`.add_courses", (err, result) => {
      if (err) console.log(err);
      else {
        result.forEach((item, index, myarr) => {
          db.query(
            "select * from `myveda-db`.pdf_mat where course_id = ?",
            [item.course_id],
            (err1, result1) => {
              if (err1) console.log(err1);
              else {
                db.query(
                  "update `myveda-db`.add_courses set tot_pdfs = ? where course_id = ?",
                  [result1.length, item.course_id],
                  (err2, result2) => {
                    if (err2) console.log(err2);
                    else {
                      console.log(result2);
                    }
                  }
                );
              }
            }
          );
        });
      }
    });
  } catch (error) {}
});

//for standard

//for homepage training material (STANDARD)
app.post("/standard", function (req, res) {
  const { courseId, filename } = req.body;
  const pdfFile = req.files.pdf;

  if (pdfFile) {
    fs.writeFileSync(
      `${filePath}/${courseId}/standard/standard.pdf`,
      pdfFile?.data
    );
    res.send();
  } else {
    console.log("err");
  }
});
//for ISO (STANDARD) List
app.post("/standard/list", function (req, res) {
  const { stdName } = req.body;

  db.query(
    "SELECT * FROM `myveda-db`.add_std_list where std = ?",
    [stdName],
    (err, result) => {
      if (err) console.log(err);
      else {
        let count = result.length;
        if (count === 0) {
          db.query(
            "INSERT INTO `myveda-db`.add_std_list(std) VALUES(?)",
            [stdName],
            (err1, result1) => {
              if (err1) console.log(err1);
              else res.send(result1);
            }
          );
        } else {
          res.send("err");
        }
      }
    }
  );
});
//ppt upload for training
app.post("/pptdata", async (req, res) => {
  const file = req.files.ppt; //but not with this
  const { courseId } = req.body;

  const fileName = (file?.name).replace(".zip", "");

  // Ensure the directory exists before extraction
  const pptFolderPath = `${filePath}/${courseId}/ppt`;

  if (!fs.existsSync(pptFolderPath)) {
    fs.mkdirSync(pptFolderPath, { recursive: true });
  }

  const stream = Readable.from(file.data);

  stream.pipe(
    unzipper.Extract({
      path: pptFolderPath,
    })
  );

  db.query(
    "INSERT INTO `myveda-db`.ppt_mat (course_id, file_name) VALUES (?, ?)",
    [courseId, fileName],
    (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send("Internal Server Error");
      } else {
        res.send();
      }
    }
  );
});
//for homepage training material (VIDEO)
app.post("/vdodata", (req, res) => {
  const file = req.files.vdo;
  const { courseId, filename } = req.body;

  if (file) {
    fs.writeFileSync(`${filePath}/${courseId}/video/${file?.name}`, file?.data);
    db.query(
      "INSERT INTO `myveda-db`.vdo_mat (course_id,file_name)  VALUES(?,?)",
      [courseId, file?.name],
      (err, result) => {
        if (err) console.log(err);
        else res.send();
      }
    );
  } else {
    console.log("err");
  }

  try {
    db.query("select * from `myveda-db`.add_courses", (err, result) => {
      if (err) console.log(err);
      else {
        result.forEach((item, index, myarr) => {
          db.query(
            "select * from `myveda-db`.vdo_mat where course_id = ?",
            [item.course_id],
            (err1, result1) => {
              if (err1) console.log(err1);
              else {
                db.query(
                  "update `myveda-db`.add_courses set tot_videos = ? where course_id = ?",
                  [result1.length, item.course_id],
                  (err2, result2) => {
                    if (err2) console.log(err2);
                    else {
                      console.log(result2);
                    }
                  }
                );
              }
            }
          );
        });
      }
    });
  } catch (error) {}
});

//get question from db
app.get("/getdataquestion", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.snd_feedbck_db", (err, result) => {
    if (err) {
      console.log(err);
    } else {
      res.send(result);
    }
  });
});
//exam management send QBID in database
app.post("/qbiddata", (req, res) => {
  const courseID = req.body.courseID;

  const Qb_ID = courseID + "-QB-ID";
  console.log(Qb_ID);

  console.log(courseID);

  db.query(
    "INSERT INTO `myveda-db`.q_bank_ids (qb_id) values(?)",
    [Qb_ID],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//exam management send WE-QBID in database
app.post("/we/qbiddata", (req, res) => {
  const courseID = req.body.courseID;

  const Qb_ID = courseID + "-EX-ID";
  console.log(Qb_ID);

  console.log(courseID);

  db.query(
    "INSERT INTO `myveda-db`.add_ex_id (ex_id) values(?)",
    [Qb_ID],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//exam management send SCQS in database
app.post("/scqsdata", (req, res) => {
  const qbId = req.body.qbId;
  const question = req.body.question;
  const opt1 = req.body.option1;
  const opt2 = req.body.option2;
  const opt3 = req.body.option3;
  const opt4 = req.body.option4;
  const correctAnswer = req.body.correctAnswer;

  db.query(
    "INSERT INTO `myveda-db`.add_scqs (qb_id,question,opt1,opt2,opt3,opt4,c_ans) values(?,?,?,?,?,?,?)",
    [qbId, question, opt1, opt2, opt3, opt4, correctAnswer],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//exam management send TFQS in Database
app.post("/tfqsdata", (req, res) => {
  const qbId = req.body.qbId;

  const question = req.body.question;
  const opt1 = req.body.option1;
  const opt2 = req.body.option2;
  const correctAnswer = req.body.correctAnswer;

  db.query(
    "INSERT INTO `myveda-db`.add_tfqs (qb_id,question,opt1,opt2,c_ans) values(?,?,?,?,?)",
    [qbId, question, opt1, opt2, correctAnswer],
    (err, result) => {
      if (err) console.log(err);
      else res.json();
    }
  );
});
//exam management send ORFQs in Database
app.post("/orqsdata", (req, res) => {
  const qbId = req.body.qbId;
  const question = req.body.question;

  const answer = req.body.answer;
  db.query(
    "INSERT INTO `myveda-db`.add_orqs (qb_id, question,answer) values(?,?,?)",
    [qbId, question, answer],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//for select logo from db
app.get("/fetchlogo", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.upld_logo", (err, result) => {
    console.log(err);
  });
});
//
app.get("/fetchqbid", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.q_bank_ids", (err, result) => {
    if (err) {
      console.log(err);
    } else {
      res.send(result);
    }
  });
});
//update Qb id for customers
app.put("/newqbid", (req, res) => {
  const newQbid = req.body.newQbid;
  const ex_id = req.body.ex_id;
  const newPqbId = req.body.newPqbId;
  const course_id = req.body.course_id;
  const exam_type = req.body.exam_type;

  db.query(
    "UPDATE `myveda-db`.add_courses SET p_qb_id = ?,qb_id = ?,ex_id = ?,exam_type = ? WHERE course_id = ?",
    [newPqbId, newQbid, ex_id, exam_type, course_id],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

// update ex_id
app.put("/newexid", (req, res) => {
  const takeWeQbIdValue = req.body.takeWeQbIdValue;

  db.query(
    "UPDATE `myveda-db`.add_courses SET ex_id = ? WHERE course_id = ?",
    [takeWeQbIdValue, req.body.course_id],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update course id for mapping customer
app.put("/newcourseid", (req, res) => {
  const newCourseId = req.body.newCourseId;
  console.log(newCourseId);
  const cust_id = req.body.cust_id;
  db.query(
    "UPDATE  `myveda-db`.comp_cust_req_db SET course_id =?   WHERE cust_id = ?",
    [newCourseId, cust_id],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update course id 2 for mapping customer
app.put("/newcourseid2", (req, res) => {
  const newCourseId2 = req.body.newCourseId2;
  console.log(newCourseId2);
  const cust_id = req.body.cust_id;
  console.log(cust_id);
  db.query(
    "UPDATE `myveda-db`.comp_cust_req_db SET course_id2 =?  WHERE cust_id = ?",
    [newCourseId2, cust_id],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//update course id 3 for mapping customer
app.put("/newcourseid3", (req, res) => {
  const newCourseId3 = req.body.newCourseId3;
  console.log(newCourseId3);
  const cust_id = req.body.cust_id;
  db.query(
    "UPDATE `myveda-db`.comp_cust_req_db SET course_id3 =?  WHERE cust_id = ?",
    [newCourseId3, cust_id],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update course id 4 for mapping customer
app.put("/newcourseid4", (req, res) => {
  const newCourseId4 = req.body.newCourseId4;
  const cust_id = req.body.cust_id;
  db.query(
    "UPDATE `myveda-db`.comp_cust_req_db SET course_id4 =?  WHERE cust_id = ?",
    [newCourseId4, cust_id],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update course id 5 for mapping customer
app.put("/newcourseid5", (req, res) => {
  const newCourseId5 = req.body.newCourseId5;
  const cust_id = req.body.cust_id;
  db.query(
    "UPDATE `myveda-db`.comp_cust_req_db SET course_id5 =?  WHERE cust_id = ?",
    [newCourseId5, cust_id],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update course id 6 for mapping customer
app.put("/newcourseid6", (req, res) => {
  const newcourseid6 = req.body.newcourseid6;
  const cust_id = req.body.cust_id;
  db.query(
    "UPDATE `myveda-db`.comp_cust_req_db SET course_id6newcourseid6 =?  WHERE cust_id = ?",
    [newcourseid6, cust_id],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update course id 7 for mapping customer
app.put("/newcourseid7", (req, res) => {
  const newCourseId7 = req.body.newCourseId7;
  const cust_id = req.body.cust_id;
  db.query(
    "UPDATE `myveda-db`.comp_cust_req_db SET course_id7 =?  WHERE cust_id = ?",
    [newCourseId7, cust_id],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update course id 8 for mapping customer
app.put("/newcourseid8", (req, res) => {
  const newCourseId8 = req.body.newCourseId8;
  const cust_id = req.body.cust_id;
  db.query(
    "UPDATE `myveda-db`.comp_cust_req_db SET course_id8 =?  WHERE cust_id = ?",
    [newCourseId8, cust_id],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update course id 9 for mapping customer
app.put("/newcourseid9", (req, res) => {
  const newCourseId9 = req.body.newCourseId9;
  const cust_id = req.body.cust_id;
  db.query(
    "UPDATE `myveda-db`.comp_cust_req_db SET course_id9 =?  WHERE cust_id = ?",
    [newCourseId9, cust_id],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update course id 10 for mapping customer
app.put("/newcourseid10", (req, res) => {
  const newCourseId10 = req.body.newCourseId10;
  const cust_id = req.body.cust_id;
  db.query(
    "UPDATE `myveda-db`.comp_cust_req_db SET course_id10 =?  WHERE cust_id = ?",
    [newCourseId10, cust_id],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update course id 11 for mapping customer
app.put("/newcourseid11", (req, res) => {
  const newCourseId11 = req.body.newCourseId11;
  const cust_id = req.body.cust_id;
  db.query(
    "UPDATE `myveda-db`.comp_cust_req_db SET course_id11 =?  WHERE cust_id = ?",
    [newCourseId11, cust_id],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update course id 12 for mapping customer
app.put("/newcourseid12", (req, res) => {
  const newCourseId12 = req.body.newCourseId12;
  const cust_id = req.body.cust_id;
  db.query(
    "UPDATE `myveda-db`.comp_cust_req_db SET course_id12 =?  WHERE cust_id = ?",
    [newCourseId12, cust_id],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//
app.get("/fetchcourseidformapping1/:valuetot", (req, res) => {
  const valuetot = req.params.valuetot;
  db.query(
    "SELECT * FROM `myveda-db`.corp_cust_course_ids where cust_id=?",
    [valuetot],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
//get user feedback data for reports analysis
app.get("/getusrfeebackdata", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.usr_feedbck", (err, result) => {
    if (err) {
      console.log(err);
    } else {
      res.send(result);
    }
  });
});

//update cust id
app.put("/newcustid", (req, res) => {
  const newCustId = req.body.newCustId;
  const id = req.body.id;
  db.query(
    "UPDATE `myveda-db`.comp_cust_req_db SET cust_id =?  WHERE id = ?",
    [newCustId, id],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});

//update email subject of Passcode
app.put("/updatepasscodesubject", (req, res) => {
  const subject = req.body.subject;
  db.query(
    "UPDATE `myveda-db`.passcode_email_cnf SET subject =?  WHERE id = 1",
    [subject],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email URL of Passcode
app.put("/updatepasscodeurl", (req, res) => {
  const url = req.body.url;
  db.query(
    "UPDATE `myveda-db`.passcode_email_cnf SET url =?  WHERE id = 1",
    [url],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email message of Passcode
app.put("/updatepasscodemsg", (req, res) => {
  const message = req.body.message;
  db.query(
    "UPDATE `myveda-db`.passcode_email_cnf SET message = ?  WHERE id = 1",
    [message],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//update email caution of Passcode
app.put("/updatepasscodecaution", (req, res) => {
  const caution = req.body.caution;
  db.query(
    "UPDATE `myveda-db`.passcode_email_cnf SET caution = ?  WHERE id = 1",
    [caution],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//update email sign of Passcode
app.put("/updatepasscodesign", (req, res) => {
  const sign = req.body.sign;
  db.query(
    "UPDATE `myveda-db`.passcode_email_cnf SET signature = ?  WHERE id = 1",
    [sign],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//update for user pass email body
app.get("/getpassuseremaildata", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.user_pass_email_cnf", (err, result) => {
    if (err) console.log(err);
    else res.send(result);
  });
});
//update email subject of user pass
app.put("/updatepassusersubject", (req, res) => {
  const subject = req.body.subject;
  db.query(
    "UPDATE `myveda-db`.user_pass_email_cnf SET subject =?  WHERE id = 1",
    [subject],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//update for user fail email body
app.get("/getfailuseremaildata", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.user_fail_email_cnf", (err, result) => {
    if (err) console.log(err);
    else res.send(result);
  });
});
//update email subject of user we
app.put("/updateweusersubject", (req, res) => {
  const subject = req.body.subject;
  db.query(
    "UPDATE `myveda-db`.user_we_email_cnf SET subject =?  WHERE id = 1",
    [subject],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//update email url of user we
app.put("/updateweuserurl", (req, res) => {
  const url = req.body.url;
  db.query(
    "UPDATE `myveda-db`.user_we_email_cnf SET url =?  WHERE id = 1",
    [url],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email message of user we
app.put("/updateweusermsg", (req, res) => {
  const message = req.body.message;
  db.query(
    "UPDATE `myveda-db`.user_we_email_cnf SET message =?  WHERE id = 1",
    [message],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//update email caution of user we
app.put("/updateweusercaution", (req, res) => {
  const caution = req.body.caution;
  db.query(
    "UPDATE `myveda-db`.user_we_email_cnf SET caution =?  WHERE id = 1",
    [caution],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email sign of user we
app.put("/updateweusersign", (req, res) => {
  const sign = req.body.sign;
  db.query(
    "UPDATE `myveda-db`.user_we_email_cnf SET signature =?  WHERE id = 1",
    [sign],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email subject of user fail
app.put("/updatefailusersubject", (req, res) => {
  const subject = req.body.subject;
  db.query(
    "UPDATE `myveda-db`.user_fail_email_cnf SET subject =?  WHERE id = 1",
    [subject],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//update email url of user fail
app.put("/updatefailuserurl", (req, res) => {
  const url = req.body.url;
  db.query(
    "UPDATE `myveda-db`.user_fail_email_cnf SET url =?  WHERE id = 1",
    [url],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email message of user fail
app.put("/updatefailusermsg", (req, res) => {
  const message = req.body.message;
  db.query(
    "UPDATE `myveda-db`.user_fail_email_cnf SET message =?  WHERE id = 1",
    [message],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//update email caution of user fail
app.put("/updatefailusercaution", (req, res) => {
  const caution = req.body.caution;
  db.query(
    "UPDATE `myveda-db`.user_fail_email_cnf SET caution =?  WHERE id = 1",
    [caution],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email sign of user fail
app.put("/updatefailusersign", (req, res) => {
  const sign = req.body.sign;
  db.query(
    "UPDATE `myveda-db`.user_fail_email_cnf SET signature =?  WHERE id = 1",
    [sign],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email URL of user pass
app.put("/updatepassuserurl", (req, res) => {
  const url = req.body.url;
  db.query(
    "UPDATE `myveda-db`.user_pass_email_cnf SET url =?  WHERE id = 1",
    [url],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email message of user pass
app.put("/updatepassusermsg", (req, res) => {
  const message = req.body.message;
  db.query(
    "UPDATE `myveda-db`.user_pass_email_cnf SET message = ?  WHERE id = 1",
    [message],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//update email caution of pass user
app.put("/updatepassusercaution", (req, res) => {
  const caution = req.body.caution;
  db.query(
    "UPDATE `myveda-db`.user_pass_email_cnf SET caution = ?  WHERE id = 1",
    [caution],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//update email sign of pass user
app.put("/updatepassusersign", (req, res) => {
  const sign = req.body.sign;
  db.query(
    "UPDATE `myveda-db`.user_pass_email_cnf SET signature = ?  WHERE id = 1",
    [sign],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//get forget passcode email configuration
app.get("/getforgetcnfemail", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.passcode_email_cnf", (err, result) => {
    if (err) {
      console.log(err);
    } else {
      res.send(result);
    }
  });
});
//get Approve data of trainer
app.get("/get/trainer/la/data", (req, res) => {
  db.query(
    `SELECT *
    FROM \`myveda-db\`.trainer_reg_table_la AS t1
    JOIN \`myveda-db\`.batch_ids_la AS t3
        ON t3.trainer = t1.uid;
     `,
    (err, result) => {
      if (err) console.log(err);
      else {
        res.send(result);
      }
    }
  );
});
//get Approve data of trainer
app.get("/get/trainer/la/data/no", (req, res) => {
  db.query(
    `SELECT *
  FROM \`myveda-db\`.trainer_reg_table_la AS t1
  JOIN \`myveda-db\`.trainer_std_status_la AS t2
      ON t1.uid = t2.uid`,
    (err, result) => {
      if (err) console.log(err);
      else {
        res.send(result);
      }
    }
  );
});

app.get("/api/v1/get/data/free/map/trainer", (req, res) => {
  try {
    db.query(
      "SELECT * FROM `myveda-db`.trainer_reg_table_la",
      (err, result) => {
        if (err) console.log(err);
        else {
          db.query(
            "SELECT * FROM `myveda-db`.trainer_reg_table_la",
            (err1, result1) => {
              if (err1) console.log(err1);
              else {
                res.send({
                  value: "Trainers",
                  data: result,
                });
              }
            }
          );
        }
      }
    );
  } catch (error) {}
});
//all batch-Id select
app.get("/get/all/batch/id", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.batch_ids_la ORDER BY id_batch DESC",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

// get learners from Batch-ID
app.get("/get/all/batch/id/learners/:id", (req, res) => {
  const { id } = req.params;
  db.query(
    "SELECT * FROM `myveda-db`.user_course_map_table_la where batch_code = ?",
    [id],
    (err, result) => {
      if (err) console.log(err);
      else res.status(200).send(result);
    }
  );
});

app.get("/get/all/batch_ids/trainer/:id", (req, res) => {
  const { id } = req.params;
  db.query(
    "SELECT * FROM `myveda-db`.batch_ids_la where trainer = ?",
    [id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//mapped batch for trrainer and all participant of that batch-ID
const processElement = async (element, batch_id) => {
  try {
    const queryPromise = (sql, params) => {
      return new Promise((resolve, reject) => {
        db.query(sql, params, (error, result) => {
          if (error) {
            reject(error);
          } else {
            resolve({ success: true });
          }
        });
      });
    };
    // Check if the user is not already in usr_batch_status_la
    const existingUser = await queryPromise(
      "SELECT * FROM `myveda-db`.usr_batch_status_la WHERE batch_id = ? AND uid = ?",
      [batch_id, element.uid]
    );

    if (existingUser.length === 0) {
      // Fetch user details from customer_reg
      const userDetails = await queryPromise(
        "SELECT * FROM `myveda-db`.customer_reg WHERE businessMail = ?",
        [element.uid]
      );

      if (userDetails.length > 0) {
        const user = userDetails[0];
        // Insert user details into usr_batch_status_la
        await queryPromise(
          "INSERT INTO `myveda-db`.usr_batch_status_la(name, uid, number, country, batch_id) VALUES (?, ?, ?, ?, ?)",
          [
            `${user.firstName} ${user.lastName}`,
            element.uid,
            user.contactNumber,
            user.country,
            batch_id,
          ]
        );

        // Fetch email template
        const emailTemplate = await queryPromise(
          "SELECT * FROM `myveda-db`.email_temp_batch_gen_la"
        );

        const emailContent = `
                  <h3>Dear ${user.firstName} ${user.lastName}</h3>
                  <p>${emailTemplate[0].message}</p>
                  <br />
                  <p><b>Course :</b> ${result1[0].course}</p>
                  <p><b>Batch-ID :</b> ${batch_id}</p>
                  <p><b>Trainer Details</b></p>
                  <p><b>Name :</b> ${result1[0].name} ${result1[0].surname}</p>
                  <p><b>E-mail :</b> ${result1[0].uid}</p>
                  <p><b>Number :</b> ${result1[0].contact}</p>
                  <p><b>${emailTemplate[0].caution}.</b></p>
                  <br />
                  <p>Thanks & Regards</p>
                  <p>${emailTemplate[0].signature}</p>
              `;

        // Fetch email server details
        const emailServerDetails = await queryPromise(
          "SELECT * FROM `myveda-db`.email_srv"
        );

        const emailServer = emailServerDetails[0];
        const transporter = nodemailer.createTransport({
          host: emailServer.host,
          port: emailServer.port,
          secure: true,
          auth: {
            user: emailServer.auth_uid,
            pass: emailServer.auth_pass,
          },
        });

        console.log(element.uid);

        const info = await transporter.sendMail({
          from: `"${emailServer.from_email}" <${emailServer.from_email}>`,
          to: element.uid,
          subject: emailTemplate[0].subject,
          bcc: emailServer.bcc_email,
          html: emailContent,
        });

        console.log("Message sent: %s", info.messageId);
        console.log("Preview URL: %s", nodemailer.getTestMessageUrl(info));
      }
    }
  } catch (error) {
    console.error(error);
  }
};
app.post("/create/batch/admin", (req, res) => {
  const { batch_id, uid, course_id } = req.body;

  const takeId = batch_id.substring(0, 4);
  db.query(
    "update `myveda-db`.batch_ids_la set trainer = ? where batch_ids = ?",
    [uid, batch_id],
    (errYY, resultYY) => {
      if (errYY) console.log(YY);
      else {
        db.query(
          "SELECT * FROM `myveda-db`.sat_batch_status_la where trainer_uid = ? and batch_id = ?",
          [uid, batch_id],
          (err1, result1) => {
            if (err1) console.log(err1);
            else {
              db.query(
                "select * from `myveda-db`.add_std_list where iso_code  = ?",
                [takeId],
                (err11, result11) => {
                  if (err11) console.log(err1);
                  else {
                    db.query(
                      "select * from `myveda-db`.add_courses where course_id = ?",
                      [course_id],
                      (err111, result111) => {
                        if (err111) console.log(err111);
                        else {
                          db.query(
                            "insert into `myveda-db`.sat_batch_status_la(trainer_uid,batch_id,course_id,course) values(?,?,?,?)",
                            [uid, batch_id, course_id, result111[0].standard],
                            (err33, result33) => {
                              if (err33) console.log(err33);
                              else {
                                //mdmdmdm
                                db.query(
                                  "SELECT * FROM `myveda-db`.email_temp_batch_gen_la",
                                  (errBatch, resultBatch) => {
                                    if (errBatch) console.log(errBatch);
                                    else {
                                      const checkData = new Promise(
                                        (resolve, reject) => {
                                          db.query(
                                            "SELECT * FROM `myveda-db`.user_course_map_table_la where batch_code = ?",
                                            [batch_id],
                                            (err, userRows) => {
                                              if (err) console.log(err);
                                              else {
                                                let array = userRows;
                                                db.query(
                                                  "SELECT * FROM `myveda-db`.sat_batch_status_la t1 JOIN `myveda-db`.trainer_reg_table_la t2 ON t1.trainer_uid = t2.uid Join `myveda-db`.batch_ids_la as t3 on t1.trainer_uid = t3.trainer where t3.batch_ids = ?",
                                                  [batch_id],
                                                  (err1, result1) => {
                                                    if (err1) console.log(err1);
                                                    else {
                                                      const processArray =
                                                        async (
                                                          array,
                                                          batch_id
                                                        ) => {
                                                          return new Promise(
                                                            (
                                                              resolve,
                                                              reject
                                                            ) => {
                                                              try {
                                                                for (
                                                                  let index = 0;
                                                                  index <
                                                                  array.length;
                                                                  index++
                                                                ) {
                                                                  processElement(
                                                                    array[
                                                                      index
                                                                    ],
                                                                    batch_id
                                                                  );
                                                                }
                                                                resolve({
                                                                  success: true,
                                                                });
                                                              } catch (error) {
                                                                reject(error);
                                                              }
                                                            }
                                                          );
                                                        };

                                                      // Call processArray
                                                      processArray(
                                                        array,
                                                        batch_id
                                                      )
                                                        .then((result) => {
                                                          db.query(
                                                            "SELECT * FROM `myveda-db`.trainer_reg_table_la where uid = ?",
                                                            [uid],
                                                            (errM, resultM) => {
                                                              if (errM)
                                                                console.log(
                                                                  errM
                                                                );
                                                              else {
                                                                const output = `
                                                                  <h3>Dear ${
                                                                    resultM[0]
                                                                      .name +
                                                                    " " +
                                                                    resultM[0]
                                                                      .surname
                                                                  }</h3>
                                                                  <p>${
                                                                    resultBatch[0]
                                                                      .message
                                                                  }</p>
                                                                  <br />
                                                          
                                                                  <p><b>Course-ID</b>: ${course_id}</p>
                                                          
                                                                  <p><b>Batch-ID </b>: ${batch_id}</p>
                                                          
                                                                  <p><b>${
                                                                    resultBatch[0]
                                                                      .caution
                                                                  }.</b></p>
                                                                  <br />
                                                          
                                                                  <p>Thanks & Regards</p>
                                                                  <p>${
                                                                    resultBatch[0]
                                                                      .signature
                                                                  }</p>
                                                                  `;

                                                                db.query(
                                                                  "SELECT * FROM `myveda-db`.email_srv",
                                                                  (
                                                                    err,
                                                                    result
                                                                  ) => {
                                                                    if (err) {
                                                                      console.log(
                                                                        err
                                                                      );
                                                                    } else {
                                                                      console.log(
                                                                        result
                                                                      );
                                                                      let host1 =
                                                                        result[0]
                                                                          ?.host;
                                                                      let port1 =
                                                                        result[0]
                                                                          ?.port;
                                                                      let user1 =
                                                                        result[0]
                                                                          ?.auth_uid;
                                                                      let pass1 =
                                                                        result[0]
                                                                          ?.auth_pass;
                                                                      let fromEmail =
                                                                        result[0]
                                                                          ?.from_email;
                                                                      let bccEmail =
                                                                        result[0]
                                                                          ?.bcc_email;
                                                                      let transporter =
                                                                        nodemailer.createTransport(
                                                                          {
                                                                            host: host1,
                                                                            port: port1,
                                                                            secure: true, // true for 465, false for other p orts
                                                                            auth: {
                                                                              user: user1, // generated ethereal user
                                                                              pass: pass1, // generated ethereal password
                                                                            },
                                                                          }
                                                                        );

                                                                      // send mail with defined transport object
                                                                      let info =
                                                                        transporter
                                                                          .sendMail(
                                                                            {
                                                                              from: `"" ${fromEmail}`, // sender address
                                                                              to: uid,

                                                                              subject:
                                                                                resultBatch[0]
                                                                                  .subject, // Subject line
                                                                              bcc: bccEmail,
                                                                              html: output, // html body
                                                                            }
                                                                          )
                                                                          .then(
                                                                            () => {
                                                                              res.send(
                                                                                {
                                                                                  success: true,
                                                                                }
                                                                              );
                                                                            }
                                                                          );

                                                                      console.log(
                                                                        "Message sent: %s",
                                                                        info.messageId
                                                                      );
                                                                      console.log(
                                                                        "Preview URL: %s",
                                                                        nodemailer.getTestMessageUrl(
                                                                          info
                                                                        )
                                                                      );
                                                                    }
                                                                  }
                                                                );
                                                              }
                                                            }
                                                          );
                                                        })
                                                        .catch((error) => {
                                                          console.error(error);
                                                        });

                                                      // Helper function to wrap db.query into a Promise
                                                    }
                                                  }
                                                );
                                              }
                                            }
                                          );
                                        }
                                      );
                                    }
                                  }
                                );
                              }
                            }
                          );
                        }
                      }
                    );
                  }
                }
              );
              //
            }
          }
        );
      }
    }
  );
});

// app.post("/create/batch/admin", async (req, res) => {
//   try {
//     const { batch_id } = req.body;
//     const takeId = batch_id.substring(0, 4);
//     console.log(takeId);

//     // Update trainer_reg_table_la
//     const resultMy = await new Promise((resolve, reject) => {
//       db.query(
//         "UPDATE `myveda-db`.trainer_reg_table_la SET batch_code = ?, avl_status = ? WHERE uid = ?",
//         [batch_id, 0, req.body.data.uid],
//         (err, result) => {
//           if (err) reject(err);
//           else resolve(result);
//         }
//       );
//     });

//     // Select from sat_batch_status_la
//     const result1 = await new Promise((resolve, reject) => {
//       db.query(
//         "SELECT * FROM `myveda-db`.sat_batch_status_la WHERE trainer_uid = ? AND batch_id = ?",
//         [req.body.data.uid, batch_id],
//         (err, result) => {
//           if (err) reject(err);
//           else resolve(result);
//         }
//       );
//     });

//     // Select from add_std_list
//     const result11 = await new Promise((resolve, reject) => {
//       db.query(
//         "SELECT * FROM `myveda-db`.add_std_list WHERE iso_code = ?",
//         [takeId],
//         (err, result) => {
//           if (err) reject(err);
//           else resolve(result);
//         }
//       );
//     });

//     // Select from add_courses
//     const course_id = resultMy[0].course_id;
//     const result111 = await new Promise((resolve, reject) => {
//       db.query(
//         "SELECT * FROM `myveda-db`.add_courses WHERE course_id = ?",
//         [course_id],
//         (err, result) => {
//           if (err) reject(err);
//           else resolve(result);
//         }
//       );
//     });

//     // Insert into sat_batch_status_la
//     await new Promise((resolve, reject) => {
//       db.query(
//         "INSERT INTO `myveda-db`.sat_batch_status_la (trainer_uid, batch_id, course_id, course) VALUES (?, ?, ?, ?)",
//         [
//           req.body.data.uid,
//           batch_id,
//           result111[0].course_id,
//           result111[0].course_category + "-" + result111[0].standard,
//         ],
//         (err, result) => {
//           if (err) reject(err);
//           else resolve(result);
//         }
//       );
//     });

//     // Select from email_temp_batch_gen_la
//     const emailResult = await new Promise((resolve, reject) => {
//       db.query(
//         "SELECT * FROM `myveda-db`.email_temp_batch_gen_la",
//         (err, resultBatch) => {
//           if (err) reject(err);
//           else resolve(resultBatch);
//         }
//       );
//     });

//     // Select from user_course_map_table_la
//     const usersResult = await new Promise((resolve, reject) => {
//       db.query(
//         "SELECT * FROM `myveda-db`.user_course_map_table_la WHERE batch_code = ?",
//         [batch_id],
//         (err, result) => {
//           if (err) reject(err);
//           else resolve(result);
//         }
//       );
//     });

//     // Select from sat_batch_status_la and trainer_reg_table_la
//     const arrayResult = await new Promise((resolve, reject) => {
//       db.query(
//         "SELECT * FROM `myveda-db`.sat_batch_status_la t1 JOIN `myveda-db`.trainer_reg_table_la t2 ON t1.trainer_uid = t2.uid WHERE batch_code = ?",
//         [batch_id],
//         (err, result) => {
//           if (err) reject(err);
//           else resolve(result);
//         }
//       );
//     });

//     for (const element of arrayResult) {
//       const result11 = await new Promise((resolve, reject) => {
//         db.query(
//           "SELECT * FROM `myveda-db`.usr_batch_status_la WHERE batch_id = ? AND uid = ?",
//           [batch_id, element.uid],
//           (err, result) => {
//             if (err) reject(err);
//             else resolve(result);
//           }
//         );
//       });

//       if (result11.length === 0) {
//         const resultM = await new Promise((resolve, reject) => {
//           db.query(
//             "SELECT * FROM `myveda-db`.customer_reg WHERE businessMail = ?",
//             [element.uid],
//             (err, result) => {
//               if (err) reject(err);
//               else resolve(result);
//             }
//           );
//         });

//         await new Promise((resolve, reject) => {
//           db.query(
//             "INSERT INTO `myveda-db`.usr_batch_status_la (name, uid, number, country, batch_id) VALUES (?, ?, ?, ?, ?)",
//             [
//               resultM[0].firstName + " " + resultM[0].lastName,
//               element.uid,
//               resultM[0].contactNumber,
//               resultM[0].country,
//               batch_id,
//             ],
//             (err, result) => {
//               if (err) reject(err);
//               else resolve(result);
//             }
//           );
//         });

//         // Send email
//         const output = `
//           <h3>Dear ${resultM[0].firstName + " " + resultM[0].lastName}</h3>
//           <p>${emailResult[0].message}</p>
//           <br />

//           <p><b>Course :</b> ${result1[0].course}</p>
//           <p><b>Batch-ID :</b> ${batch_id}</p>

//           <p><b>Trainer Details</b></p>
//           <p><b>Name :</b> ${result1[0].name + " " + result1[0].surname}</p>
//           <p><b>E-mail :</b> ${result1[0].uid}</p>
//           <p><b>Number :</b> ${result1[0].contact}</p>

//           <p><b>${emailResult[0].caution}.</b></p>
//           <br />

//           <p>Thanks & Regards</p>
//           <p>${emailResult[0].signature}</p>
//         `;

//         const emailResult1 = await new Promise((resolve, reject) => {
//           db.query("SELECT * FROM `myveda-db`.email_srv", (err, result) => {
//             if (err) reject(err);
//             else resolve(result);
//           });
//         });

//         const host1 = emailResult1[0]?.host;
//         const port1 = emailResult1[0]?.port;
//         const user1 = emailResult1[0]?.auth_uid;
//         const pass1 = emailResult1[0]?.auth_pass;
//         const fromEmail = emailResult1[0]?.from_email;
//         const bccEmail = emailResult1[0]?.bcc_email;

//         const transporter = nodemailer.createTransport({
//           host: host1,
//           port: port1,
//           secure: true,
//           auth: {
//             user: user1,
//             pass: pass1,
//           },
//         });

//         await transporter.sendMail({
//           from: `"" ${fromEmail}`,
//           to: element.uid,
//           subject: emailResult[0].subject,
//           bcc: bccEmail,
//           html: output,
//         });
//       }
//     }

//     res.send(result1);
//   } catch (err) {
//     console.log(err);
//     res.status(500).send("Internal Server Error");
//   }
// });

//
app.get("/admindata/:value", (req, res) => {
  let id = req.params.value;
  if (id === "Customer") {
    db.query(
      `SELECT 
      c.companyName, c.user_limit_allowed, c.registered_user, c.Logo, c.start_date, c.end_date, c.status, c.cust_id,
      course_info.course_start_date, course_info.course_end_date, course_info.course_id
  FROM
      \`myveda-db\`.comp_cust_req_db c
  LEFT JOIN (
      SELECT
          cust_id,
          MIN(start_date) AS course_start_date,
          MAX(end_date) AS course_end_date,
          GROUP_CONCAT(DISTINCT course_id) AS course_id
      FROM
          \`myveda-db\`.corp_cust_course_ids
      GROUP BY
          cust_id
  ) AS course_info ON course_info.cust_id = c.cust_id
  WHERE
      c.comp_id != '';
  `,
      (err, result) => {
        if (err) {
          console.log(err);
        } else {
          res.send(result);
        }
      }
    );
  } else if (id === "Individuals") {
    db.query(
      "select * from main_admin_db.myveda_indi_cust_ids where cust_id is not null",
      (err, result) => {
        if (err) {
          console.log(err);
        } else {
          res.send(result);
        }
      }
    );
  } else {
    db.query(
      "SELECT * FROM main_admin_db.myveda_indi_cust_ids where cust_id is null",
      (err, result) => {
        if (err) {
          console.log(err);
        } else {
          res.send(result);
        }
      }
    );
  }
});

//for individuals

app.get("/custid/individuals", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.customer_reg WHERE cust_id LIKE '%IND0%'",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

// map course for individuals
app.get("/take/map/courses/:value", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.user_course_map_table_la where uid = ?",
    [req.params.value],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

app.get("/take/la/learner/data/:id", (req, res) => {
  if (req.params.id === "LA") {
    db.query(
      "SELECT * FROM `myveda-db`.user_course_map_table_la where course = ?",
      ["LEAD AUDITOR"],
      (err, result) => {
        if (err) {
          console.log(err);
        } else {
          const arr = result;

          arr.forEach((element) => {
            db.query(
              "SELECT * FROM `myveda-db`.customer_reg where businessMail = ?",
              [element.uid],
              (err2, result2) => {
                if (err2) console.log(err2);
                else {
                  let reg_date = result2[0]?.req_date;
                  db.query(
                    "UPDATE `myveda-db`.user_course_map_table_la SET reg_date=? where uid = ?",
                    [reg_date, element.uid],
                    (err3, result3) => {
                      if (err3) console.log(err3);
                      else {
                      }
                    }
                  );
                }
              }
            );
          });
        }
      }
    );
  } else {
    console.log("LAT");
    db.query(
      "SELECT * FROM `myveda-db`.user_course_map_table_la where course = ?",
      ["LEAD AUDITOR TRANSITION"],
      (err, result) => {
        if (err) {
          console.log(err);
        } else {
          const arr = result;

          arr.forEach((element) => {
            db.query(
              "SELECT * FROM `myveda-db`.customer_reg where businessMail = ?",
              [element.uid],
              (err2, result2) => {
                if (err2) console.log(err2);
                else {
                  let reg_date = result2[0]?.req_date;
                  db.query(
                    "UPDATE `myveda-db`.user_course_map_table_la SET reg_date=? where uid = ?",
                    [reg_date, element.uid],
                    (err3, result3) => {
                      if (err3) console.log(err3);
                      else {
                      }
                    }
                  );
                }
              }
            );
          });
        }
      }
    );
  }
});
app.get("/take/la/learner/data/table/:id", (req, res) => {});
//update batch code.
// app.put("/create/batch/code", (req, res) => {
//   db.query("SELECT * FROM `myveda-db`.add_std_list where iso_code = ?", [
//     "E-LA",
//   ]);
// });
app.get("/admindata", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.comp_cust_req_db", (err, result) => {
    if (err) {
      console.log(err);
    } else {
      res.send(result);
    }
  });
});
// only for company
app.get("/admindata/only/cust", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.comp_cust_req_db where cust_id NOT LIKE '%IND0%'",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
app.get("/admindata/ex/:course_id", (req, res) => {
  console.log(req.params.course_id);
  db.query(
    "SELECT * FROM `myveda-db`.add_courses where course_id = ?",
    [req.params.course_id],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
app.get("/api/v1/get/course/id/data/:value", (req, res) => {
  console.log(req.params.value);
  db.query(
    "SELECT * FROM `myveda-db`.add_courses where course_id = ?",
    [req.params.value],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});

app.get("/admindata/my/:takeValue", (req, res) => {
  const takeValue = req.params.takeValue;
  console.log(takeValue);
  db.query(
    "SELECT * FROM `myveda-db`.comp_cust_req_db where cust_id = ?",
    [takeValue],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});

// get all logs of course id
app.get("/get/learner/logs/date/:uid/:id_pass2", (req, res) => {
  db.query(
    "SELECT *, GROUP_CONCAT(time_sec SEPARATOR '+') AS hours_concatenated, TIME_FORMAT(SEC_TO_TIME(SUM(time_sec)), '%H:%i:%s') AS hours_sum ,round(SUM(time_sec/60)) as Minutes FROM `myveda-db`.learner_course_log_data where uid = ? and course_id = ? GROUP BY login_date",
    [req.params.uid, req.params.id_pass2],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

// for map QB-ID's for map Courses
//   app.get('/bqiddata',(req,res)=>{

//     db.query('SELECT * FROM `myveda-db`.q_bank_ids',(err,result)=>{
//       if(err){
//         console.log(err)
//       }
//       else{
//         res.send(result);
//       }
//     })

// })

app.get("/customerid", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.comp_cust_req_db where comp_id != ''",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});

//edit cust id and all data

app.get("/customerdata", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.comp_cust_req_db", (err, result) => {
    if (err) {
      console.log(err);
    } else {
      res.send(result);
    }
  });
});

//user login
app.post("/login/learner", (req, res) => {
  const user_id = req.body.uid;
  const passcode = req.body.passcode;

  db.query(
    "SELECT * FROM `myveda-db`.auth_tb WHERE uid = ?",
    [user_id],
    async (err, result) => {
      const takeDbUid = result[0]?.uid;

      if (takeDbUid === user_id) {
        if (err) {
          res.send({ err: err });
        }
        if (result != undefined) {
          var passDatabase = await bCrypt.compare(
            passcode,
            result[0]?.passcode
          );

          if (passDatabase === true)
            res.status(200).json({ success: true, message: user_id });
          // res.send(result);
          else
            res
              .status(200)
              .json({ success: false, message: "Wrong Username/Password" });
        } else {
          // res.send({messages:"Wrong Username/Password "});
          res
            .status(200)
            .json({ success: false, message: "Wrong Username/Password" });
        }
      } else {
        res
          .status(200)
          .json({ success: false, message: "Wrong Username/Password" });
      }
    }
  );
});
//trainer login
app.post("/login/trainer", (req, res) => {
  const user_id = req.body.uid;
  const passcode = req.body.passcode;

  db.query(
    "SELECT * FROM `myveda-db`.trainer_auth_table_la WHERE uid = ?",
    [user_id],
    async (err, result) => {
      const takeDbUid = result[0]?.uid;

      if (takeDbUid === user_id) {
        if (err) {
          res.send({ err: err });
        }
        if (result != undefined) {
          var passDatabase = await bCrypt.compare(
            passcode,
            result[0]?.passcode
          );
          console.log(passDatabase);
          if (passDatabase === true)
            res.status(200).json({ success: true, message: user_id });
          // res.send(result);
          else
            res
              .status(200)
              .json({ success: false, message: "Wrong Username/Password" });
        } else {
          // res.send({messages:"Wrong Username/Password "});
          res
            .status(200)
            .json({ success: false, message: "Wrong Username/Password" });
        }
      } else {
        res
          .status(200)
          .json({ success: false, message: "Wrong Username/Password" });
      }
    }
  );
});
//eng login
app.post("/login/eng", (req, res) => {
  const user_id = req.body.uid;
  const passcode = req.body.passcode;

  db.query(
    "SELECT * FROM `main_admin_db`.engineer_auth WHERE uid = ?",
    [user_id],
    async (err, result) => {
      const takeDbUid = result[0]?.uid;

      if (takeDbUid === user_id) {
        if (err) {
          res.send({ err: err });
        }
        if (result != undefined) {
          var passDatabase = await bCrypt.compare(
            passcode,
            result[0]?.passcode
          );
          console.log(passDatabase);
          if (passDatabase === true)
            res.status(200).json({ success: true, message: user_id });
          // res.send(result);
          else
            res
              .status(200)
              .json({ success: false, message: "Wrong Username/Password" });
        } else {
          // res.send({messages:"Wrong Username/Password "});
          res
            .status(200)
            .json({ success: false, message: "Wrong Username/Password" });
        }
      } else {
        res
          .status(200)
          .json({ success: false, message: "Wrong Username/Password" });
      }
    }
  );
});

// get course duration required time
// app.get("/get/time/course/:course_id/:uid", (req, res) => {
//   console.log(req.params.course_id);
//   db.query(
//     "SELECT * FROM `myveda-db`.add_courses where course_id = ?",
//     [req.params.course_id],
//     (err, result) => {
//       if (err) console.log(err);
//       else {
//         db.query(
//           "SELECT * FROM `myveda-db`.course_type_min_time where course_type = ?",
//           [result[0].course_typ],
//           (err2, result2) => {
//             if (err2) console.log(err2);
//             else {
//               // res.send(result2);
//               const sec = result[0].min_hours * 60 * 60;
//               console.log(typeof sec);
//               db.query(
//                 "SELECT * FROM `myveda-db`.learner_course_log_data where course_id = ? and uid = ?",
//                 [req.params.course_id, req.params.uid],
//                 (err3, result3) => {
//                   if (err3) console.log(err3);
//                   else {
//                     let firstValue = result3.map(function (e) {
//                       return e.time_sec;
//                     });

//                     let sum = 0;
//                     // â get hh:mm:ss string

//                     for (let i = 0; i < firstValue.length; i++) {
//                       sum += parseInt(firstValue[i]);

//                       // sum = sec - sum
//                       // const result1 = new Date(sum * 1000).toISOString().slice(11, 19);
//                       // settotTime(result1);
//                     }
//                     const remainTime = sec - sum;
//                     res.send({
//                       time: remainTime,
//                       minTime: result[0].min_hours,
//                     });
//                   }
//                 }
//               );
//             }
//           }
//         );
//       }
//     }
//   );
// });

// get course duration required time
app.get("/get/time/course/:course_id/:uid", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.add_courses where course_id = ?",
    [req.params.course_id],
    (err, result) => {
      if (err) console.log(err);
      else {
        db.query(
          "SELECT * FROM `myveda-db`.course_type_min_time where course_type = ?",
          [result[0].course_typ],
          (err2, result2) => {
            if (err2) console.log(err2);
            else {
              // res.send(result2);
              const sec = result[0].min_hours * 60 * 60;
              console.log(typeof sec);
              db.query(
                "SELECT * FROM `myveda-db`.learner_course_log_data where course_id = ? and uid = ?",
                [req.params.course_id, req.params.uid],
                (err3, result3) => {
                  if (err3) console.log(err3);
                  else {
                    let firstValue = result3.map(function (e) {
                      return e.time_sec;
                    });

                    let sum = 0;
                    // â get hh:mm:ss string

                    for (let i = 0; i < firstValue.length; i++) {
                      sum += parseInt(firstValue[i]);

                      // sum = sec - sum
                      // const result1 = new Date(sum * 1000).toISOString().slice(11, 19);
                      // settotTime(result1);
                    }
                    console.log(sec);
                    console.log(sum);
                    const remainTime = sec - sum;
                    console.log(remainTime);
                    res.send({
                      time: remainTime,
                      minTime: result[0].min_hours,
                    });
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});
//
app.get("/get/notification/user/:uid/:id_pass2", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.usr_notification where uid = ? and course_id = ?",
    [req.params.uid, req.params.id_pass2],
    (err, result) => {
      if (err) console.log(err);
      else {
        db.query(
          "SELECT * FROM `myveda-db`.usr_notification where uid = ? and course_id = ? and status = ?",
          [req.params.uid, req.params.id_pass2, 0],
          (err2, result2) => {
            if (err) console.log(err);
            else {
              res.send({
                res1: result,
                res2: result2.length,
              });
            }
          }
        );
      }
    }
  );
});
//update course id params for user for exam

app.put("/update/course/params/:id_pass2/:uid", (req, res) => {
  const msg = `! Congrats You are eligible for ${req.params.id_pass2}'s Exam `;
  db.query(
    "update `myveda-db`.user_course_map_table_la set course_id_status = ? where uid = ? and course_id = ?",
    ["Unable", req.params.uid, req.params.id_pass2],
    (err, result) => {
      if (err) console.log(err);
      else {
        db.query(
          "select * from `myveda-db`.usr_notification where uid = ? and course_id = ?",
          [req.params.uid, req.params.id_pass2],
          (err3, result3) => {
            if (err3) console.log(err3);
            else {
              if (result3.length === 0) {
              }
            }
          }
        );
      }
    }
  );
});

//check status for exam of course id
app.get("/get/course/status/user/:uid/:idValue", (req, res) => {
  const table = req.params.idValue.toLowerCase().replace("-", "_");
  db.query(
    `select * from \`myveda-db\`.?? where uid = ?`,
    [table, req.params.uid],
    (errWW, resultWW) => {
      if (errWW) console.log(errWW);
      else {
        if (!resultWW.length) {
          db.query(
            `SELECT * FROM \`myveda-db\`.user_course_map_table_la AS t1
      LEFT JOIN \`myveda-db\`.add_courses AS t2 ON t1.course_id = t2.course_id
   
      WHERE t1.uid = ? AND t1.course_id = ?
      `,
            [req.params.uid, req.params.idValue],
            (err, result) => {
              if (err) console.log(err);
              else res.send(result);
            }
          );
        } else {
          db.query(
            `SELECT * FROM \`myveda-db\`.user_course_map_table_la AS t1
      LEFT JOIN \`myveda-db\`.add_courses AS t2 ON t1.course_id = t2.course_id
         LEFT JOIN \`myveda-db\`.?? AS t3 ON t1.uid = t3.uid
      WHERE t1.uid = ? AND t1.course_id = ?
      `,
            [table, req.params.uid, req.params.idValue],
            (err, result) => {
              if (err) console.log(err);
              else res.send(result);
            }
          );
        }
      }
    }
  );
});
// update

app.put("/update/notification/user", (req, res) => {
  db.query(
    "update `myveda-db`.usr_notification set status = ? where uid = ? and course_id = ?",
    [1, req.body.uid, req.body.course_id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//remain user
app.get("/api/v1/evaluate/exam/:uid", (req, res) => {
  const { uid } = req.params;
  db.query(
    "SELECT * FROM `myveda-db`.user_course_map_table_la where uid = ?",
    [uid],
    (err1, result1) => {
      if (err1) console.log(err1);
      else {
        const course_id = result1[0].course_id;
        const tableName = course_id.toLowerCase().replace("-", "_");
        db.query(
          "SELECT * FROM `myveda-db`.?? where uid = ?",
          [tableName, uid],
          (err, result) => {
            if (err) console.log(err);
            else res.send(result);
          }
        );
      }
    }
  );
});

//get all per question data

app.get("/getperquesdata", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.dfn_per_ques_mrks", (err, result) => {
    if (err) {
      console.log(err);
    } else {
      res.send(result);
    }
  });
});

//update per question marks
app.put("/updateperquesmarks", (req, res) => {
  const tfqs_mrks = req.body.newTfqsMarks;
  const scqs_mrks = req.body.newScqsMarks;
  const orqs_mrks = req.body.newOrqsMarks;

  db.query(
    "UPDATE `myveda-db`.dfn_per_ques_mrks set tfqs_per_ques_marks = ?,scqs_per_ques_marks=?,orqs_per_ques_marks=? where id=1",
    [tfqs_mrks, scqs_mrks, orqs_mrks],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});

//get all questions and answsers from user by user

app.get("/getuserorqsdataforevaluate/:currentUser/:courseid", (req, res) => {
  const courseid = req.params.courseid;
  const tableName = courseid.toLowerCase().replace("-", "_");
  const currentUser = req.params.currentUser;
  db.query(
    "SELECT ques_1_apt1,ans_1_apt1,ques_2_apt1,ans_2_apt1,ques_3_apt1,ans_3_apt1,ques_4_apt1,ans_4_apt1,ques_5_apt1,ans_5_apt1,stats_apt1,correct_ans1_apt1,correct_ans2_apt1,correct_ans3_apt1,correct_ans4_apt1,correct_ans5_apt1 FROM `myveda-db`.?? where uid = ?",
    [tableName, currentUser],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});

//get all question and answer submitted by user in attempt 2
app.get("/getuserorqsdataforevaluate2/:currentUser/:course_id", (req, res) => {
  const currentUser = req.params.currentUser;
  db.query(
    "SELECT ques_1_apt2,ans_1_apt2,ques_2_apt2,ans_2_apt2,ques_3_apt2,ans_3_apt2,ques_4_apt2,ans_4_apt2,ques_5_apt2,ans_5_apt2,stats_apt2,correct_ans1_apt2,correct_ans2_apt2,correct_ans3_apt2,correct_ans4_apt2,correct_ans5_apt2 FROM `myveda-db`.?? where uid = ?",
    [req.params.course_id, currentUser],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
//get all question and answer submitted by user in attempt 3
app.get("/getuserorqsdataforevaluate3/:currentUser/:course_id", (req, res) => {
  const currentUser = req.params.currentUser;
  db.query(
    "SELECT ques_1_apt3,ans_1_apt3,ques_2_apt3,ans_2_apt3,ques_3_apt3,ans_3_apt3,ques_4_apt3,ans_4_apt3,ques_5_apt3,ans_5_apt3,stats_apt3,correct_ans1_apt3,correct_ans2_apt3,correct_ans3_apt3,correct_ans4_apt3,correct_ans5_apt3 FROM `myveda-db`.?? where uid = ?",
    [req.params.course_id, currentUser],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});

//send orqs score evaluate via evaluator
app.put("/updateorqscore", (req, res) => {
  const course_id = req.body.courseId;
  const custID = req.body.custID;
  const uid = req.body.uid;
  const orqsMarks = req.body.orqsMarks;
  const firstName = req.body.firstName;
  const lastName = req.body.lastName;
  console.log(uid);
  console.log(course_id + "id");
  const tableName = course_id.toLowerCase().replace("-", "_");

  var today = new Date();
  var dd = String(today.getDate()).padStart(2, "0");
  var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
  var yyyy = today.getFullYear();

  today = yyyy + "-" + mm + "-" + dd;

  console.log(orqsMarks + " -" + tableName + "-" + uid);
  db.query(
    "UPDATE `myveda-db`.?? set orq_sc_apt1 = ? where uid = ?",
    [tableName, orqsMarks, uid],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        console.log(result);
      }
    }
  );
  var tot_score = "";
  db.query(
    `UPDATE \`myveda-db\`.?? AS T1
    JOIN (
      SELECT id, SUM(tfq_sc_apt1 + scq_sc_apt1 + orq_sc_apt1) AS newtable
      FROM \`myveda-db\`.??
      WHERE uid = ?
      GROUP BY id
    ) AS T2 ON T1.id = T2.id
    SET T1.tot_sc_apt1 = T2.newtable;`,
    [tableName, tableName, uid],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        console.log(result);
        db.query(
          "SELECT * from `myveda-db`.?? where uid = ?",
          [tableName, uid],
          (err1, result1) => {
            if (err1) console.log(err1);
            else {
              tot_score = result1[0].tot_sc_apt1;

              console.log(tot_score);
              db.query(
                "SELECT tt_marks from `myveda-db`.dfn_per_ques_mrks",
                (errM, resultM) => {
                  if (errM) console.log(errM);
                  else {
                    let tt_marks = resultM[0].tt_marks;
                    console.log(tt_marks);
                    db.query(
                      "SELECT tot_sc_apt1 from `myveda-db`.?? where uid = ?",
                      [tableName, uid],
                      (err, result) => {
                        if (err) console.log(err);
                        else {
                          // let tot_sc = result[0].tot_sc_apt1;
                          // console.log(tot_sc + "total score");
                          let tot_marks =
                            (parseInt(tot_score) / tt_marks) * 100;
                          console.log(Math.round(tot_marks) + "total marks");

                          const total = Math.round(tot_marks);
                          const totalMarks = parseInt(total);
                          console.log(totalMarks);

                          db.query(
                            "SELECT * FROM `myveda-db`.customer_reg where businessMail = ?",
                            [uid],
                            (errUser, resultUser) => {
                              if (errUser) console.log(errUser);
                              else {
                                let reg_date_user = resultUser[0].req_date;
                                db.query(
                                  "UPDATE `myveda-db`.?? SET percent_apt1 = ? WHERE uid = ?",
                                  [tableName, total, uid],
                                  (errP, resultP) => {
                                    if (errP) console.log(errP);
                                    else {
                                      if (totalMarks > 59) {
                                        db.query(
                                          "UPDATE `myveda-db`.?? SET stats_apt1 = ?,eval_date_orq_apt1 = ? WHERE uid = ?",
                                          [tableName, "PASS", today, uid],
                                          (errT, resultT) => {
                                            if (err) {
                                              console.log(errT);
                                            } else {
                                              console.log(resultT);
                                              db.query(
                                                "SELECT * FROM `myveda-db`.cert_info",
                                                (err, result) => {
                                                  if (err) {
                                                    console.log(err);
                                                  } else {
                                                    res.send(result);
                                                    let address1 =
                                                      result[0]?.address;
                                                    let email1 =
                                                      result[0]?.email;
                                                    let website1 =
                                                      result[0]?.website;
                                                    let number =
                                                      result[0]?.number;
                                                    console.log(address1);

                                                    db.query(
                                                      "SELECT * FROM `myveda-db`.add_courses where course_id = ?",
                                                      [course_id],
                                                      (error, result1) => {
                                                        if (err) {
                                                          console.log(err);
                                                        } else {
                                                          // console.log(result1)

                                                          let course_duration =
                                                            result1[0]
                                                              ?.duration;

                                                          let course_title =
                                                            result1[0]
                                                              ?.course_ttl;
                                                          let start_Date1 =
                                                            result1[0]
                                                              ?.start_dt; //you want copy?ss// now check>?>

                                                          let end_Date1 =
                                                            result1[0]
                                                              ?.start_dt;
                                                          let course_Id =
                                                            result1[0]
                                                              ?.course_id;
                                                          let course_Type =
                                                            result1[0]
                                                              ?.course_category;
                                                          db.query(
                                                            "SELECT * FROM `myveda-db`.upld_logo",
                                                            async (
                                                              err,
                                                              result3
                                                            ) => {
                                                              if (err) {
                                                                console.log(
                                                                  err
                                                                );
                                                              } else {
                                                                let comp_logo1 =
                                                                  result3[0]
                                                                    ?.comp_logo; //this is image
                                                                let pro_logo1 =
                                                                  result3[0]
                                                                    ?.pro_logo;
                                                                let cust_logo1 =
                                                                  result3[0]
                                                                    ?.cust_logo;
                                                                let i =
                                                                  Math.floor(
                                                                    Math.random() *
                                                                      (max -
                                                                        min +
                                                                        1)
                                                                  ) + min;

                                                                const PersonDetails =
                                                                  {
                                                                    courseTitle: `${course_title}`,
                                                                    startDate: `${
                                                                      duration +
                                                                      " Days"
                                                                    }`,
                                                                    endDate: `${today}`,
                                                                    course: `${course_Id}`,

                                                                    logo: `${comp_logo1}`,
                                                                    prodLogo: `${pro_logo1}`,

                                                                    name:
                                                                      `${firstName}` +
                                                                      " " +
                                                                      `${lastName}`,
                                                                    certificate:
                                                                      `${custID}` +
                                                                      `${i}`,
                                                                    address: `${address1}`,
                                                                    email: `${email1}`,
                                                                    website: `${website1}`,
                                                                    number: `${number}`,
                                                                  };

                                                                fs.readFile(
                                                                  "./assets/mastercert.pdf",
                                                                  async function (
                                                                    err,
                                                                    data
                                                                  ) {
                                                                    // Display the file content
                                                                    const ab =
                                                                      new ArrayBuffer(
                                                                        data.length
                                                                      );
                                                                    const view =
                                                                      new Uint8Array(
                                                                        ab
                                                                      );
                                                                    for (
                                                                      let i = 0;
                                                                      i <
                                                                      data.length;
                                                                      ++i
                                                                    ) {
                                                                      view[i] =
                                                                        data[i];
                                                                    }
                                                                    const pdfDoc =
                                                                      await PDFDocument.load(
                                                                        ab
                                                                      );
                                                                    const helveticaFont =
                                                                      await pdfDoc.embedFont(
                                                                        StandardFonts.TimesRomanItalic
                                                                      );
                                                                    const helveticaFont1 =
                                                                      await pdfDoc.embedFont(
                                                                        StandardFonts.CourierBold
                                                                      );
                                                                    const pngImage =
                                                                      await pdfDoc.embedPng(
                                                                        PersonDetails.logo
                                                                      );
                                                                    const productLogo =
                                                                      await pdfDoc.embedPng(
                                                                        PersonDetails.prodLogo
                                                                      );

                                                                    // Get the first page of the documentn
                                                                    const pages =
                                                                      pdfDoc.getPages();
                                                                    const firstPage =
                                                                      pages[0];

                                                                    const {
                                                                      width,
                                                                      height,
                                                                    } =
                                                                      firstPage.getSize();

                                                                    // Draw a string of text diagonally across the first page

                                                                    // course Title

                                                                    const centerTextXCourseTitle =
                                                                      (width -
                                                                        helveticaFont1.widthOfTextAtSize(
                                                                          PersonDetails.courseTitle,
                                                                          25
                                                                        )) /
                                                                      2;

                                                                    // Draw the course title centered on the X-axis
                                                                    firstPage.drawText(
                                                                      PersonDetails.courseTitle,
                                                                      {
                                                                        x: centerTextXCourseTitle,
                                                                        y:
                                                                          height /
                                                                          2,
                                                                        font: helveticaFont1,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                        size: 24,
                                                                      }
                                                                    );

                                                                    //Course Title
                                                                    // firstPage.drawText(
                                                                    //   PersonDetails.courseType,
                                                                    //   {
                                                                    //     x: 200,
                                                                    //     y: height / 2 + 30,
                                                                    //     font: helveticaFont1,
                                                                    //     color: rgb(
                                                                    //       0.95,
                                                                    //       0.1,
                                                                    //       0.1
                                                                    //     ),
                                                                    //     size: 36,
                                                                    //   }
                                                                    // ); //course type
                                                                    firstPage.drawImage(
                                                                      pngImage,
                                                                      {
                                                                        x: 120,
                                                                        y:
                                                                          height /
                                                                            2 -
                                                                          190,
                                                                        width: 120,
                                                                        height: 50,
                                                                      }
                                                                    ); //logo
                                                                    //logo
                                                                    //logo
                                                                    // Calculate the X position to center the user name
                                                                    const centerNameX =
                                                                      (width -
                                                                        helveticaFont1.widthOfTextAtSize(
                                                                          PersonDetails.name,
                                                                          20
                                                                        )) /
                                                                      2;

                                                                    // Draw the user name centered on the X-axis
                                                                    firstPage.drawText(
                                                                      PersonDetails.name,
                                                                      {
                                                                        x: centerNameX,
                                                                        y:
                                                                          height /
                                                                            2 +
                                                                          110,
                                                                        font: helveticaFont1,
                                                                        size: 20,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                      }
                                                                    );
                                                                    //User Name
                                                                    firstPage.drawText(
                                                                      PersonDetails.certificate,
                                                                      {
                                                                        x:
                                                                          width /
                                                                            2 +
                                                                          106,
                                                                        //(width - textWidth) / 3.1
                                                                        y:
                                                                          height /
                                                                            2 -
                                                                          55,
                                                                        font: helveticaFont,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                        size: 12,
                                                                      }
                                                                    ); //Certificate Name
                                                                    firstPage.drawText(
                                                                      PersonDetails.course,
                                                                      {
                                                                        x:
                                                                          width /
                                                                            2 +
                                                                          106,
                                                                        y:
                                                                          height /
                                                                            2 -
                                                                          80,
                                                                        font: helveticaFont,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                        size: 12,
                                                                      }
                                                                    ); //Course Name
                                                                    firstPage.drawText(
                                                                      PersonDetails.startDate,
                                                                      {
                                                                        x:
                                                                          width /
                                                                            2 +
                                                                          106,
                                                                        y:
                                                                          height /
                                                                            2 -
                                                                          108,
                                                                        font: helveticaFont,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                        size: 12,
                                                                      }
                                                                    ); //Start Date
                                                                    firstPage.drawText(
                                                                      PersonDetails.endDate,
                                                                      {
                                                                        x:
                                                                          width /
                                                                            2 +
                                                                          106,
                                                                        y:
                                                                          height /
                                                                            2 -
                                                                          138,
                                                                        font: helveticaFont,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                        size: 12,
                                                                      }
                                                                    ); //End Date
                                                                    //address
                                                                    //
                                                                    //  number
                                                                    firstPage.drawText(
                                                                      PersonDetails.email,
                                                                      {
                                                                        x: 155,
                                                                        y:
                                                                          height /
                                                                            2 -
                                                                          224,
                                                                        font: helveticaFont1,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                        size: 10,
                                                                      }
                                                                    );
                                                                    firstPage.drawText(
                                                                      PersonDetails.website,
                                                                      {
                                                                        x: 340,
                                                                        y:
                                                                          height /
                                                                            2 -
                                                                          224,
                                                                        font: helveticaFont1,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                        size: 10,
                                                                      }
                                                                    ); //website

                                                                    firstPage.drawText(
                                                                      "Verify this certificate at :",
                                                                      {
                                                                        x: 160,
                                                                        y:
                                                                          height /
                                                                            2 -
                                                                          340,
                                                                        font: helveticaFont,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                        size: 11,
                                                                      }
                                                                    );
                                                                    firstPage.drawText(
                                                                      `https://myvedait.com/verify_cert/` +
                                                                        PersonDetails.certificate,
                                                                      {
                                                                        x: 270,
                                                                        y:
                                                                          height /
                                                                            2 -
                                                                          340,
                                                                        font: helveticaFont1,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                        size: 10,
                                                                      }
                                                                    );
                                                                    // Serialize the PDFDocument to bytes (a Uint8Array)
                                                                    const pdfBytes =
                                                                      await pdfDoc.save();
                                                                    fs.writeFileSync(
                                                                      `./USR_CERT/${
                                                                        course_id +
                                                                        "_" +
                                                                        firstName +
                                                                        "_" +
                                                                        lastName
                                                                      }.pdf`,
                                                                      pdfBytes
                                                                    );
                                                                    fs.writeFileSync(
                                                                      `${filePath}/usr_certificates/${
                                                                        course_id +
                                                                        "_" +
                                                                        firstName +
                                                                        "_" +
                                                                        lastName
                                                                      }.pdf`,
                                                                      pdfBytes
                                                                    );
                                                                    // fs.writeFileSync(
                                                                    //   `${admFilePath}/usr_certificates/${
                                                                    //     course_id +
                                                                    //     "_" +
                                                                    //     firstName +
                                                                    //     "_" +
                                                                    //     lastName
                                                                    //   }.pdf`,
                                                                    //   pdfBytes
                                                                    // );
                                                                    db.query(
                                                                      "UPDATE `myveda-db`.?? SET cert_id = ?,cert_name = ? where uid = ?",
                                                                      [
                                                                        course_id
                                                                          .toLowerCase()
                                                                          .replace(
                                                                            "-",
                                                                            "_"
                                                                          ),
                                                                        PersonDetails.certificate,
                                                                        `${
                                                                          course_id +
                                                                          "_" +
                                                                          firstName +
                                                                          "_" +
                                                                          lastName
                                                                        }.pdf`,
                                                                        uid,
                                                                      ]
                                                                    );

                                                                    db.query(
                                                                      "SELECT * FROM `myveda-db`.user_pass_email_cnf",
                                                                      (
                                                                        err,
                                                                        result
                                                                      ) => {
                                                                        if (
                                                                          err
                                                                        ) {
                                                                          console.log(
                                                                            err
                                                                          );
                                                                        } else {
                                                                          const subject =
                                                                            result[0]
                                                                              .subject;
                                                                          const msg =
                                                                            result[0]
                                                                              .message;
                                                                          const sign =
                                                                            result[0]
                                                                              .signature;
                                                                          // node mailer
                                                                          const output = `

                                    <h3>Dear ${firstName} ${lastName} </h3>
                                    <p>${msg} : ${course_Id}.</p>

                                    <p>
                                    Please find attached certificate for your records.</p>

                                    <p>!!! This is an automatically system generated email ? please do not reply to it.</p>

                                    <p>${sign}</p>

                                    `;

                                                                          db.query(
                                                                            "SELECT * FROM `myveda-db`.email_srv",
                                                                            (
                                                                              err,
                                                                              result
                                                                            ) => {
                                                                              if (
                                                                                err
                                                                              ) {
                                                                                console.log(
                                                                                  err
                                                                                );
                                                                              } else {
                                                                                console.log(
                                                                                  result
                                                                                );
                                                                                let host1 =
                                                                                  result[0]
                                                                                    ?.host;
                                                                                let port1 =
                                                                                  result[0]
                                                                                    ?.port;
                                                                                let user1 =
                                                                                  result[0]
                                                                                    ?.auth_uid;
                                                                                let pass1 =
                                                                                  result[0]
                                                                                    ?.auth_pass;
                                                                                let fromEmail =
                                                                                  result[0]
                                                                                    ?.from_email;
                                                                                let bccEmail =
                                                                                  result[0]
                                                                                    ?.bcc_email;
                                                                                let transporter =
                                                                                  nodemailer.createTransport(
                                                                                    {
                                                                                      host: host1,
                                                                                      port: port1,
                                                                                      secure: true, // true for 465, false for other p orts
                                                                                      auth: {
                                                                                        user: user1, // generated ethereal user
                                                                                        pass: pass1, // generated ethereal password
                                                                                      },
                                                                                    }
                                                                                  );

                                                                                // send mail with defined transport object
                                                                                let info =
                                                                                  transporter.sendMail(
                                                                                    {
                                                                                      from: `"no-reply" ${fromEmail}`, // sender address
                                                                                      to: uid, // list of receivers
                                                                                      subject:
                                                                                        subject, // Subject line
                                                                                      bcc: bccEmail,
                                                                                      html: output, // html body
                                                                                      attachments:
                                                                                        [
                                                                                          {
                                                                                            filename:
                                                                                              "Certificate.pdf",
                                                                                            content:
                                                                                              fs.createReadStream(
                                                                                                `./USR_CERT/${
                                                                                                  course_id +
                                                                                                  "_" +
                                                                                                  firstName +
                                                                                                  "_" +
                                                                                                  lastName
                                                                                                }.pdf`,
                                                                                                pdfBytes
                                                                                              ),
                                                                                          },
                                                                                        ],
                                                                                    }
                                                                                  );

                                                                                console.log(
                                                                                  "Message sent: %s",
                                                                                  info.messageId
                                                                                );
                                                                                console.log(
                                                                                  "Preview URL: %s",
                                                                                  nodemailer.getTestMessageUrl(
                                                                                    info
                                                                                  )
                                                                                );
                                                                              }
                                                                            }
                                                                          );
                                                                        }
                                                                      }
                                                                    );
                                                                  }
                                                                );
                                                              }
                                                            }
                                                          );
                                                        }
                                                      }
                                                    );
                                                  }
                                                }
                                              );
                                            }
                                          }
                                        );
                                      } else {
                                        db.query(
                                          "UPDATE `myveda-db`.?? SET stats_apt1 = ?,eval_date_orq_apt1 = ? WHERE uid = ?",
                                          [tableName, "FAIL", today, uid],
                                          (errT, resultT) => {
                                            if (err) {
                                              console.log(errT);
                                            } else {
                                              console.log(resultT);
                                              res.send(resultT);
                                              db.query(
                                                "SELECT * FROM `myveda-db`.user_fail_email_cnf",
                                                (err, result) => {
                                                  if (err) {
                                                    console.log(err);
                                                  } else {
                                                    const subject =
                                                      result[0].subject;
                                                    const msg =
                                                      result[0].message;
                                                    const sign =
                                                      result[0].signature;
                                                    // node mailer
                                                    const output = `

                <h3>Dear ${firstName} ${lastName} </h3>
                <p>${msg} : ${course_id}.</p>

                <table>
                <thead>
                <tr>
                <th>
                Attempt
                </th>
                <th>TFQs</th>
                <th>SCQs</th>
                <th>ORQs</th>
                <th>Total %</th>
                <th>Result</th>
                </tr>
                </thead>
                <tbody>
                <tr>
                <td>
                  1
                </td>
                <td>${result1[0].tfq_sc_apt1}</td>
                <td>${result1[0].scq_sc_apt1}</td>
                <td>${result1[0].orq_sc_apt1}</td>
                <td>${result1[0].percent_apt1}</td>
                <td>Failed</td>
                </tr>
                </tbody>
                </table>

                <p>!!! This is an automatically system generated email ? please do not reply to it.</p>

                <p>${sign}</p>

                `;

                                                    db.query(
                                                      "SELECT * FROM `myveda-db`.email_srv",
                                                      (err, result) => {
                                                        if (err) {
                                                          console.log(err);
                                                        } else {
                                                          console.log(result);
                                                          let host1 =
                                                            result[0]?.host;
                                                          let port1 =
                                                            result[0]?.port;
                                                          let user1 =
                                                            result[0]?.auth_uid;
                                                          let pass1 =
                                                            result[0]
                                                              ?.auth_pass;
                                                          let fromEmail =
                                                            result[0]
                                                              ?.from_email;
                                                          let bccEmail =
                                                            result[0]
                                                              ?.bcc_email;
                                                          let transporter =
                                                            nodemailer.createTransport(
                                                              {
                                                                host: host1,
                                                                port: port1,
                                                                secure: true, // true for 465, false for other p orts
                                                                auth: {
                                                                  user: user1, // generated ethereal user
                                                                  pass: pass1, // generated ethereal password
                                                                },
                                                              }
                                                            );

                                                          // send mail with defined transport object
                                                          let info =
                                                            transporter.sendMail(
                                                              {
                                                                from: `"no-reply" ${fromEmail}`, // sender address
                                                                to: uid, // list of receivers
                                                                subject:
                                                                  subject +
                                                                  "  " +
                                                                  course_id, // Subject line
                                                                bcc: bccEmail,
                                                                html: output, // html body
                                                              }
                                                            );
                                                        }
                                                      }
                                                    );
                                                  }
                                                }
                                              );
                                            }
                                          }
                                        );
                                      }
                                    }
                                  }
                                );
                              }
                            }
                          );
                        }
                      }
                    );
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});

//send orqs score attempt 2 evaluate via evaluator
app.put("/updateorqscore2", (req, res) => {
  const course_id = req.body.courseId;
  const custID = req.body.custID;
  const uid = req.body.uid;
  const orqsMarks = req.body.orqsMarks;
  const firstName = req.body.firstName;
  const lastName = req.body.lastName;

  const tableName = course_id.toLowerCase().replace("-", "_");

  const date = new Date();
  var today = new Date();
  var dd = String(today.getDate()).padStart(2, "0");
  var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
  var yyyy = today.getFullYear();

  today = dd + "/" + mm + "/" + yyyy;

  db.query(
    "UPDATE `myveda-db`.?? set orq_sc_apt2 = ? where uid = ?",
    [tableName, orqsMarks, uid],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        console.log(result);
      }
    }
  );
  var tot_score = "";
  db.query(
    `UPDATE \`myveda-db\`.?? T1
    JOIN (
      SELECT id, SUM(tfq_sc_apt2 + scq_sc_apt2 + orq_sc_apt2) AS newtable
      FROM \`myveda-db\`.??
      WHERE uid = ?
      GROUP BY id
    ) T2 ON T1.id = T2.id
    SET T1.tot_sc_apt2 = T2.newtable; SET T1.tot_sc_apt3 = T2.newtable;
    `,
    [tableName, tableName, uid],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        db.query(
          "SELECT * from `myveda-db`.?? where uid = ?",
          [tableName, uid],
          (err1, result1) => {
            if (err1) {
              console.log(err1);
            } else {
              tot_score = result1[0].tot_sc_apt2;
              db.query(
                "SELECT tt_marks from `myveda-db`.dfn_per_ques_mrks",
                (errM, resultM) => {
                  if (errM) console.log(errM);
                  else {
                    let tt_marks = resultM[0].tt_marks;
                    console.log(tt_marks);
                    db.query(
                      "SELECT tot_sc_apt2 from `myveda-db`.?? where uid = ?",
                      [tableName, uid],
                      (err, result) => {
                        if (err) console.log(err);
                        else {
                          // let tot_sc = result[0].tot_sc_apt2;
                          // console.log(tot_sc + "total score");
                          let tot_marks =
                            (parseInt(tot_score) / tt_marks) * 100;
                          console.log(tot_marks);
                          console.log(Math.round(tot_marks) + "total marks");

                          const total = Math.round(tot_marks);
                          const totalMarks = parseInt(total);
                          console.log(totalMarks);

                          db.query(
                            "SELECT * FROM `myveda-db`.customer_reg where businessMail = ?",
                            [uid],
                            (errUser, resultUser) => {
                              if (errUser) console.log(errUser);
                              else {
                                let reg_date_user = resultUser[0].req_date;
                                db.query(
                                  "UPDATE `myveda-db`.?? SET percent_apt2 = ? WHERE uid = ?",
                                  [tableName, total, uid],
                                  (errP, resultP) => {
                                    if (errP) console.log(errP);
                                    else {
                                      if (totalMarks > 59) {
                                        db.query(
                                          "UPDATE `myveda-db`.?? SET stats_apt2 = ?,eval_date_orq_apt2 = ? WHERE uid = ?",
                                          [tableName, "PASS", today, uid],
                                          (errT, resultT) => {
                                            if (err) {
                                              console.log(errT);
                                            } else {
                                              console.log(resultT);
                                              db.query(
                                                "SELECT * FROM `myveda-db`.cert_info",
                                                (err, result) => {
                                                  if (err) {
                                                    console.log(err);
                                                  } else {
                                                    res.send(result);
                                                    let address1 =
                                                      result[0]?.address;
                                                    let email1 =
                                                      result[0]?.email;
                                                    let website1 =
                                                      result[0]?.website;
                                                    console.log(address1);

                                                    db.query(
                                                      "SELECT * FROM `myveda-db`.add_courses where course_id = ?",
                                                      [course_id],
                                                      (error, result1) => {
                                                        if (err) {
                                                          console.log(err);
                                                        } else {
                                                          // console.log(result1)

                                                          let course_duration =
                                                            result1[0]
                                                              ?.duration;

                                                          let course_title =
                                                            result1[0]
                                                              ?.course_ttl;
                                                          let start_Date1 =
                                                            result1[0]
                                                              ?.start_dt; //you want copy?ss// now check>?>

                                                          let end_Date1 =
                                                            result1[0]?.end_dt;
                                                          let course_Id =
                                                            result1[0]
                                                              ?.course_id;
                                                          let course_Type =
                                                            result1[0]
                                                              ?.course_category;
                                                          db.query(
                                                            "SELECT * FROM `myveda-db`.upld_logo",
                                                            async (
                                                              err,
                                                              result3
                                                            ) => {
                                                              if (err) {
                                                                console.log(
                                                                  err
                                                                );
                                                              } else {
                                                                let comp_logo1 =
                                                                  result3[0]
                                                                    ?.comp_logo; //this is image
                                                                let pro_logo1 =
                                                                  result3[0]
                                                                    ?.pro_logo;
                                                                let cust_logo1 =
                                                                  result3[0]
                                                                    ?.cust_logo;
                                                                let i =
                                                                  Math.floor(
                                                                    Math.random() *
                                                                      (max -
                                                                        min +
                                                                        1)
                                                                  ) + min;

                                                                const PersonDetails =
                                                                  {
                                                                    courseTitle: `${course_title}`,
                                                                    startDate: `${
                                                                      course_duration +
                                                                      " Days"
                                                                    }`,
                                                                    endDate: `${today}`,
                                                                    course: `${course_Id}`,

                                                                    logo: `${comp_logo1}`,
                                                                    prodLogo: `${pro_logo1}`,

                                                                    name:
                                                                      `${firstName}` +
                                                                      " " +
                                                                      `${lastName}`,
                                                                    certificate:
                                                                      `${custID}` +
                                                                      `${i}`,
                                                                    address: `${address1}`,
                                                                    email: `${email1}`,
                                                                    website: `${website1}`,
                                                                  };

                                                                fs.readFile(
                                                                  "./assets/mastercert.pdf",
                                                                  async function (
                                                                    err,
                                                                    data
                                                                  ) {
                                                                    // Display the file content
                                                                    const ab =
                                                                      new ArrayBuffer(
                                                                        data.length
                                                                      );
                                                                    const view =
                                                                      new Uint8Array(
                                                                        ab
                                                                      );
                                                                    for (
                                                                      let i = 0;
                                                                      i <
                                                                      data.length;
                                                                      ++i
                                                                    ) {
                                                                      view[i] =
                                                                        data[i];
                                                                    }
                                                                    const pdfDoc =
                                                                      await PDFDocument.load(
                                                                        ab
                                                                      );
                                                                    const helveticaFont =
                                                                      await pdfDoc.embedFont(
                                                                        StandardFonts.TimesRomanItalic
                                                                      );
                                                                    const helveticaFont1 =
                                                                      await pdfDoc.embedFont(
                                                                        StandardFonts.CourierBold
                                                                      );
                                                                    const pngImage =
                                                                      await pdfDoc.embedPng(
                                                                        PersonDetails.logo
                                                                      );
                                                                    const productLogo =
                                                                      await pdfDoc.embedPng(
                                                                        PersonDetails.prodLogo
                                                                      );

                                                                    // Get the first page of the documentn
                                                                    const pages =
                                                                      pdfDoc.getPages();
                                                                    const firstPage =
                                                                      pages[0];

                                                                    const {
                                                                      width,
                                                                      height,
                                                                    } =
                                                                      firstPage.getSize();

                                                                    // Draw a string of text diagonally across the first page

                                                                    // course Title

                                                                    const centerTextXCourseTitle =
                                                                      (width -
                                                                        helveticaFont1.widthOfTextAtSize(
                                                                          PersonDetails.courseTitle,
                                                                          25
                                                                        )) /
                                                                      2;

                                                                    // Draw the course title centered on the X-axis
                                                                    firstPage.drawText(
                                                                      PersonDetails.courseTitle,
                                                                      {
                                                                        x: centerTextXCourseTitle,
                                                                        y:
                                                                          height /
                                                                          2,
                                                                        font: helveticaFont1,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                        size: 24,
                                                                      }
                                                                    );

                                                                    //Course Title
                                                                    // firstPage.drawText(
                                                                    //   PersonDetails.courseType,
                                                                    //   {
                                                                    //     x: 200,
                                                                    //     y: height / 2 + 30,
                                                                    //     font: helveticaFont1,
                                                                    //     color: rgb(
                                                                    //       0.95,
                                                                    //       0.1,
                                                                    //       0.1
                                                                    //     ),
                                                                    //     size: 36,
                                                                    //   }
                                                                    // ); //course type
                                                                    firstPage.drawImage(
                                                                      pngImage,
                                                                      {
                                                                        x: 120,
                                                                        y:
                                                                          height /
                                                                            2 -
                                                                          190,
                                                                        width: 120,
                                                                        height: 50,
                                                                      }
                                                                    ); //logo
                                                                    //logo
                                                                    //logo
                                                                    // Calculate the X position to center the user name
                                                                    const centerNameX =
                                                                      (width -
                                                                        helveticaFont1.widthOfTextAtSize(
                                                                          PersonDetails.name,
                                                                          20
                                                                        )) /
                                                                      2;

                                                                    // Draw the user name centered on the X-axis
                                                                    firstPage.drawText(
                                                                      PersonDetails.name,
                                                                      {
                                                                        x: centerNameX,
                                                                        y:
                                                                          height /
                                                                            2 +
                                                                          110,
                                                                        font: helveticaFont1,
                                                                        size: 20,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                      }
                                                                    );
                                                                    //User Name
                                                                    firstPage.drawText(
                                                                      PersonDetails.certificate,
                                                                      {
                                                                        x:
                                                                          width /
                                                                            2 +
                                                                          106,
                                                                        //(width - textWidth) / 3.1
                                                                        y:
                                                                          height /
                                                                            2 -
                                                                          55,
                                                                        font: helveticaFont,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                        size: 12,
                                                                      }
                                                                    ); //Certificate Name
                                                                    firstPage.drawText(
                                                                      PersonDetails.course,
                                                                      {
                                                                        x:
                                                                          width /
                                                                            2 +
                                                                          106,
                                                                        y:
                                                                          height /
                                                                            2 -
                                                                          80,
                                                                        font: helveticaFont,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                        size: 12,
                                                                      }
                                                                    ); //Course Name
                                                                    firstPage.drawText(
                                                                      PersonDetails.startDate,
                                                                      {
                                                                        x:
                                                                          width /
                                                                            2 +
                                                                          106,
                                                                        y:
                                                                          height /
                                                                            2 -
                                                                          108,
                                                                        font: helveticaFont,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                        size: 12,
                                                                      }
                                                                    ); //Start Date
                                                                    firstPage.drawText(
                                                                      PersonDetails.endDate,
                                                                      {
                                                                        x:
                                                                          width /
                                                                            2 +
                                                                          106,
                                                                        y:
                                                                          height /
                                                                            2 -
                                                                          138,
                                                                        font: helveticaFont,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                        size: 12,
                                                                      }
                                                                    ); //End Date
                                                                    //address
                                                                    //
                                                                    //  number
                                                                    firstPage.drawText(
                                                                      PersonDetails.email,
                                                                      {
                                                                        x: 155,
                                                                        y:
                                                                          height /
                                                                            2 -
                                                                          224,
                                                                        font: helveticaFont1,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                        size: 10,
                                                                      }
                                                                    );
                                                                    firstPage.drawText(
                                                                      PersonDetails.website,
                                                                      {
                                                                        x: 340,
                                                                        y:
                                                                          height /
                                                                            2 -
                                                                          224,
                                                                        font: helveticaFont1,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                        size: 10,
                                                                      }
                                                                    ); //website

                                                                    firstPage.drawText(
                                                                      "Verify this certificate at :",
                                                                      {
                                                                        x: 160,
                                                                        y:
                                                                          height /
                                                                            2 -
                                                                          340,
                                                                        font: helveticaFont,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                        size: 11,
                                                                      }
                                                                    );
                                                                    firstPage.drawText(
                                                                      `https://myvedait.com/verify_cert/` +
                                                                        PersonDetails.certificate,
                                                                      {
                                                                        x: 270,
                                                                        y:
                                                                          height /
                                                                            2 -
                                                                          340,
                                                                        font: helveticaFont1,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                        size: 10,
                                                                      }
                                                                    );
                                                                    // Serialize the PDFDocument to bytes (a Uint8Array)
                                                                    const pdfBytes =
                                                                      await pdfDoc.save();
                                                                    fs.writeFileSync(
                                                                      `./USR_CERT/${
                                                                        course_id +
                                                                        "_" +
                                                                        firstName +
                                                                        "_" +
                                                                        lastName
                                                                      }.pdf`,
                                                                      pdfBytes
                                                                    );

                                                                    fs.writeFileSync(
                                                                      `${filePath}/usr_certificates/${
                                                                        course_id +
                                                                        "_" +
                                                                        firstName +
                                                                        "_" +
                                                                        lastName
                                                                      }.pdf`,
                                                                      pdfBytes
                                                                    );
                                                                    // fs.writeFileSync(
                                                                    //   `${admFilePath}/usr_certificates/${
                                                                    //     course_id +
                                                                    //     "_" +
                                                                    //     firstName +
                                                                    //     "_" +
                                                                    //     lastName
                                                                    //   }.pdf`,
                                                                    //   pdfBytes
                                                                    // );
                                                                    db.query(
                                                                      "UPDATE `myveda-db`.?? SET cert_id = ?,cert_name = ? where uid = ?",
                                                                      [
                                                                        course_id,
                                                                        PersonDetails.certificate,
                                                                        `${
                                                                          course_id +
                                                                          "_" +
                                                                          firstName +
                                                                          "_" +
                                                                          lastName
                                                                        }.pdf`,
                                                                        uid,
                                                                      ]
                                                                    );

                                                                    db.query(
                                                                      "SELECT * FROM `myveda-db`.user_pass_email_cnf",
                                                                      (
                                                                        err,
                                                                        result
                                                                      ) => {
                                                                        if (
                                                                          err
                                                                        ) {
                                                                          console.log(
                                                                            err
                                                                          );
                                                                        } else {
                                                                          const subject =
                                                                            result[0]
                                                                              .subject;
                                                                          const msg =
                                                                            result[0]
                                                                              .message;
                                                                          const sign =
                                                                            result[0]
                                                                              .signature;
                                                                          // node mailer
                                                                          const output = `
                                 
                                            <h3>Dear ${firstName} ${lastName} </h3>
                                            <p>${msg} : ${course_Id}.</p>
                                            
                                        
                                            <p>
                                            Please find attached certificate for your records.</p>
              
                                            
                                            <p>!!! This is an automatically system generated email ? please do not reply to it.</p>
                                
              
                                            <p>${sign}</p>
                                
                                            `;

                                                                          db.query(
                                                                            "SELECT * FROM `myveda-db`.email_srv",
                                                                            (
                                                                              err,
                                                                              result
                                                                            ) => {
                                                                              if (
                                                                                err
                                                                              ) {
                                                                                console.log(
                                                                                  err
                                                                                );
                                                                              } else {
                                                                                console.log(
                                                                                  result
                                                                                );
                                                                                let host1 =
                                                                                  result[0]
                                                                                    ?.host;
                                                                                let port1 =
                                                                                  result[0]
                                                                                    ?.port;
                                                                                let user1 =
                                                                                  result[0]
                                                                                    ?.auth_uid;
                                                                                let pass1 =
                                                                                  result[0]
                                                                                    ?.auth_pass;
                                                                                let fromEmail =
                                                                                  result[0]
                                                                                    ?.from_email;
                                                                                let bccEmail =
                                                                                  result[0]
                                                                                    ?.bcc_email;
                                                                                let transporter =
                                                                                  nodemailer.createTransport(
                                                                                    {
                                                                                      host: host1,
                                                                                      port: port1,
                                                                                      secure: true, // true for 465, false for other p orts
                                                                                      auth: {
                                                                                        user: user1, // generated ethereal user
                                                                                        pass: pass1, // generated ethereal password
                                                                                      },
                                                                                    }
                                                                                  );

                                                                                // send mail with defined transport object
                                                                                let info =
                                                                                  transporter.sendMail(
                                                                                    {
                                                                                      from: `"no-reply" ${fromEmail}`, // sender address
                                                                                      to: uid, // list of receivers
                                                                                      subject:
                                                                                        subject, // Subject line
                                                                                      bcc: bccEmail,
                                                                                      html: output, // html body
                                                                                      attachments:
                                                                                        [
                                                                                          {
                                                                                            filename:
                                                                                              "Certificate.pdf",
                                                                                            content:
                                                                                              fs.createReadStream(
                                                                                                `./USR_CERT/${
                                                                                                  course_id +
                                                                                                  "_" +
                                                                                                  firstName +
                                                                                                  "_" +
                                                                                                  lastName
                                                                                                }.pdf`,
                                                                                                pdfBytes
                                                                                              ),
                                                                                          },
                                                                                        ],
                                                                                    }
                                                                                  );

                                                                                console.log(
                                                                                  "Message sent: %s",
                                                                                  info.messageId
                                                                                );
                                                                                console.log(
                                                                                  "Preview URL: %s",
                                                                                  nodemailer.getTestMessageUrl(
                                                                                    info
                                                                                  )
                                                                                );
                                                                              }
                                                                            }
                                                                          );
                                                                        }
                                                                      }
                                                                    );
                                                                  }
                                                                );
                                                              }
                                                            }
                                                          );
                                                        }
                                                      }
                                                    );
                                                  }
                                                }
                                              );
                                            }
                                          }
                                        );
                                      } else {
                                        db.query(
                                          "UPDATE `myveda-db`.?? SET stats_apt2 = ?,eval_date_orq_apt2 = ? WHERE uid = ?",
                                          [tableName, "FAIL", today, uid],
                                          (errT, resultT) => {
                                            if (err) {
                                              console.log(errT);
                                            } else {
                                              console.log(resultT);
                                              db.query(
                                                "SELECT * FROM `myveda-db`.user_fail_email_cnf",
                                                (err, result) => {
                                                  if (err) {
                                                    console.log(err);
                                                  } else {
                                                    const subject =
                                                      result[0].subject;
                                                    const msg =
                                                      result[0].message;
                                                    const sign =
                                                      result[0].signature;
                                                    // node mailer
                                                    const output = `
              
                        <h3>Dear ${firstName} ${lastName} </h3>
                        <p>${msg} : ${course_id}.</p>
                        
                    
                        <table>
                        <thead>
                        <tr>
                        <th>
                        Attempt
                        </th>
                        <th>TFQs</th>
                        <th>SCQs</th>
                        <th>ORQs</th>
                        <th>Total %</th>
                        <th>Result</th>
                        </tr>
                        </thead>
                        <tbody>
                        <tr>
                        <td>
                          2
                        </td>
                        <td>${result1[0].tfq_sc_apt2}</td>
                        <td>${result1[0].scq_sc_apt2}</td>
                        <td>${result1[0].orq_sc_apt2}</td>
                        <td>${result1[0].percent_apt2}</td>
                        <td>Failed</td>
                        </tr>
                        </tbody>
                        </table>
              
                        
                        <p>!!! This is an automatically system generated email ? please do not reply to it.</p>
              
                        <p>${sign}</p>
              
                        `;

                                                    db.query(
                                                      "SELECT * FROM `myveda-db`.email_srv",
                                                      (err, result) => {
                                                        if (err) {
                                                          console.log(err);
                                                        } else {
                                                          console.log(result);
                                                          let host1 =
                                                            result[0]?.host;
                                                          let port1 =
                                                            result[0]?.port;
                                                          let user1 =
                                                            result[0]?.auth_uid;
                                                          let pass1 =
                                                            result[0]
                                                              ?.auth_pass;
                                                          let fromEmail =
                                                            result[0]
                                                              ?.from_email;
                                                          let bccEmail =
                                                            result[0]
                                                              ?.bcc_email;
                                                          let transporter =
                                                            nodemailer.createTransport(
                                                              {
                                                                host: host1,
                                                                port: port1,
                                                                secure: true, // true for 465, false for other p orts
                                                                auth: {
                                                                  user: user1, // generated ethereal user
                                                                  pass: pass1, // generated ethereal password
                                                                },
                                                              }
                                                            );

                                                          // send mail with defined transport object
                                                          let info =
                                                            transporter.sendMail(
                                                              {
                                                                from: `"no-reply" ${fromEmail}`, // sender address
                                                                to: uid, // list of receivers
                                                                subject:
                                                                  subject +
                                                                  "  " +
                                                                  course_id, // Subject line
                                                                bcc: bccEmail,
                                                                html: output, // html body
                                                              }
                                                            );
                                                        }
                                                      }
                                                    );
                                                  }
                                                }
                                              );
                                            }
                                          }
                                        );
                                      }
                                    }
                                  }
                                );
                              }
                            }
                          );
                        }
                      }
                    );
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});
//send orps score attempt 3 evaluate via evaluator
app.put("/updateorqscore3", (req, res) => {
  const course_id = req.body.courseId;
  const custID = req.body.custID;
  const uid = req.body.uid;
  const orqsMarks = req.body.orqsMarks;
  const firstName = req.body.firstName;
  const lastName = req.body.lastName;
  const tableName = course_id.toLowerCase().replace("-", "_");

  var today = new Date();
  var dd = String(today.getDate()).padStart(2, "0");
  var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
  var yyyy = today.getFullYear();

  today = dd + "/" + mm + "/" + yyyy;

  db.query(
    "UPDATE `myveda-db`.?? set orq_sc_apt3 = ? where uid = ?",
    [tableName, orqsMarks, uid],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        console.log(result);
      }
    }
  );
  var tot_score = "";
  db.query(
    `UPDATE \`myveda-db\`.?? T1
    JOIN (
      SELECT id, SUM(tfq_sc_apt3 + scq_sc_apt3 + orq_sc_apt3) AS newtable
      FROM \`myveda-db\`.??
      WHERE uid = ?
      GROUP BY id
    ) T2 ON T1.id = T2.id
    SET T1.tot_sc_apt3 = T2.newtable;
    `,
    [tableName, tableName, uid],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        db.query(
          "SELECT * from `myveda-db`.?? where uid = ?",
          [tableName, uid],
          (err1, result1) => {
            if (err1) console.log(err1);
            else {
              tot_score = result1[0].tot_sc_apt3;
              db.query(
                "SELECT tt_marks from `myveda-db`.dfn_per_ques_mrks",
                (errM, resultM) => {
                  if (errM) console.log(errM);
                  else {
                    let tt_marks = resultM[0].tt_marks;
                    console.log(tt_marks);
                    db.query(
                      "SELECT tot_sc_apt3 from `myveda-db`.?? where uid = ?",
                      [tableName, uid],
                      (err, result) => {
                        if (err) console.log(err);
                        else {
                          // let tot_sc = result[0].tot_sc_apt3;
                          // console.log(tot_sc + "total score");
                          let tot_marks =
                            (parseInt(tot_score) / tt_marks) * 100;
                          console.log(Math.round(tot_marks) + "total marks");

                          const total = Math.round(tot_marks);
                          const totalMarks = parseInt(total);
                          console.log(totalMarks);

                          db.query(
                            "SELECT * FROM `myveda-db`.customer_reg where businessMail = ?",
                            [uid],
                            (errUser, resultUser) => {
                              if (errUser) console.log(errUser);
                              else {
                                let reg_date_user = resultUser[0].req_date;
                                db.query(
                                  "UPDATE `myveda-db`.?? SET percent_apt3 = ? WHERE uid = ?",
                                  [tableName, total, uid],
                                  (errP, resultP) => {
                                    if (errP) console.log(errP);
                                    else {
                                      if (totalMarks > 59) {
                                        db.query(
                                          "UPDATE `myveda-db`.?? SET stats_apt3 = ?,eval_date_orq_apt3 = ?  WHERE uid = ?",
                                          [tableName, "PASS", today, uid],
                                          (errT, resultT) => {
                                            if (err) {
                                              console.log(errT);
                                            } else {
                                              console.log(resultT);
                                              db.query(
                                                "SELECT * FROM `myveda-db`.cert_info",
                                                (err, result) => {
                                                  if (err) {
                                                    console.log(err);
                                                  } else {
                                                    res.send(result);
                                                    let address1 =
                                                      result[0]?.address;
                                                    let email1 =
                                                      result[0]?.email;
                                                    let website1 =
                                                      result[0]?.website;
                                                    console.log(address1);

                                                    db.query(
                                                      "SELECT * FROM `myveda-db`.add_courses where course_id = ?",
                                                      [course_id],
                                                      (error, result1) => {
                                                        if (err) {
                                                          console.log(err);
                                                        } else {
                                                          // console.log(result1)

                                                          let course_duration =
                                                            result1[0]
                                                              ?.duration;
                                                          let course_title =
                                                            result1[0]
                                                              ?.course_ttl;
                                                          let start_Date1 =
                                                            result1[0]
                                                              ?.start_dt; //you want copy?ss// now check>?>

                                                          let end_Date1 =
                                                            result1[0]?.end_dt;
                                                          let course_Id =
                                                            result1[0]
                                                              ?.course_id;
                                                          let course_Type =
                                                            result1[0]
                                                              ?.course_category;
                                                          db.query(
                                                            "SELECT * FROM `myveda-db`.upld_logo",
                                                            async (
                                                              err,
                                                              result3
                                                            ) => {
                                                              if (err) {
                                                                console.log(
                                                                  err
                                                                );
                                                              } else {
                                                                let comp_logo1 =
                                                                  result3[0]
                                                                    ?.comp_logo; //this is image
                                                                let pro_logo1 =
                                                                  result3[0]
                                                                    ?.pro_logo;
                                                                let cust_logo1 =
                                                                  result3[0]
                                                                    ?.cust_logo;
                                                                let i =
                                                                  Math.floor(
                                                                    Math.random() *
                                                                      (max -
                                                                        min +
                                                                        1)
                                                                  ) + min;

                                                                const PersonDetails =
                                                                  {
                                                                    courseTitle: `${course_title}`,
                                                                    startDate: `${
                                                                      course_duration +
                                                                      " Days"
                                                                    }`,
                                                                    endDate: `${today}`,
                                                                    course: `${course_Id}`,

                                                                    logo: `${comp_logo1}`,
                                                                    prodLogo: `${pro_logo1}`,

                                                                    name:
                                                                      `${firstName}` +
                                                                      " " +
                                                                      `${lastName}`,
                                                                    certificate:
                                                                      `${custID}` +
                                                                      `${i}`,
                                                                    address: `${address1}`,
                                                                    email: `${email1}`,
                                                                    website: `${website1}`,
                                                                  };

                                                                fs.readFile(
                                                                  "./assets/mastercert.pdf",
                                                                  async function (
                                                                    err,
                                                                    data
                                                                  ) {
                                                                    // Display the file content
                                                                    const ab =
                                                                      new ArrayBuffer(
                                                                        data.length
                                                                      );
                                                                    const view =
                                                                      new Uint8Array(
                                                                        ab
                                                                      );
                                                                    for (
                                                                      let i = 0;
                                                                      i <
                                                                      data.length;
                                                                      ++i
                                                                    ) {
                                                                      view[i] =
                                                                        data[i];
                                                                    }
                                                                    const pdfDoc =
                                                                      await PDFDocument.load(
                                                                        ab
                                                                      );
                                                                    const helveticaFont =
                                                                      await pdfDoc.embedFont(
                                                                        StandardFonts.TimesRomanItalic
                                                                      );
                                                                    const helveticaFont1 =
                                                                      await pdfDoc.embedFont(
                                                                        StandardFonts.CourierBold
                                                                      );
                                                                    const pngImage =
                                                                      await pdfDoc.embedPng(
                                                                        PersonDetails.logo
                                                                      );
                                                                    const productLogo =
                                                                      await pdfDoc.embedPng(
                                                                        PersonDetails.prodLogo
                                                                      );

                                                                    // Get the first page of the documentn
                                                                    const pages =
                                                                      pdfDoc.getPages();
                                                                    const firstPage =
                                                                      pages[0];

                                                                    const {
                                                                      width,
                                                                      height,
                                                                    } =
                                                                      firstPage.getSize();

                                                                    // Draw a string of text diagonally across the first page

                                                                    // course Title

                                                                    const centerTextXCourseTitle =
                                                                      (width -
                                                                        helveticaFont1.widthOfTextAtSize(
                                                                          PersonDetails.courseTitle,
                                                                          25
                                                                        )) /
                                                                      2;

                                                                    // Draw the course title centered on the X-axis
                                                                    firstPage.drawText(
                                                                      PersonDetails.courseTitle,
                                                                      {
                                                                        x: centerTextXCourseTitle,
                                                                        y:
                                                                          height /
                                                                          2,
                                                                        font: helveticaFont1,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                        size: 24,
                                                                      }
                                                                    );

                                                                    //Course Title
                                                                    // firstPage.drawText(
                                                                    //   PersonDetails.courseType,
                                                                    //   {
                                                                    //     x: 200,
                                                                    //     y: height / 2 + 30,
                                                                    //     font: helveticaFont1,
                                                                    //     color: rgb(
                                                                    //       0.95,
                                                                    //       0.1,
                                                                    //       0.1
                                                                    //     ),
                                                                    //     size: 36,
                                                                    //   }
                                                                    // ); //course type
                                                                    firstPage.drawImage(
                                                                      pngImage,
                                                                      {
                                                                        x: 120,
                                                                        y:
                                                                          height /
                                                                            2 -
                                                                          190,
                                                                        width: 120,
                                                                        height: 50,
                                                                      }
                                                                    ); //logo
                                                                    //logo
                                                                    //logo
                                                                    // Calculate the X position to center the user name
                                                                    const centerNameX =
                                                                      (width -
                                                                        helveticaFont1.widthOfTextAtSize(
                                                                          PersonDetails.name,
                                                                          20
                                                                        )) /
                                                                      2;

                                                                    // Draw the user name centered on the X-axis
                                                                    firstPage.drawText(
                                                                      PersonDetails.name,
                                                                      {
                                                                        x: centerNameX,
                                                                        y:
                                                                          height /
                                                                            2 +
                                                                          110,
                                                                        font: helveticaFont1,
                                                                        size: 20,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                      }
                                                                    );
                                                                    //User Name
                                                                    firstPage.drawText(
                                                                      PersonDetails.certificate,
                                                                      {
                                                                        x:
                                                                          width /
                                                                            2 +
                                                                          106,
                                                                        //(width - textWidth) / 3.1
                                                                        y:
                                                                          height /
                                                                            2 -
                                                                          55,
                                                                        font: helveticaFont,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                        size: 12,
                                                                      }
                                                                    ); //Certificate Name
                                                                    firstPage.drawText(
                                                                      PersonDetails.course,
                                                                      {
                                                                        x:
                                                                          width /
                                                                            2 +
                                                                          106,
                                                                        y:
                                                                          height /
                                                                            2 -
                                                                          80,
                                                                        font: helveticaFont,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                        size: 12,
                                                                      }
                                                                    ); //Course Name
                                                                    firstPage.drawText(
                                                                      PersonDetails.startDate,
                                                                      {
                                                                        x:
                                                                          width /
                                                                            2 +
                                                                          106,
                                                                        y:
                                                                          height /
                                                                            2 -
                                                                          108,
                                                                        font: helveticaFont,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                        size: 12,
                                                                      }
                                                                    ); //Start Date
                                                                    firstPage.drawText(
                                                                      PersonDetails.endDate,
                                                                      {
                                                                        x:
                                                                          width /
                                                                            2 +
                                                                          106,
                                                                        y:
                                                                          height /
                                                                            2 -
                                                                          138,
                                                                        font: helveticaFont,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                        size: 12,
                                                                      }
                                                                    ); //End Date
                                                                    //address
                                                                    //
                                                                    //  number
                                                                    firstPage.drawText(
                                                                      PersonDetails.email,
                                                                      {
                                                                        x: 155,
                                                                        y:
                                                                          height /
                                                                            2 -
                                                                          224,
                                                                        font: helveticaFont1,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                        size: 10,
                                                                      }
                                                                    );
                                                                    firstPage.drawText(
                                                                      PersonDetails.website,
                                                                      {
                                                                        x: 340,
                                                                        y:
                                                                          height /
                                                                            2 -
                                                                          224,
                                                                        font: helveticaFont1,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                        size: 10,
                                                                      }
                                                                    ); //website

                                                                    firstPage.drawText(
                                                                      "Verify this certificate at :",
                                                                      {
                                                                        x: 160,
                                                                        y:
                                                                          height /
                                                                            2 -
                                                                          340,
                                                                        font: helveticaFont,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                        size: 11,
                                                                      }
                                                                    );
                                                                    firstPage.drawText(
                                                                      `https://myvedait.com/verify_cert/` +
                                                                        PersonDetails.certificate,
                                                                      {
                                                                        x: 270,
                                                                        y:
                                                                          height /
                                                                            2 -
                                                                          340,
                                                                        font: helveticaFont1,
                                                                        color:
                                                                          rgb(
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ),
                                                                        size: 10,
                                                                      }
                                                                    );
                                                                    // Serialize the PDFDocument to bytes (a Uint8Array)
                                                                    const pdfBytes =
                                                                      await pdfDoc.save();
                                                                    fs.writeFileSync(
                                                                      `./USR_CERT/${
                                                                        course_id +
                                                                        "_" +
                                                                        firstName +
                                                                        "_" +
                                                                        lastName
                                                                      }.pdf`,
                                                                      pdfBytes
                                                                    );

                                                                    fs.writeFileSync(
                                                                      `${filePath}/usr_certificates/${
                                                                        course_id +
                                                                        "_" +
                                                                        firstName +
                                                                        "_" +
                                                                        lastName
                                                                      }.pdf`,
                                                                      pdfBytes
                                                                    );
                                                                    fs.writeFileSync(
                                                                      `${admFilePath}/usr_certificates/${
                                                                        course_id +
                                                                        "_" +
                                                                        firstName +
                                                                        "_" +
                                                                        lastName
                                                                      }.pdf`,
                                                                      pdfBytes
                                                                    );
                                                                    db.query(
                                                                      "UPDATE `myveda-db`.?? SET cert_id = ?,cert_name = ? where uid = ?",
                                                                      [
                                                                        course_id,
                                                                        PersonDetails.certificate,
                                                                        `${
                                                                          course_id +
                                                                          "_" +
                                                                          firstName +
                                                                          "_" +
                                                                          lastName
                                                                        }.pdf`,
                                                                        uid,
                                                                      ]
                                                                    );

                                                                    db.query(
                                                                      "SELECT * FROM `myveda-db`.user_pass_email_cnf",
                                                                      (
                                                                        err,
                                                                        result
                                                                      ) => {
                                                                        if (
                                                                          err
                                                                        ) {
                                                                          console.log(
                                                                            err
                                                                          );
                                                                        } else {
                                                                          const subject =
                                                                            result[0]
                                                                              .subject;
                                                                          const msg =
                                                                            result[0]
                                                                              .message;
                                                                          const sign =
                                                                            result[0]
                                                                              .signature;
                                                                          // node mailer
                                                                          const output = `
                                 
                                            <h3>Dear ${firstName} ${lastName} </h3>
                                            <p>${msg} : ${course_Id}.</p>
                                            
                                        
                                            <p>
                                            Please find attached certificate for your records.</p>
              
                                            
                                            <p>!!! This is an automatically system generated email ? please do not reply to it.</p>
                                
              
                                            <p>${sign}</p>
                                
                                            `;

                                                                          db.query(
                                                                            "SELECT * FROM `myveda-db`.email_srv",
                                                                            (
                                                                              err,
                                                                              result
                                                                            ) => {
                                                                              if (
                                                                                err
                                                                              ) {
                                                                                console.log(
                                                                                  err
                                                                                );
                                                                              } else {
                                                                                console.log(
                                                                                  result
                                                                                );
                                                                                let host1 =
                                                                                  result[0]
                                                                                    ?.host;
                                                                                let port1 =
                                                                                  result[0]
                                                                                    ?.port;
                                                                                let user1 =
                                                                                  result[0]
                                                                                    ?.auth_uid;
                                                                                let pass1 =
                                                                                  result[0]
                                                                                    ?.auth_pass;
                                                                                let fromEmail =
                                                                                  result[0]
                                                                                    ?.from_email;
                                                                                let bccEmail =
                                                                                  result[0]
                                                                                    ?.bcc_email;
                                                                                let transporter =
                                                                                  nodemailer.createTransport(
                                                                                    {
                                                                                      host: host1,
                                                                                      port: port1,
                                                                                      secure: true, // true for 465, false for other p orts
                                                                                      auth: {
                                                                                        user: user1, // generated ethereal user
                                                                                        pass: pass1, // generated ethereal password
                                                                                      },
                                                                                    }
                                                                                  );

                                                                                // send mail with defined transport object
                                                                                let info =
                                                                                  transporter.sendMail(
                                                                                    {
                                                                                      from: `"no-reply" ${fromEmail}`, // sender address
                                                                                      to: uid, // list of receivers
                                                                                      subject:
                                                                                        subject, // Subject line
                                                                                      bcc: bccEmail,
                                                                                      html: output, // html body
                                                                                      attachments:
                                                                                        [
                                                                                          {
                                                                                            filename:
                                                                                              "Certificate.pdf",
                                                                                            content:
                                                                                              fs.createReadStream(
                                                                                                `./USR_CERT/${
                                                                                                  course_id +
                                                                                                  "_" +
                                                                                                  firstName +
                                                                                                  "_" +
                                                                                                  lastName
                                                                                                }.pdf`,
                                                                                                pdfBytes
                                                                                              ),
                                                                                          },
                                                                                        ],
                                                                                    }
                                                                                  );

                                                                                console.log(
                                                                                  "Message sent: %s",
                                                                                  info.messageId
                                                                                );
                                                                                console.log(
                                                                                  "Preview URL: %s",
                                                                                  nodemailer.getTestMessageUrl(
                                                                                    info
                                                                                  )
                                                                                );
                                                                              }
                                                                            }
                                                                          );
                                                                        }
                                                                      }
                                                                    );
                                                                  }
                                                                );
                                                              }
                                                            }
                                                          );
                                                        }
                                                      }
                                                    );
                                                  }
                                                }
                                              );
                                            }
                                          }
                                        );
                                      } else {
                                        db.query(
                                          "UPDATE `myveda-db`.?? SET stats_apt3 = ?, eval_date_orq_apt3 = ? WHERE uid = ?",
                                          [tableName, "FAIL", today, uid],
                                          (errT, resultT) => {
                                            if (err) {
                                              console.log(errT);
                                            } else {
                                              console.log(resultT);
                                              db.query(
                                                "SELECT * FROM `myveda-db`.user_fail_email_attempt_3",
                                                (err, result) => {
                                                  if (err) {
                                                    console.log(err);
                                                  } else {
                                                    const subject =
                                                      result[0].subject;
                                                    const msg =
                                                      result[0].message;
                                                    const sign =
                                                      result[0].signature;
                                                    // node mailer
                                                    const output = `
              
                        <h3>Dear ${firstName} ${lastName} </h3>
                        <p>${msg} : ${course_id}.</p>
                        
                    
                        <table>
                <thead>
                <tr>
                <th>
                Attempt
                </th>
                <th>TFQs</th>
                <th>SCQs</th>
                <th>ORQs</th>
                <th>Total %</th>
                <th>Result</th>
                </tr>
                </thead>
                <tbody>
                <tr>
                <td>
                  3
                </td>
                <td>${result1[0].tfq_sc_apt3}</td>
                <td>${result1[0].scq_sc_apt3}</td>
                <td>${result1[0].orq_sc_apt3}</td>
                <td>${result1[0].percent_apt3}</td>
                <td>Failed</td>
                </tr>
                </tbody>
                </table>
                    
              
                        
                        <p>!!! This is an automatically system generated email ? please do not reply to it.</p>
              
                        <p>${sign}</p>
              
                        `;

                                                    db.query(
                                                      "SELECT * FROM `myveda-db`.email_srv",
                                                      (err, result) => {
                                                        if (err) {
                                                          console.log(err);
                                                        } else {
                                                          console.log(result);
                                                          let host1 =
                                                            result[0]?.host;
                                                          let port1 =
                                                            result[0]?.port;
                                                          let user1 =
                                                            result[0]?.auth_uid;
                                                          let pass1 =
                                                            result[0]
                                                              ?.auth_pass;
                                                          let fromEmail =
                                                            result[0]
                                                              ?.from_email;
                                                          let bccEmail =
                                                            result[0]
                                                              ?.bcc_email;
                                                          let transporter =
                                                            nodemailer.createTransport(
                                                              {
                                                                host: host1,
                                                                port: port1,
                                                                secure: true, // true for 465, false for other p orts
                                                                auth: {
                                                                  user: user1, // generated ethereal user
                                                                  pass: pass1, // generated ethereal password
                                                                },
                                                              }
                                                            );

                                                          // send mail with defined transport object
                                                          let info =
                                                            transporter.sendMail(
                                                              {
                                                                from: `"no-reply" ${fromEmail}`, // sender address
                                                                to: uid, // list of receivers
                                                                subject:
                                                                  subject +
                                                                  "  " +
                                                                  course_id, // Subject line
                                                                bcc: bccEmail,
                                                                html: output, // html body
                                                              }
                                                            );
                                                        }
                                                      }
                                                    );
                                                  }
                                                }
                                              );
                                            }
                                          }
                                        );
                                      }
                                    }
                                  }
                                );
                              }
                            }
                          );
                        }
                      }
                    );
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});

// auto evaluate for orqs for me attempt 1
app.put("/api/v1/update/auto/evaluate", (req, res) => {
  const course_id = req.body.courseId;
  const custID = req.body.custId;
  const uid = req.body.uid;
  const tableName = course_id.toLowerCase().replace("-", "_");
  const { cert_id } = req.body;

  console.log(req.body);
  var today = new Date();
  var dd = String(today.getDate()).padStart(2, "0");
  var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
  var yyyy = today.getFullYear();

  today = yyyy + "-" + mm + "-" + dd;

  db.query(
    "SELECT * FROM `myveda-db`.customer_reg where businessMail = ?",
    [uid],
    (errPP, resultPP) => {
      if (errPP) console.log(errPP);
      else {
        console.log(uid);
        console.log(resultPP[0]);
        const firstName = resultPP[0].firstName;
        const lastName = resultPP[0].lastName;
        console.log(firstName, lastName);
        db.query(
          `UPDATE \`myveda-db\`.?? AS T1
          JOIN (
            SELECT id, SUM(tfq_sc_apt1 + scq_sc_apt1) AS newtable
            FROM \`myveda-db\`.??
            WHERE uid = ?
            GROUP BY id
          ) AS T2 ON T1.id = T2.id
          SET T1.tot_sc_apt1 = T2.newtable;`,
          [tableName, tableName, uid],
          (err, result) => {
            if (err) {
              console.log(err);
            } else {
              console.log(result);
              db.query(
                "SELECT * from `myveda-db`.?? where uid = ?",
                [tableName, uid],
                (err1, result1) => {
                  if (err1) console.log(err1);
                  else {
                    tot_score = result1[0].tot_sc_apt1;

                    console.log(tot_score);
                    db.query(
                      "SELECT tt_marks from `myveda-db`.dfn_per_ques_mrks where id = 2",
                      (errM, resultM) => {
                        if (errM) console.log(errM);
                        else {
                          let tt_marks = resultM[0].tt_marks;
                          console.log(tt_marks);
                          db.query(
                            "SELECT tot_sc_apt1 from `myveda-db`.?? where uid = ?",
                            [tableName, uid],
                            (err, result) => {
                              if (err) console.log(err);
                              else {
                                // let tot_sc = result[0].tot_sc_apt1;
                                // console.log(tot_sc + "total score");
                                let tot_marks =
                                  (parseInt(tot_score) / tt_marks) * 100;
                                console.log(
                                  Math.round(tot_marks) + "total marks"
                                );

                                const total = Math.round(tot_marks);
                                const totalMarks = parseInt(total);
                                console.log(totalMarks);

                                db.query(
                                  "SELECT * FROM `myveda-db`.customer_reg where businessMail = ?",
                                  [uid],
                                  (errUser, resultUser) => {
                                    if (errUser) console.log(errUser);
                                    else {
                                      let reg_date_user =
                                        resultUser[0].req_date;
                                      db.query(
                                        "UPDATE `myveda-db`.?? SET percent_apt1 = ? WHERE uid = ?",
                                        [tableName, total, uid],
                                        (errP, resultP) => {
                                          if (errP) console.log(errP);
                                          else {
                                            if (totalMarks > 59) {
                                              db.query(
                                                "UPDATE `myveda-db`.?? SET stats_apt1 = ?,eval_date_orq_apt1 = ? WHERE uid = ?",
                                                [tableName, "PASS", today, uid],
                                                (errT, resultT) => {
                                                  if (err) {
                                                    console.log(errT);
                                                  } else {
                                                    console.log(resultT);
                                                    db.query(
                                                      "SELECT * FROM `myveda-db`.cert_info",
                                                      (err, result) => {
                                                        if (err) {
                                                          console.log(err);
                                                        } else {
                                                          let address1 =
                                                            result[0]?.address;
                                                          let email1 =
                                                            result[0]?.email;
                                                          let website1 =
                                                            result[0]?.website;
                                                          let number =
                                                            result[0]?.number;
                                                          console.log(address1);

                                                          db.query(
                                                            "SELECT * FROM `myveda-db`.add_courses where course_id = ?",
                                                            [course_id],
                                                            (
                                                              error,
                                                              result1
                                                            ) => {
                                                              if (err) {
                                                                console.log(
                                                                  err
                                                                );
                                                              } else {
                                                                // console.log(result1)

                                                                let course_duration =
                                                                  result1[0]
                                                                    ?.duration;

                                                                let course_title =
                                                                  result1[0]
                                                                    ?.course_ttl;
                                                                let start_Date1 =
                                                                  result1[0]
                                                                    ?.start_dt; //you want copy?ss// now check>?>

                                                                let end_Date1 =
                                                                  result1[0]
                                                                    ?.start_dt;
                                                                let course_Id =
                                                                  result1[0]
                                                                    ?.course_id;
                                                                let course_Type =
                                                                  result1[0]
                                                                    ?.course_category;
                                                                db.query(
                                                                  "SELECT * FROM `myveda-db`.upld_logo",
                                                                  async (
                                                                    err,
                                                                    result3
                                                                  ) => {
                                                                    if (err) {
                                                                      console.log(
                                                                        err
                                                                      );
                                                                    } else {
                                                                      let comp_logo1 =
                                                                        result3[0]
                                                                          ?.comp_logo; //this is image
                                                                      let pro_logo1 =
                                                                        result3[0]
                                                                          ?.pro_logo;
                                                                      let cust_logo1 =
                                                                        result3[0]
                                                                          ?.cust_logo;

                                                                      db.query(
                                                                        "SELECT * FROM `myveda-db`.usr_exam_cert where course_id = ? and uid = ?",
                                                                        [
                                                                          course_Id,
                                                                          uid,
                                                                        ],
                                                                        (
                                                                          errCert,
                                                                          resultCert
                                                                        ) => {
                                                                          if (
                                                                            errCert
                                                                          )
                                                                            console.log(
                                                                              errCert
                                                                            );
                                                                          else {
                                                                            if (
                                                                              !resultCert.length
                                                                            ) {
                                                                              db.query(
                                                                                "insert into `myveda-db`.usr_exam_cert (uid,cust_id,cert_id,issue_date,course_id) values(?,?,?,?,?)",
                                                                                [
                                                                                  uid,
                                                                                  custID,
                                                                                  cert_id,
                                                                                  today,
                                                                                  course_id,
                                                                                ]
                                                                              );
                                                                            }
                                                                          }
                                                                        }
                                                                      );

                                                                      const PersonDetails =
                                                                        {
                                                                          courseTitle: `${course_title}`,
                                                                          startDate: `${
                                                                            course_duration +
                                                                            " Days"
                                                                          }`,
                                                                          endDate: `${today}`,
                                                                          course: `${course_Id}`,

                                                                          logo: `${comp_logo1}`,
                                                                          prodLogo: `${pro_logo1}`,

                                                                          name:
                                                                            `${firstName}` +
                                                                            " " +
                                                                            `${lastName}`,
                                                                          certificate: `${cert_id}`,
                                                                          address: `${address1}`,
                                                                          email: `${email1}`,
                                                                          website: `${website1}`,
                                                                          number: `${number}`,
                                                                        };

                                                                      fs.readFile(
                                                                        "./assets/mastercert.pdf",
                                                                        async function (
                                                                          err,
                                                                          data
                                                                        ) {
                                                                          // Display the file content
                                                                          const ab =
                                                                            new ArrayBuffer(
                                                                              data.length
                                                                            );
                                                                          const view =
                                                                            new Uint8Array(
                                                                              ab
                                                                            );
                                                                          for (
                                                                            let i = 0;
                                                                            i <
                                                                            data.length;
                                                                            ++i
                                                                          ) {
                                                                            view[
                                                                              i
                                                                            ] =
                                                                              data[
                                                                                i
                                                                              ];
                                                                          }
                                                                          const pdfDoc =
                                                                            await PDFDocument.load(
                                                                              ab
                                                                            );
                                                                          const helveticaFont =
                                                                            await pdfDoc.embedFont(
                                                                              StandardFonts.TimesRomanItalic
                                                                            );
                                                                          const helveticaFont1 =
                                                                            await pdfDoc.embedFont(
                                                                              StandardFonts.CourierBold
                                                                            );
                                                                          const pngImage =
                                                                            await pdfDoc.embedPng(
                                                                              PersonDetails.logo
                                                                            );
                                                                          const productLogo =
                                                                            await pdfDoc.embedPng(
                                                                              PersonDetails.prodLogo
                                                                            );

                                                                          // Get the first page of the documentn
                                                                          const pages =
                                                                            pdfDoc.getPages();
                                                                          const firstPage =
                                                                            pages[0];

                                                                          const {
                                                                            width,
                                                                            height,
                                                                          } =
                                                                            firstPage.getSize();

                                                                          // Draw a string of text diagonally across the first page

                                                                          // course Title

                                                                          const centerTextXCourseTitle =
                                                                            (width -
                                                                              helveticaFont1.widthOfTextAtSize(
                                                                                PersonDetails.courseTitle,
                                                                                25
                                                                              )) /
                                                                            2;

                                                                          // Draw the course title centered on the X-axis
                                                                          firstPage.drawText(
                                                                            PersonDetails.courseTitle,
                                                                            {
                                                                              x: centerTextXCourseTitle,
                                                                              y:
                                                                                height /
                                                                                2,
                                                                              font: helveticaFont1,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                              size: 24,
                                                                            }
                                                                          );

                                                                          //Course Title
                                                                          // firstPage.drawText(
                                                                          //   PersonDetails.courseType,
                                                                          //   {
                                                                          //     x: 200,
                                                                          //     y: height / 2 + 30,
                                                                          //     font: helveticaFont1,
                                                                          //     color: rgb(
                                                                          //       0.95,
                                                                          //       0.1,
                                                                          //       0.1
                                                                          //     ),
                                                                          //     size: 36,
                                                                          //   }
                                                                          // ); //course type
                                                                          firstPage.drawImage(
                                                                            pngImage,
                                                                            {
                                                                              x: 120,
                                                                              y:
                                                                                height /
                                                                                  2 -
                                                                                190,
                                                                              width: 120,
                                                                              height: 50,
                                                                            }
                                                                          ); //logo
                                                                          //logo
                                                                          //logo
                                                                          // Calculate the X position to center the user name
                                                                          const centerNameX =
                                                                            (width -
                                                                              helveticaFont1.widthOfTextAtSize(
                                                                                PersonDetails.name,
                                                                                20
                                                                              )) /
                                                                            2;

                                                                          // Draw the user name centered on the X-axis
                                                                          firstPage.drawText(
                                                                            PersonDetails.name,
                                                                            {
                                                                              x: centerNameX,
                                                                              y:
                                                                                height /
                                                                                  2 +
                                                                                110,
                                                                              font: helveticaFont1,
                                                                              size: 20,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                            }
                                                                          );
                                                                          //User Name
                                                                          firstPage.drawText(
                                                                            PersonDetails.certificate,
                                                                            {
                                                                              x:
                                                                                width /
                                                                                  2 +
                                                                                106,
                                                                              //(width - textWidth) / 3.1
                                                                              y:
                                                                                height /
                                                                                  2 -
                                                                                55,
                                                                              font: helveticaFont,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                              size: 12,
                                                                            }
                                                                          ); //Certificate Name
                                                                          firstPage.drawText(
                                                                            PersonDetails.course,
                                                                            {
                                                                              x:
                                                                                width /
                                                                                  2 +
                                                                                106,
                                                                              y:
                                                                                height /
                                                                                  2 -
                                                                                80,
                                                                              font: helveticaFont,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                              size: 12,
                                                                            }
                                                                          ); //Course Name
                                                                          firstPage.drawText(
                                                                            PersonDetails.startDate,
                                                                            {
                                                                              x:
                                                                                width /
                                                                                  2 +
                                                                                106,
                                                                              y:
                                                                                height /
                                                                                  2 -
                                                                                108,
                                                                              font: helveticaFont,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                              size: 12,
                                                                            }
                                                                          ); //Start Date
                                                                          firstPage.drawText(
                                                                            PersonDetails.endDate,
                                                                            {
                                                                              x:
                                                                                width /
                                                                                  2 +
                                                                                106,
                                                                              y:
                                                                                height /
                                                                                  2 -
                                                                                138,
                                                                              font: helveticaFont,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                              size: 12,
                                                                            }
                                                                          ); //End Date
                                                                          //address
                                                                          //
                                                                          //  number
                                                                          firstPage.drawText(
                                                                            PersonDetails.email,
                                                                            {
                                                                              x: 155,
                                                                              y:
                                                                                height /
                                                                                  2 -
                                                                                224,
                                                                              font: helveticaFont1,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                              size: 10,
                                                                            }
                                                                          );
                                                                          firstPage.drawText(
                                                                            PersonDetails.website,
                                                                            {
                                                                              x: 340,
                                                                              y:
                                                                                height /
                                                                                  2 -
                                                                                224,
                                                                              font: helveticaFont1,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                              size: 10,
                                                                            }
                                                                          ); //website

                                                                          firstPage.drawText(
                                                                            "Verify this certificate at :",
                                                                            {
                                                                              x: 160,
                                                                              y:
                                                                                height /
                                                                                  2 -
                                                                                340,
                                                                              font: helveticaFont,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                              size: 11,
                                                                            }
                                                                          );
                                                                          firstPage.drawText(
                                                                            `https://myvedait.com/verify_cert/` +
                                                                              PersonDetails.certificate,
                                                                            {
                                                                              x: 270,
                                                                              y:
                                                                                height /
                                                                                  2 -
                                                                                340,
                                                                              font: helveticaFont1,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                              size: 10,
                                                                            }
                                                                          );
                                                                          // Serialize the PDFDocument to bytes (a Uint8Array)

                                                                          const pdfBytes =
                                                                            await pdfDoc.save();
                                                                          fs.writeFileSync(
                                                                            `./USR_CERT/${
                                                                              course_id +
                                                                              "_" +
                                                                              firstName +
                                                                              "_" +
                                                                              lastName
                                                                            }.pdf`,
                                                                            pdfBytes
                                                                          );
                                                                          fs.writeFileSync(
                                                                            `${filePath}/usr_certificates/${
                                                                              course_id +
                                                                              "_" +
                                                                              firstName +
                                                                              "_" +
                                                                              lastName
                                                                            }.pdf`,
                                                                            pdfBytes
                                                                          );

                                                                          db.query(
                                                                            "UPDATE `myveda-db`.?? SET cert_id = ?,cert_name = ? where uid = ?",
                                                                            [
                                                                              course_id
                                                                                .toLowerCase()
                                                                                .replace(
                                                                                  "-",
                                                                                  "_"
                                                                                ),
                                                                              PersonDetails.certificate,
                                                                              `${
                                                                                course_id +
                                                                                "_" +
                                                                                firstName +
                                                                                "_" +
                                                                                lastName
                                                                              }.pdf`,
                                                                              uid,
                                                                            ]
                                                                          );

                                                                          db.query(
                                                                            "SELECT * FROM `myveda-db`.user_pass_email_cnf",
                                                                            (
                                                                              err,
                                                                              result
                                                                            ) => {
                                                                              if (
                                                                                err
                                                                              ) {
                                                                                console.log(
                                                                                  err
                                                                                );
                                                                              } else {
                                                                                const subject =
                                                                                  result[0]
                                                                                    .subject;
                                                                                const msg =
                                                                                  result[0]
                                                                                    .message;
                                                                                const sign =
                                                                                  result[0]
                                                                                    .signature;
                                                                                // node mailer
                                                                                const output = `

                                          <h3>Dear ${firstName} ${lastName} </h3>
                                          <p>${msg} : ${course_Id}.</p>

                                          <p>
                                          Please find attached certificate for your records.</p>

                                          <p>!!! This is an automatically system generated email ? please do not reply to it.</p>

                                          <p>${sign}</p>

                                          `;

                                                                                db.query(
                                                                                  "SELECT * FROM `myveda-db`.email_srv",
                                                                                  (
                                                                                    err,
                                                                                    result
                                                                                  ) => {
                                                                                    if (
                                                                                      err
                                                                                    ) {
                                                                                      console.log(
                                                                                        err
                                                                                      );
                                                                                    } else {
                                                                                      console.log(
                                                                                        result
                                                                                      );
                                                                                      let host1 =
                                                                                        result[0]
                                                                                          ?.host;
                                                                                      let port1 =
                                                                                        result[0]
                                                                                          ?.port;
                                                                                      let user1 =
                                                                                        result[0]
                                                                                          ?.auth_uid;
                                                                                      let pass1 =
                                                                                        result[0]
                                                                                          ?.auth_pass;
                                                                                      let fromEmail =
                                                                                        result[0]
                                                                                          ?.from_email;
                                                                                      let bccEmail =
                                                                                        result[0]
                                                                                          ?.bcc_email;
                                                                                      let transporter =
                                                                                        nodemailer.createTransport(
                                                                                          {
                                                                                            host: host1,
                                                                                            port: port1,
                                                                                            secure: true, // true for 465, false for other p orts
                                                                                            auth: {
                                                                                              user: user1, // generated ethereal user
                                                                                              pass: pass1, // generated ethereal password
                                                                                            },
                                                                                          }
                                                                                        );

                                                                                      // send mail with defined transport object
                                                                                      let info =
                                                                                        transporter
                                                                                          .sendMail(
                                                                                            {
                                                                                              from: `"no-reply" ${fromEmail}`, // sender address
                                                                                              to: uid, // list of receivers
                                                                                              subject:
                                                                                                subject, // Subject line
                                                                                              bcc: bccEmail,
                                                                                              html: output, // html body
                                                                                              attachments:
                                                                                                [
                                                                                                  {
                                                                                                    filename:
                                                                                                      "Certificate.pdf",
                                                                                                    content:
                                                                                                      fs.createReadStream(
                                                                                                        `./USR_CERT/${
                                                                                                          course_id +
                                                                                                          "_" +
                                                                                                          firstName +
                                                                                                          "_" +
                                                                                                          lastName
                                                                                                        }.pdf`,
                                                                                                        pdfBytes
                                                                                                      ),
                                                                                                  },
                                                                                                ],
                                                                                            }
                                                                                          )
                                                                                          .then(
                                                                                            () => {
                                                                                              res.send(
                                                                                                result
                                                                                              );
                                                                                            }
                                                                                          );

                                                                                      console.log(
                                                                                        "Message sent: %s",
                                                                                        info.messageId
                                                                                      );
                                                                                      console.log(
                                                                                        "Preview URL: %s",
                                                                                        nodemailer.getTestMessageUrl(
                                                                                          info
                                                                                        )
                                                                                      );
                                                                                    }
                                                                                  }
                                                                                );
                                                                              }
                                                                            }
                                                                          );
                                                                        }
                                                                      );
                                                                    }
                                                                  }
                                                                );
                                                              }
                                                            }
                                                          );
                                                        }
                                                      }
                                                    );
                                                  }
                                                }
                                              );
                                            } else {
                                              db.query(
                                                "UPDATE `myveda-db`.?? SET stats_apt1 = ?,eval_date_orq_apt1 = ? WHERE uid = ?",
                                                [tableName, "FAIL", today, uid],
                                                (errT, resultT) => {
                                                  if (err) {
                                                    console.log(errT);
                                                  } else {
                                                    res.send(resultT);
                                                    db.query(
                                                      "SELECT * FROM `myveda-db`.user_fail_email_cnf",
                                                      (err, result) => {
                                                        if (err) {
                                                          console.log(err);
                                                        } else {
                                                          const subject =
                                                            result[0].subject;
                                                          const msg =
                                                            result[0].message;
                                                          const sign =
                                                            result[0].signature;
                                                          // node mailer
                                                          const output = `

                      <h3>Dear ${firstName} ${lastName} </h3>
                      <p>${msg} : ${course_id}.</p>

                      <table>
                      <thead>
                      <tr>
                      <th>
                      Attempt
                      </th>
                      <th>TFQs</th>
                      <th>SCQs</th>
                    
                      <th>Total %</th>
                      <th>Result</th>
                      </tr>
                      </thead>
                      <tbody>
                      <tr>
                      <td>
                        1
                      </td>
                      <td>${result1[0].tfq_sc_apt1}</td>
                      <td>${result1[0].scq_sc_apt1}</td>
                     
                      <td>${result1[0].percent_apt1}</td>
                      <td>Failed</td>
                      </tr>
                      </tbody>
                      </table>

                      <p>!!! This is an automatically system generated email ? please do not reply to it.</p>

                      <p>${sign}</p>

                      `;

                                                          db.query(
                                                            "SELECT * FROM `myveda-db`.email_srv",
                                                            (err, result) => {
                                                              if (err) {
                                                                console.log(
                                                                  err
                                                                );
                                                              } else {
                                                                console.log(
                                                                  result
                                                                );
                                                                let host1 =
                                                                  result[0]
                                                                    ?.host;
                                                                let port1 =
                                                                  result[0]
                                                                    ?.port;
                                                                let user1 =
                                                                  result[0]
                                                                    ?.auth_uid;
                                                                let pass1 =
                                                                  result[0]
                                                                    ?.auth_pass;
                                                                let fromEmail =
                                                                  result[0]
                                                                    ?.from_email;
                                                                let bccEmail =
                                                                  result[0]
                                                                    ?.bcc_email;
                                                                let transporter =
                                                                  nodemailer.createTransport(
                                                                    {
                                                                      host: host1,
                                                                      port: port1,
                                                                      secure: true, // true for 465, false for other p orts
                                                                      auth: {
                                                                        user: user1, // generated ethereal user
                                                                        pass: pass1, // generated ethereal password
                                                                      },
                                                                    }
                                                                  );

                                                                // send mail with defined transport object
                                                                let info =
                                                                  transporter
                                                                    .sendMail({
                                                                      from: `"no-reply" ${fromEmail}`, // sender address
                                                                      to: uid, // list of receivers
                                                                      subject:
                                                                        subject +
                                                                        "  " +
                                                                        course_id, // Subject line
                                                                      bcc: bccEmail,
                                                                      html: output, // html body
                                                                    })
                                                                    .then(
                                                                      () => {
                                                                        res.send(
                                                                          result
                                                                        );
                                                                      }
                                                                    );
                                                              }
                                                            }
                                                          );
                                                        }
                                                      }
                                                    );
                                                  }
                                                }
                                              );
                                            }
                                          }
                                        }
                                      );
                                    }
                                  }
                                );
                              }
                            }
                          );
                        }
                      }
                    );
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});

// auto evaluate for orqs for me attempt 2
// auto evaluate for orqs for me attempt 2
app.put("/api/v2/update/auto/evaluate", (req, res) => {
  const course_id = req.body.courseId;
  const custID = req.body.custId;
  const uid = req.body.uid;
  const tableName = course_id.toLowerCase().replace("-", "_");

  const { cert_id } = req.body;

  console.log(req.body);
  var today = new Date();
  var dd = String(today.getDate()).padStart(2, "0");
  var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
  var yyyy = today.getFullYear();

  today = yyyy + "-" + mm + "-" + dd;

  db.query(
    "SELECT * FROM `myveda-db`.customer_reg where businessMail = ?",
    [uid],
    (errPP, resultPP) => {
      if (errPP) console.log(errPP);
      else {
        console.log(uid);
        console.log(resultPP[0]);
        const firstName = resultPP[0].firstName;
        const lastName = resultPP[0].lastName;
        console.log(firstName, lastName);
        db.query(
          `UPDATE \`myveda-db\`.?? AS T1
          JOIN (
            SELECT id, SUM(tfq_sc_apt2 + scq_sc_apt2) AS newtable
            FROM \`myveda-db\`.??
            WHERE uid = ?
            GROUP BY id
          ) AS T2 ON T1.id = T2.id
          SET T1.tot_sc_apt2 = T2.newtable;`,
          [tableName, tableName, uid],
          (err, result) => {
            if (err) {
              console.log(err);
            } else {
              console.log(result);
              db.query(
                "SELECT * from `myveda-db`.?? where uid = ?",
                [tableName, uid],
                (err1, result1) => {
                  if (err1) console.log(err1);
                  else {
                    tot_score = result1[0].tot_sc_apt2;

                    console.log(tot_score);
                    db.query(
                      "SELECT tt_marks from `myveda-db`.dfn_per_ques_mrks where id = 2",
                      (errM, resultM) => {
                        if (errM) console.log(errM);
                        else {
                          let tt_marks = resultM[0].tt_marks;
                          console.log(tt_marks);
                          db.query(
                            "SELECT tot_sc_apt2 from `myveda-db`.?? where uid = ?",
                            [tableName, uid],
                            (err, result) => {
                              if (err) console.log(err);
                              else {
                                // let tot_sc = result[0].tot_sc_apt2;
                                // console.log(tot_sc + "total score");
                                let tot_marks =
                                  (parseInt(tot_score) / tt_marks) * 100;
                                console.log(
                                  Math.round(tot_marks) + "total marks"
                                );

                                const total = Math.round(tot_marks);
                                const totalMarks = parseInt(total);
                                console.log(totalMarks);

                                db.query(
                                  "SELECT * FROM `myveda-db`.customer_reg where businessMail = ?",
                                  [uid],
                                  (errUser, resultUser) => {
                                    if (errUser) console.log(errUser);
                                    else {
                                      let reg_date_user =
                                        resultUser[0].req_date;
                                      db.query(
                                        "UPDATE `myveda-db`.?? SET percent_apt2 = ? WHERE uid = ?",
                                        [tableName, total, uid],
                                        (errP, resultP) => {
                                          if (errP) console.log(errP);
                                          else {
                                            if (totalMarks > 59) {
                                              db.query(
                                                "UPDATE `myveda-db`.?? SET stats_apt2 = ?,eval_date_orq_apt2 = ? WHERE uid = ?",
                                                [tableName, "PASS", today, uid],
                                                (errT, resultT) => {
                                                  if (err) {
                                                    console.log(errT);
                                                  } else {
                                                    console.log(resultT);
                                                    db.query(
                                                      "SELECT * FROM `myveda-db`.cert_info",
                                                      (err, result) => {
                                                        if (err) {
                                                          console.log(err);
                                                        } else {
                                                          let address1 =
                                                            result[0]?.address;
                                                          let email1 =
                                                            result[0]?.email;
                                                          let website1 =
                                                            result[0]?.website;
                                                          let number =
                                                            result[0]?.number;
                                                          console.log(address1);

                                                          db.query(
                                                            "SELECT * FROM `myveda-db`.add_courses where course_id = ?",
                                                            [course_id],
                                                            (
                                                              error,
                                                              result1
                                                            ) => {
                                                              if (err) {
                                                                console.log(
                                                                  err
                                                                );
                                                              } else {
                                                                // console.log(result1)

                                                                let course_duration =
                                                                  result1[0]
                                                                    ?.duration;

                                                                let course_title =
                                                                  result1[0]
                                                                    ?.course_ttl;
                                                                let start_Date1 =
                                                                  result1[0]
                                                                    ?.start_dt; //you want copy?ss// now check>?>

                                                                let end_Date1 =
                                                                  result1[0]
                                                                    ?.start_dt;
                                                                let course_Id =
                                                                  result1[0]
                                                                    ?.course_id;
                                                                let course_Type =
                                                                  result1[0]
                                                                    ?.course_category;
                                                                db.query(
                                                                  "SELECT * FROM `myveda-db`.upld_logo",
                                                                  async (
                                                                    err,
                                                                    result3
                                                                  ) => {
                                                                    if (err) {
                                                                      console.log(
                                                                        err
                                                                      );
                                                                    } else {
                                                                      let comp_logo1 =
                                                                        result3[0]
                                                                          ?.comp_logo; //this is image
                                                                      let pro_logo1 =
                                                                        result3[0]
                                                                          ?.pro_logo;
                                                                      let cust_logo1 =
                                                                        result3[0]
                                                                          ?.cust_logo;
                                                                      db.query(
                                                                        "SELECT * FROM `myveda-db`.usr_exam_cert where course_id = ? and uid = ?",
                                                                        [
                                                                          course_Id,
                                                                          uid,
                                                                        ],
                                                                        (
                                                                          errCert,
                                                                          resultCert
                                                                        ) => {
                                                                          if (
                                                                            errCert
                                                                          )
                                                                            console.log(
                                                                              errCert
                                                                            );
                                                                          else {
                                                                            if (
                                                                              !resultCert.length
                                                                            ) {
                                                                              db.query(
                                                                                "insert into `myveda-db`.usr_exam_cert (uid,cust_id,cert_id,issue_date,course_id) values(?,?,?,?,?)",
                                                                                [
                                                                                  uid,
                                                                                  custID,
                                                                                  cert_id,
                                                                                  today,
                                                                                  course_id,
                                                                                ]
                                                                              );
                                                                            }
                                                                          }
                                                                        }
                                                                      );

                                                                      const PersonDetails =
                                                                        {
                                                                          courseTitle: `${course_title}`,
                                                                          startDate: `${
                                                                            course_duration +
                                                                            " Days"
                                                                          }`,
                                                                          endDate: `${today}`,
                                                                          course: `${course_Id}`,

                                                                          logo: `${comp_logo1}`,
                                                                          prodLogo: `${pro_logo1}`,

                                                                          name:
                                                                            `${firstName}` +
                                                                            " " +
                                                                            `${lastName}`,
                                                                          certificate: `${cert_id}`,
                                                                          address: `${address1}`,
                                                                          email: `${email1}`,
                                                                          website: `${website1}`,
                                                                          number: `${number}`,
                                                                        };

                                                                      fs.readFile(
                                                                        "./assets/mastercert.pdf",
                                                                        async function (
                                                                          err,
                                                                          data
                                                                        ) {
                                                                          // Display the file content
                                                                          const ab =
                                                                            new ArrayBuffer(
                                                                              data.length
                                                                            );
                                                                          const view =
                                                                            new Uint8Array(
                                                                              ab
                                                                            );
                                                                          for (
                                                                            let i = 0;
                                                                            i <
                                                                            data.length;
                                                                            ++i
                                                                          ) {
                                                                            view[
                                                                              i
                                                                            ] =
                                                                              data[
                                                                                i
                                                                              ];
                                                                          }
                                                                          const pdfDoc =
                                                                            await PDFDocument.load(
                                                                              ab
                                                                            );
                                                                          const helveticaFont =
                                                                            await pdfDoc.embedFont(
                                                                              StandardFonts.TimesRomanItalic
                                                                            );
                                                                          const helveticaFont1 =
                                                                            await pdfDoc.embedFont(
                                                                              StandardFonts.CourierBold
                                                                            );
                                                                          const pngImage =
                                                                            await pdfDoc.embedPng(
                                                                              PersonDetails.logo
                                                                            );
                                                                          const productLogo =
                                                                            await pdfDoc.embedPng(
                                                                              PersonDetails.prodLogo
                                                                            );

                                                                          // Get the first page of the documentn
                                                                          const pages =
                                                                            pdfDoc.getPages();
                                                                          const firstPage =
                                                                            pages[0];

                                                                          const {
                                                                            width,
                                                                            height,
                                                                          } =
                                                                            firstPage.getSize();

                                                                          // Draw a string of text diagonally across the first page

                                                                          // course Title

                                                                          const centerTextXCourseTitle =
                                                                            (width -
                                                                              helveticaFont1.widthOfTextAtSize(
                                                                                PersonDetails.courseTitle,
                                                                                25
                                                                              )) /
                                                                            2;

                                                                          // Draw the course title centered on the X-axis
                                                                          firstPage.drawText(
                                                                            PersonDetails.courseTitle,
                                                                            {
                                                                              x: centerTextXCourseTitle,
                                                                              y:
                                                                                height /
                                                                                2,
                                                                              font: helveticaFont1,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                              size: 24,
                                                                            }
                                                                          );

                                                                          //Course Title
                                                                          // firstPage.drawText(
                                                                          //   PersonDetails.courseType,
                                                                          //   {
                                                                          //     x: 200,
                                                                          //     y: height / 2 + 30,
                                                                          //     font: helveticaFont1,
                                                                          //     color: rgb(
                                                                          //       0.95,
                                                                          //       0.1,
                                                                          //       0.1
                                                                          //     ),
                                                                          //     size: 36,
                                                                          //   }
                                                                          // ); //course type
                                                                          firstPage.drawImage(
                                                                            pngImage,
                                                                            {
                                                                              x: 120,
                                                                              y:
                                                                                height /
                                                                                  2 -
                                                                                190,
                                                                              width: 120,
                                                                              height: 50,
                                                                            }
                                                                          ); //logo
                                                                          //logo
                                                                          //logo
                                                                          // Calculate the X position to center the user name
                                                                          const centerNameX =
                                                                            (width -
                                                                              helveticaFont1.widthOfTextAtSize(
                                                                                PersonDetails.name,
                                                                                20
                                                                              )) /
                                                                            2;

                                                                          // Draw the user name centered on the X-axis
                                                                          firstPage.drawText(
                                                                            PersonDetails.name,
                                                                            {
                                                                              x: centerNameX,
                                                                              y:
                                                                                height /
                                                                                  2 +
                                                                                110,
                                                                              font: helveticaFont1,
                                                                              size: 20,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                            }
                                                                          );
                                                                          //User Name
                                                                          firstPage.drawText(
                                                                            PersonDetails.certificate,
                                                                            {
                                                                              x:
                                                                                width /
                                                                                  2 +
                                                                                106,
                                                                              //(width - textWidth) / 3.1
                                                                              y:
                                                                                height /
                                                                                  2 -
                                                                                55,
                                                                              font: helveticaFont,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                              size: 12,
                                                                            }
                                                                          ); //Certificate Name
                                                                          firstPage.drawText(
                                                                            PersonDetails.course,
                                                                            {
                                                                              x:
                                                                                width /
                                                                                  2 +
                                                                                106,
                                                                              y:
                                                                                height /
                                                                                  2 -
                                                                                80,
                                                                              font: helveticaFont,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                              size: 12,
                                                                            }
                                                                          ); //Course Name
                                                                          firstPage.drawText(
                                                                            PersonDetails.startDate,
                                                                            {
                                                                              x:
                                                                                width /
                                                                                  2 +
                                                                                106,
                                                                              y:
                                                                                height /
                                                                                  2 -
                                                                                108,
                                                                              font: helveticaFont,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                              size: 12,
                                                                            }
                                                                          ); //Start Date
                                                                          firstPage.drawText(
                                                                            PersonDetails.endDate,
                                                                            {
                                                                              x:
                                                                                width /
                                                                                  2 +
                                                                                106,
                                                                              y:
                                                                                height /
                                                                                  2 -
                                                                                138,
                                                                              font: helveticaFont,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                              size: 12,
                                                                            }
                                                                          ); //End Date
                                                                          //address
                                                                          //
                                                                          //  number
                                                                          firstPage.drawText(
                                                                            PersonDetails.email,
                                                                            {
                                                                              x: 155,
                                                                              y:
                                                                                height /
                                                                                  2 -
                                                                                224,
                                                                              font: helveticaFont1,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                              size: 10,
                                                                            }
                                                                          );
                                                                          firstPage.drawText(
                                                                            PersonDetails.website,
                                                                            {
                                                                              x: 340,
                                                                              y:
                                                                                height /
                                                                                  2 -
                                                                                224,
                                                                              font: helveticaFont1,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                              size: 10,
                                                                            }
                                                                          ); //website

                                                                          firstPage.drawText(
                                                                            "Verify this certificate at :",
                                                                            {
                                                                              x: 160,
                                                                              y:
                                                                                height /
                                                                                  2 -
                                                                                340,
                                                                              font: helveticaFont,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                              size: 11,
                                                                            }
                                                                          );
                                                                          firstPage.drawText(
                                                                            `https://myvedait.com/verify_cert/` +
                                                                              PersonDetails.certificate,
                                                                            {
                                                                              x: 270,
                                                                              y:
                                                                                height /
                                                                                  2 -
                                                                                340,
                                                                              font: helveticaFont1,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                              size: 10,
                                                                            }
                                                                          );
                                                                          // Serialize the PDFDocument to bytes (a Uint8Array)
                                                                          const pdfBytes =
                                                                            await pdfDoc.save();
                                                                          fs.writeFileSync(
                                                                            `./USR_CERT/${
                                                                              course_id +
                                                                              "_" +
                                                                              firstName +
                                                                              "_" +
                                                                              lastName
                                                                            }.pdf`,
                                                                            pdfBytes
                                                                          );
                                                                          fs.writeFileSync(
                                                                            `${filePath}/usr_certificates/${
                                                                              course_id +
                                                                              "_" +
                                                                              firstName +
                                                                              "_" +
                                                                              lastName
                                                                            }.pdf`,
                                                                            pdfBytes
                                                                          );

                                                                          db.query(
                                                                            "UPDATE `myveda-db`.?? SET cert_id = ?,cert_name = ? where uid = ?",
                                                                            [
                                                                              course_id
                                                                                .toLowerCase()
                                                                                .replace(
                                                                                  "-",
                                                                                  "_"
                                                                                ),
                                                                              PersonDetails.certificate,
                                                                              `${
                                                                                course_id +
                                                                                "_" +
                                                                                firstName +
                                                                                "_" +
                                                                                lastName
                                                                              }.pdf`,
                                                                              uid,
                                                                            ]
                                                                          );

                                                                          db.query(
                                                                            "SELECT * FROM `myveda-db`.user_pass_email_cnf",
                                                                            (
                                                                              err,
                                                                              result
                                                                            ) => {
                                                                              if (
                                                                                err
                                                                              ) {
                                                                                console.log(
                                                                                  err
                                                                                );
                                                                              } else {
                                                                                const subject =
                                                                                  result[0]
                                                                                    .subject;
                                                                                const msg =
                                                                                  result[0]
                                                                                    .message;
                                                                                const sign =
                                                                                  result[0]
                                                                                    .signature;
                                                                                // node mailer
                                                                                const output = `

                                          <h3>Dear ${firstName} ${lastName} </h3>
                                          <p>${msg} : ${course_Id}.</p>

                                          <p>
                                          Please find attached certificate for your records.</p>

                                          <p>!!! This is an automatically system generated email ? please do not reply to it.</p>

                                          <p>${sign}</p>

                                          `;

                                                                                db.query(
                                                                                  "SELECT * FROM `myveda-db`.email_srv",
                                                                                  (
                                                                                    err,
                                                                                    result
                                                                                  ) => {
                                                                                    if (
                                                                                      err
                                                                                    ) {
                                                                                      console.log(
                                                                                        err
                                                                                      );
                                                                                    } else {
                                                                                      console.log(
                                                                                        result
                                                                                      );
                                                                                      let host1 =
                                                                                        result[0]
                                                                                          ?.host;
                                                                                      let port1 =
                                                                                        result[0]
                                                                                          ?.port;
                                                                                      let user1 =
                                                                                        result[0]
                                                                                          ?.auth_uid;
                                                                                      let pass1 =
                                                                                        result[0]
                                                                                          ?.auth_pass;
                                                                                      let fromEmail =
                                                                                        result[0]
                                                                                          ?.from_email;
                                                                                      let bccEmail =
                                                                                        result[0]
                                                                                          ?.bcc_email;
                                                                                      let transporter =
                                                                                        nodemailer.createTransport(
                                                                                          {
                                                                                            host: host1,
                                                                                            port: port1,
                                                                                            secure: true, // true for 465, false for other p orts
                                                                                            auth: {
                                                                                              user: user1, // generated ethereal user
                                                                                              pass: pass1, // generated ethereal password
                                                                                            },
                                                                                          }
                                                                                        );

                                                                                      // send mail with defined transport object
                                                                                      let info =
                                                                                        transporter
                                                                                          .sendMail(
                                                                                            {
                                                                                              from: `"no-reply" ${fromEmail}`, // sender address
                                                                                              to: uid, // list of receivers
                                                                                              subject:
                                                                                                subject, // Subject line
                                                                                              bcc: bccEmail,
                                                                                              html: output, // html body
                                                                                              attachments:
                                                                                                [
                                                                                                  {
                                                                                                    filename:
                                                                                                      "Certificate.pdf",
                                                                                                    content:
                                                                                                      fs.createReadStream(
                                                                                                        `./USR_CERT/${
                                                                                                          course_id +
                                                                                                          "_" +
                                                                                                          firstName +
                                                                                                          "_" +
                                                                                                          lastName
                                                                                                        }.pdf`,
                                                                                                        pdfBytes
                                                                                                      ),
                                                                                                  },
                                                                                                ],
                                                                                            }
                                                                                          )
                                                                                          .then(
                                                                                            () => {
                                                                                              res.send(
                                                                                                result
                                                                                              );
                                                                                            }
                                                                                          );

                                                                                      console.log(
                                                                                        "Message sent: %s",
                                                                                        info.messageId
                                                                                      );
                                                                                      console.log(
                                                                                        "Preview URL: %s",
                                                                                        nodemailer.getTestMessageUrl(
                                                                                          info
                                                                                        )
                                                                                      );
                                                                                    }
                                                                                  }
                                                                                );
                                                                              }
                                                                            }
                                                                          );
                                                                        }
                                                                      );
                                                                    }
                                                                  }
                                                                );
                                                              }
                                                            }
                                                          );
                                                        }
                                                      }
                                                    );
                                                  }
                                                }
                                              );
                                            } else {
                                              db.query(
                                                "UPDATE `myveda-db`.?? SET stats_apt2 = ?,eval_date_orq_apt2 = ? WHERE uid = ?",
                                                [tableName, "FAIL", today, uid],
                                                (errT, resultT) => {
                                                  if (err) {
                                                    console.log(errT);
                                                  } else {
                                                    db.query(
                                                      "SELECT * FROM `myveda-db`.user_fail_email_cnf",
                                                      (err, result) => {
                                                        if (err) {
                                                          console.log(err);
                                                        } else {
                                                          const subject =
                                                            result[0].subject;
                                                          const msg =
                                                            result[0].message;
                                                          const sign =
                                                            result[0].signature;
                                                          // node mailer
                                                          const output = `

                      <h3>Dear ${firstName} ${lastName} </h3>
                      <p>${msg} : ${course_id}.</p>

                      <table>
                      <thead>
                      <tr>
                      <th>
                      Attempt
                      </th>
                      <th>TFQs</th>
                      <th>SCQs</th>
                      <th>ORQs</th>
                      <th>Total %</th>
                      <th>Result</th>
                      </tr>
                      </thead>
                      <tbody>
                      <tr>
                      <td>
                        2
                      </td>
                      <td>${result1[0].tfq_sc_apt2}</td>
                      <td>${result1[0].scq_sc_apt2}</td>
                      <td>${result1[0].orq_sc_apt2}</td>
                      <td>${result1[0].percent_apt2}</td>
                      <td>Failed</td>
                      </tr>
                      </tbody>
                      </table>

                      <p>!!! This is an automatically system generated email ? please do not reply to it.</p>

                      <p>${sign}</p>

                      `;

                                                          db.query(
                                                            "SELECT * FROM `myveda-db`.email_srv",
                                                            (err, result) => {
                                                              if (err) {
                                                                console.log(
                                                                  err
                                                                );
                                                              } else {
                                                                console.log(
                                                                  result
                                                                );
                                                                let host1 =
                                                                  result[0]
                                                                    ?.host;
                                                                let port1 =
                                                                  result[0]
                                                                    ?.port;
                                                                let user1 =
                                                                  result[0]
                                                                    ?.auth_uid;
                                                                let pass1 =
                                                                  result[0]
                                                                    ?.auth_pass;
                                                                let fromEmail =
                                                                  result[0]
                                                                    ?.from_email;
                                                                let bccEmail =
                                                                  result[0]
                                                                    ?.bcc_email;
                                                                let transporter =
                                                                  nodemailer.createTransport(
                                                                    {
                                                                      host: host1,
                                                                      port: port1,
                                                                      secure: true, // true for 465, false for other p orts
                                                                      auth: {
                                                                        user: user1, // generated ethereal user
                                                                        pass: pass1, // generated ethereal password
                                                                      },
                                                                    }
                                                                  );

                                                                // send mail with defined transport object
                                                                let info =
                                                                  transporter
                                                                    .sendMail({
                                                                      from: `"no-reply" ${fromEmail}`, // sender address
                                                                      to: uid, // list of receivers
                                                                      subject:
                                                                        subject +
                                                                        "  " +
                                                                        course_id, // Subject line
                                                                      bcc: bccEmail,
                                                                      html: output, // html body
                                                                    })
                                                                    .then(
                                                                      () => {
                                                                        res.send(
                                                                          result
                                                                        );
                                                                      }
                                                                    );
                                                              }
                                                            }
                                                          );
                                                        }
                                                      }
                                                    );
                                                  }
                                                }
                                              );
                                            }
                                          }
                                        }
                                      );
                                    }
                                  }
                                );
                              }
                            }
                          );
                        }
                      }
                    );
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});
// auto evaluate for orqs for me attempt 2
// auto evaluate for orqs for me attempt 2
app.put("/api/v3/update/auto/evaluate", (req, res) => {
  const course_id = req.body.courseId;
  const custID = req.body.custId;
  const uid = req.body.uid;
  const tableName = course_id.toLowerCase().replace("-", "_");
  const { cert_id } = req.body;
  console.log(req.body);
  var today = new Date();
  var dd = String(today.getDate()).padStart(2, "0");
  var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
  var yyyy = today.getFullYear();

  today = yyyy + "-" + mm + "-" + dd;

  db.query(
    "SELECT * FROM `myveda-db`.customer_reg where businessMail = ?",
    [uid],
    (errPP, resultPP) => {
      if (errPP) console.log(errPP);
      else {
        console.log(uid);
        console.log(resultPP[0]);
        const firstName = resultPP[0].firstName;
        const lastName = resultPP[0].lastName;
        console.log(firstName, lastName);
        db.query(
          `UPDATE \`myveda-db\`.?? AS T1
          JOIN (
            SELECT id, SUM(tfq_sc_apt3 + scq_sc_apt3) AS newtable
            FROM \`myveda-db\`.??
            WHERE uid = ?
            GROUP BY id
          ) AS T2 ON T1.id = T2.id
          SET T1.tot_sc_apt3 = T2.newtable;`,
          [tableName, tableName, uid],
          (err, result) => {
            if (err) {
              console.log(err);
            } else {
              console.log(result);
              db.query(
                "SELECT * from `myveda-db`.?? where uid = ?",
                [tableName, uid],
                (err1, result1) => {
                  if (err1) console.log(err1);
                  else {
                    tot_score = result1[0].tot_sc_apt3;

                    console.log(tot_score);
                    db.query(
                      "SELECT tt_marks from `myveda-db`.dfn_per_ques_mrks where id = 2",
                      (errM, resultM) => {
                        if (errM) console.log(errM);
                        else {
                          let tt_marks = resultM[0].tt_marks;
                          console.log(tt_marks);
                          db.query(
                            "SELECT tot_sc_apt3 from `myveda-db`.?? where uid = ?",
                            [tableName, uid],
                            (err, result) => {
                              if (err) console.log(err);
                              else {
                                // let tot_sc = result[0].tot_sc_apt3;
                                // console.log(tot_sc + "total score");
                                let tot_marks =
                                  (parseInt(tot_score) / tt_marks) * 100;
                                console.log(
                                  Math.round(tot_marks) + "total marks"
                                );

                                const total = Math.round(tot_marks);
                                const totalMarks = parseInt(total);
                                console.log(totalMarks);

                                db.query(
                                  "SELECT * FROM `myveda-db`.customer_reg where businessMail = ?",
                                  [uid],
                                  (errUser, resultUser) => {
                                    if (errUser) console.log(errUser);
                                    else {
                                      let reg_date_user =
                                        resultUser[0].req_date;
                                      db.query(
                                        "UPDATE `myveda-db`.?? SET percent_apt3 = ? WHERE uid = ?",
                                        [tableName, total, uid],
                                        (errP, resultP) => {
                                          if (errP) console.log(errP);
                                          else {
                                            if (totalMarks > 59) {
                                              db.query(
                                                "UPDATE `myveda-db`.?? SET stats_apt3 = ?,eval_date_orq_apt3 = ? WHERE uid = ?",
                                                [tableName, "PASS", today, uid],
                                                (errT, resultT) => {
                                                  if (err) {
                                                    console.log(errT);
                                                  } else {
                                                    console.log(resultT);
                                                    db.query(
                                                      "SELECT * FROM `myveda-db`.cert_info",
                                                      (err, result) => {
                                                        if (err) {
                                                          console.log(err);
                                                        } else {
                                                          let address1 =
                                                            result[0]?.address;
                                                          let email1 =
                                                            result[0]?.email;
                                                          let website1 =
                                                            result[0]?.website;
                                                          let number =
                                                            result[0]?.number;
                                                          console.log(address1);

                                                          db.query(
                                                            "SELECT * FROM `myveda-db`.add_courses where course_id = ?",
                                                            [course_id],
                                                            (
                                                              error,
                                                              result1
                                                            ) => {
                                                              if (err) {
                                                                console.log(
                                                                  err
                                                                );
                                                              } else {
                                                                // console.log(result1)

                                                                let course_duration =
                                                                  result1[0]
                                                                    ?.duration;

                                                                let course_title =
                                                                  result1[0]
                                                                    ?.course_ttl;
                                                                let start_Date1 =
                                                                  result1[0]
                                                                    ?.start_dt; //you want copy?ss// now check>?>

                                                                let end_Date1 =
                                                                  result1[0]
                                                                    ?.start_dt;
                                                                let course_Id =
                                                                  result1[0]
                                                                    ?.course_id;
                                                                let course_Type =
                                                                  result1[0]
                                                                    ?.course_category;
                                                                db.query(
                                                                  "SELECT * FROM `myveda-db`.upld_logo",
                                                                  async (
                                                                    err,
                                                                    result3
                                                                  ) => {
                                                                    if (err) {
                                                                      console.log(
                                                                        err
                                                                      );
                                                                    } else {
                                                                      let comp_logo1 =
                                                                        result3[0]
                                                                          ?.comp_logo; //this is image
                                                                      let pro_logo1 =
                                                                        result3[0]
                                                                          ?.pro_logo;
                                                                      let cust_logo1 =
                                                                        result3[0]
                                                                          ?.cust_logo;
                                                                      db.query(
                                                                        "SELECT * FROM `myveda-db`.usr_exam_cert where course_id = ? and uid = ?",
                                                                        [
                                                                          course_Id,
                                                                          uid,
                                                                        ],
                                                                        (
                                                                          errCert,
                                                                          resultCert
                                                                        ) => {
                                                                          if (
                                                                            errCert
                                                                          )
                                                                            console.log(
                                                                              errCert
                                                                            );
                                                                          else {
                                                                            if (
                                                                              !resultCert.length
                                                                            ) {
                                                                              db.query(
                                                                                "insert into `myveda-db`.usr_exam_cert (uid,cust_id,cert_id,issue_date,course_id) values(?,?,?,?,?)",
                                                                                [
                                                                                  uid,
                                                                                  custID,
                                                                                  cert_id,
                                                                                  today,
                                                                                  course_id,
                                                                                ]
                                                                              );
                                                                            }
                                                                          }
                                                                        }
                                                                      );

                                                                      const PersonDetails =
                                                                        {
                                                                          courseTitle: `${course_title}`,
                                                                          startDate: `${
                                                                            course_duration +
                                                                            " Days"
                                                                          }`,
                                                                          endDate: `${today}`,
                                                                          course: `${course_Id}`,

                                                                          logo: `${comp_logo1}`,
                                                                          prodLogo: `${pro_logo1}`,

                                                                          name:
                                                                            `${firstName}` +
                                                                            " " +
                                                                            `${lastName}`,
                                                                          certificate: `${cert_id}`,
                                                                          address: `${address1}`,
                                                                          email: `${email1}`,
                                                                          website: `${website1}`,
                                                                          number: `${number}`,
                                                                        };
                                                                      fs.readFile(
                                                                        "./assets/mastercert.pdf",
                                                                        async function (
                                                                          err,
                                                                          data
                                                                        ) {
                                                                          // Display the file content
                                                                          const ab =
                                                                            new ArrayBuffer(
                                                                              data.length
                                                                            );
                                                                          const view =
                                                                            new Uint8Array(
                                                                              ab
                                                                            );
                                                                          for (
                                                                            let i = 0;
                                                                            i <
                                                                            data.length;
                                                                            ++i
                                                                          ) {
                                                                            view[
                                                                              i
                                                                            ] =
                                                                              data[
                                                                                i
                                                                              ];
                                                                          }
                                                                          const pdfDoc =
                                                                            await PDFDocument.load(
                                                                              ab
                                                                            );
                                                                          const helveticaFont =
                                                                            await pdfDoc.embedFont(
                                                                              StandardFonts.TimesRomanItalic
                                                                            );
                                                                          const helveticaFont1 =
                                                                            await pdfDoc.embedFont(
                                                                              StandardFonts.CourierBold
                                                                            );
                                                                          const pngImage =
                                                                            await pdfDoc.embedPng(
                                                                              PersonDetails.logo
                                                                            );
                                                                          const productLogo =
                                                                            await pdfDoc.embedPng(
                                                                              PersonDetails.prodLogo
                                                                            );

                                                                          // Get the first page of the documentn
                                                                          const pages =
                                                                            pdfDoc.getPages();
                                                                          const firstPage =
                                                                            pages[0];

                                                                          const {
                                                                            width,
                                                                            height,
                                                                          } =
                                                                            firstPage.getSize();

                                                                          // Draw a string of text diagonally across the first page

                                                                          // course Title

                                                                          const centerTextXCourseTitle =
                                                                            (width -
                                                                              helveticaFont1.widthOfTextAtSize(
                                                                                PersonDetails.courseTitle,
                                                                                25
                                                                              )) /
                                                                            2;

                                                                          // Draw the course title centered on the X-axis
                                                                          firstPage.drawText(
                                                                            PersonDetails.courseTitle,
                                                                            {
                                                                              x: centerTextXCourseTitle,
                                                                              y:
                                                                                height /
                                                                                2,
                                                                              font: helveticaFont1,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                              size: 24,
                                                                            }
                                                                          );

                                                                          firstPage.drawImage(
                                                                            pngImage,
                                                                            {
                                                                              x: 120,
                                                                              y:
                                                                                height /
                                                                                  2 -
                                                                                269,
                                                                              width: 130,
                                                                              height: 60,
                                                                            }
                                                                          ); //logo
                                                                          //logo
                                                                          // Calculate the X position to center the user name
                                                                          const centerNameX =
                                                                            (width -
                                                                              helveticaFont1.widthOfTextAtSize(
                                                                                PersonDetails.name,
                                                                                20
                                                                              )) /
                                                                            2;

                                                                          // Draw the user name centered on the X-axis
                                                                          firstPage.drawText(
                                                                            PersonDetails.name,
                                                                            {
                                                                              x: centerNameX,
                                                                              y:
                                                                                height /
                                                                                  2 +
                                                                                90,
                                                                              font: helveticaFont1,
                                                                              size: 20,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                            }
                                                                          );
                                                                          //User Name
                                                                          firstPage.drawText(
                                                                            PersonDetails.certificate,
                                                                            {
                                                                              x:
                                                                                width /
                                                                                  2 +
                                                                                106,
                                                                              //(width - textWidth) / 3.1
                                                                              y:
                                                                                height /
                                                                                  2 -
                                                                                86,
                                                                              font: helveticaFont,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                              size: 12,
                                                                            }
                                                                          ); //Certificate Name
                                                                          firstPage.drawText(
                                                                            PersonDetails.course,
                                                                            {
                                                                              x:
                                                                                width /
                                                                                  2 +
                                                                                106,
                                                                              y:
                                                                                height /
                                                                                  2 -
                                                                                113,
                                                                              font: helveticaFont,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                              size: 12,
                                                                            }
                                                                          ); //Course Name
                                                                          firstPage.drawText(
                                                                            PersonDetails.startDate,
                                                                            {
                                                                              x:
                                                                                width /
                                                                                  2 +
                                                                                106,
                                                                              y:
                                                                                height /
                                                                                  2 -
                                                                                140,
                                                                              font: helveticaFont,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                              size: 12,
                                                                            }
                                                                          ); //Start Date
                                                                          firstPage.drawText(
                                                                            PersonDetails.endDate,
                                                                            {
                                                                              x:
                                                                                width /
                                                                                  2 +
                                                                                106,
                                                                              y:
                                                                                height /
                                                                                  2 -
                                                                                170,
                                                                              font: helveticaFont,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                              size: 12,
                                                                            }
                                                                          );
                                                                          //  number
                                                                          firstPage.drawText(
                                                                            PersonDetails.email,
                                                                            {
                                                                              x: 135,
                                                                              y:
                                                                                height /
                                                                                  2 -
                                                                                325,
                                                                              font: helveticaFont1,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                              size: 14,
                                                                            }
                                                                          );
                                                                          firstPage.drawText(
                                                                            PersonDetails.website,
                                                                            {
                                                                              x: 360,
                                                                              y:
                                                                                height /
                                                                                  2 -
                                                                                325,
                                                                              font: helveticaFont1,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                              size: 14,
                                                                            }
                                                                          ); //website

                                                                          firstPage.drawText(
                                                                            "Verify this certificate at :",
                                                                            {
                                                                              x: 200,
                                                                              y:
                                                                                height /
                                                                                  2 -
                                                                                410,
                                                                              font: helveticaFont,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                              size: 11,
                                                                            }
                                                                          );
                                                                          firstPage.drawText(
                                                                            `https://myvedait.com/verify_cert/` +
                                                                              PersonDetails.certificate,
                                                                            {
                                                                              x: 310,
                                                                              y:
                                                                                height /
                                                                                  2 -
                                                                                410,
                                                                              font: helveticaFont1,
                                                                              color:
                                                                                rgb(
                                                                                  0,
                                                                                  0,
                                                                                  0
                                                                                ),
                                                                              size: 10,
                                                                            }
                                                                          );

                                                                          // Serialize the PDFDocument to bytes (a Uint8Array)
                                                                          const pdfBytes =
                                                                            await pdfDoc.save();
                                                                          fs.writeFileSync(
                                                                            `./USR_CERT/${
                                                                              course_id +
                                                                              "_" +
                                                                              firstName +
                                                                              "_" +
                                                                              lastName
                                                                            }.pdf`,
                                                                            pdfBytes
                                                                          );
                                                                          fs.writeFileSync(
                                                                            `${filePath}/usr_certificates/${
                                                                              course_id +
                                                                              "_" +
                                                                              firstName +
                                                                              "_" +
                                                                              lastName
                                                                            }.pdf`,
                                                                            pdfBytes
                                                                          );

                                                                          db.query(
                                                                            "UPDATE `myveda-db`.?? SET cert_id = ?,cert_name = ? where uid = ?",
                                                                            [
                                                                              course_id
                                                                                .toLowerCase()
                                                                                .replace(
                                                                                  "-",
                                                                                  "_"
                                                                                ),
                                                                              PersonDetails.certificate,
                                                                              `${
                                                                                course_id +
                                                                                "_" +
                                                                                firstName +
                                                                                "_" +
                                                                                lastName
                                                                              }.pdf`,
                                                                              uid,
                                                                            ]
                                                                          );

                                                                          db.query(
                                                                            "SELECT * FROM `myveda-db`.user_pass_email_cnf",
                                                                            (
                                                                              err,
                                                                              result
                                                                            ) => {
                                                                              if (
                                                                                err
                                                                              ) {
                                                                                console.log(
                                                                                  err
                                                                                );
                                                                              } else {
                                                                                const subject =
                                                                                  result[0]
                                                                                    .subject;
                                                                                const msg =
                                                                                  result[0]
                                                                                    .message;
                                                                                const sign =
                                                                                  result[0]
                                                                                    .signature;
                                                                                // node mailer
                                                                                const output = `

                                          <h3>Dear ${firstName} ${lastName} </h3>
                                          <p>${msg} : ${course_Id}.</p>

                                          <p>
                                          Please find attached certificate for your records.</p>

                                          <p>!!! This is an automatically system generated email ? please do not reply to it.</p>

                                          <p>${sign}</p>

                                          `;

                                                                                db.query(
                                                                                  "SELECT * FROM `myveda-db`.email_srv",
                                                                                  (
                                                                                    err,
                                                                                    result
                                                                                  ) => {
                                                                                    if (
                                                                                      err
                                                                                    ) {
                                                                                      console.log(
                                                                                        err
                                                                                      );
                                                                                    } else {
                                                                                      console.log(
                                                                                        result
                                                                                      );
                                                                                      let host1 =
                                                                                        result[0]
                                                                                          ?.host;
                                                                                      let port1 =
                                                                                        result[0]
                                                                                          ?.port;
                                                                                      let user1 =
                                                                                        result[0]
                                                                                          ?.auth_uid;
                                                                                      let pass1 =
                                                                                        result[0]
                                                                                          ?.auth_pass;
                                                                                      let fromEmail =
                                                                                        result[0]
                                                                                          ?.from_email;
                                                                                      let bccEmail =
                                                                                        result[0]
                                                                                          ?.bcc_email;
                                                                                      let transporter =
                                                                                        nodemailer.createTransport(
                                                                                          {
                                                                                            host: host1,
                                                                                            port: port1,
                                                                                            secure: true, // true for 465, false for other p orts
                                                                                            auth: {
                                                                                              user: user1, // generated ethereal user
                                                                                              pass: pass1, // generated ethereal password
                                                                                            },
                                                                                          }
                                                                                        );

                                                                                      // send mail with defined transport object
                                                                                      let info =
                                                                                        transporter
                                                                                          .sendMail(
                                                                                            {
                                                                                              from: `"no-reply" ${fromEmail}`, // sender address
                                                                                              to: uid, // list of receivers
                                                                                              subject:
                                                                                                subject, // Subject line
                                                                                              bcc: bccEmail,
                                                                                              html: output, // html body
                                                                                              attachments:
                                                                                                [
                                                                                                  {
                                                                                                    filename:
                                                                                                      "Certificate.pdf",
                                                                                                    content:
                                                                                                      fs.createReadStream(
                                                                                                        `./USR_CERT/${
                                                                                                          course_id +
                                                                                                          "_" +
                                                                                                          firstName +
                                                                                                          "_" +
                                                                                                          lastName
                                                                                                        }.pdf`,
                                                                                                        pdfBytes
                                                                                                      ),
                                                                                                  },
                                                                                                ],
                                                                                            }
                                                                                          )
                                                                                          .then(
                                                                                            () => {
                                                                                              res.send(
                                                                                                result
                                                                                              );
                                                                                            }
                                                                                          );

                                                                                      console.log(
                                                                                        "Message sent: %s",
                                                                                        info.messageId
                                                                                      );
                                                                                      console.log(
                                                                                        "Preview URL: %s",
                                                                                        nodemailer.getTestMessageUrl(
                                                                                          info
                                                                                        )
                                                                                      );
                                                                                    }
                                                                                  }
                                                                                );
                                                                              }
                                                                            }
                                                                          );
                                                                        }
                                                                      );
                                                                    }
                                                                  }
                                                                );
                                                              }
                                                            }
                                                          );
                                                        }
                                                      }
                                                    );
                                                  }
                                                }
                                              );
                                            } else {
                                              db.query(
                                                "UPDATE `myveda-db`.?? SET stats_apt3 = ?,eval_date_orq_apt3 = ? WHERE uid = ?",
                                                [tableName, "FAIL", today, uid],
                                                (errT, resultT) => {
                                                  if (err) {
                                                    console.log(errT);
                                                  } else {
                                                    db.query(
                                                      "SELECT * FROM `myveda-db`.user_fail_email_cnf",
                                                      (err, result) => {
                                                        if (err) {
                                                          console.log(err);
                                                        } else {
                                                          const subject =
                                                            result[0].subject;
                                                          const msg =
                                                            result[0].message;
                                                          const sign =
                                                            result[0].signature;
                                                          // node mailer
                                                          const output = `

                      <h3>Dear ${firstName} ${lastName} </h3>
                      <p>${msg} : ${course_id}.</p>

                      <table>
                      <thead>
                      <tr>
                      <th>
                      Attempt
                      </th>
                      <th>TFQs</th>
                      <th>SCQs</th>
                   
                      <th>Total %</th>
                      <th>Result</th>
                      </tr>
                      </thead>
                      <tbody>
                      <tr>
                      <td>
                        2
                      </td>
                      <td>${result1[0].tfq_sc_apt3}</td>
                      <td>${result1[0].scq_sc_apt3}</td>
                    
                      <td>${result1[0].percent_apt3}</td>
                      <td>Failed</td>
                      </tr>
                      </tbody>
                      </table>

                      <p>!!! This is an automatically system generated email ? please do not reply to it.</p>

                      <p>${sign}</p>

                      `;

                                                          db.query(
                                                            "SELECT * FROM `myveda-db`.email_srv",
                                                            (err, result) => {
                                                              if (err) {
                                                                console.log(
                                                                  err
                                                                );
                                                              } else {
                                                                console.log(
                                                                  result
                                                                );
                                                                let host1 =
                                                                  result[0]
                                                                    ?.host;
                                                                let port1 =
                                                                  result[0]
                                                                    ?.port;
                                                                let user1 =
                                                                  result[0]
                                                                    ?.auth_uid;
                                                                let pass1 =
                                                                  result[0]
                                                                    ?.auth_pass;
                                                                let fromEmail =
                                                                  result[0]
                                                                    ?.from_email;
                                                                let bccEmail =
                                                                  result[0]
                                                                    ?.bcc_email;
                                                                let transporter =
                                                                  nodemailer.createTransport(
                                                                    {
                                                                      host: host1,
                                                                      port: port1,
                                                                      secure: true, // true for 465, false for other p orts
                                                                      auth: {
                                                                        user: user1, // generated ethereal user
                                                                        pass: pass1, // generated ethereal password
                                                                      },
                                                                    }
                                                                  );

                                                                // send mail with defined transport object
                                                                let info =
                                                                  transporter
                                                                    .sendMail({
                                                                      from: `"no-reply" ${fromEmail}`, // sender address
                                                                      to: uid, // list of receivers
                                                                      subject:
                                                                        subject +
                                                                        "  " +
                                                                        course_id, // Subject line
                                                                      bcc: bccEmail,
                                                                      html: output, // html body
                                                                    })
                                                                    .then(
                                                                      () => {
                                                                        res.send(
                                                                          result
                                                                        );
                                                                      }
                                                                    );
                                                              }
                                                            }
                                                          );
                                                        }
                                                      }
                                                    );
                                                  }
                                                }
                                              );
                                            }
                                          }
                                        }
                                      );
                                    }
                                  }
                                );
                              }
                            }
                          );
                        }
                      }
                    );
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});
//
app.get("/getcustmordata/:selectValue", (req, res) => {
  const selectValue = req.params.selectValue;
  db.query(
    "SELECT companyName,GSTIN,comp_id,cust_id  FROM `myveda-db`.comp_cust_req_db where cust_id = ?",
    [selectValue],
    (err, result) => {}
  );
});

//get data in customer pop
app.get("/getdataapi/:taken", (req, res) => {
  const taken = req.params.taken;
  db.query(
    "SELECT * FROM `myveda-db`.comp_cust_req_db where cust_id = ?",
    [taken],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
//helpdesk
app.get("/usrhelpdesk", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.usr_hlpdsk", (err, result) => {
    if (err) {
      console.log(err);
    } else {
      res.send(result);
    }
  });
});
//update customer data from pop up
// app.get('/updatecustdatapop',(req,res)=>{
//   const
// })

//for fetch data by id
app.get("/helpdeskuser/:uidTake", (req, res) => {
  const uidTake = req.params.uidTake;
  db.query(
    "SELECT * FROM `myveda-db`.usr_hlpdsk where id=?",
    [uidTake],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
//for update data in help desk
app.put("/sendfeedhelp", (req, res) => {
  const uid = req.body.uid;
  const date = req.body.date;
  const time = req.body.time;
  const rcaRm = req.body.rcaRm;
  const acRm = req.body.acRm;
  const id = req.body.id;
  const ft = req.body.fault;
  const status = req.body.status;

  db.query(
    "UPDATE `myveda-db`.usr_hlpdsk SET rca_rm = ?, ac_rm = ?, ac_date = ?, ac_time = ?, status = ? where id = ?",
    [rcaRm, acRm, date, time, status, id],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
        const output = `

        <h3>Dear User </h3>
      
        <p>We are sorry for the inconvenience,Your Fault Ticket Update is as Follows:</p>
        <p>  <b>MyIT FT-ID</b> : ${ft}</p>
        <p>  <b>RCA-Remark</b> : ${rcaRm}</p>
        <p> <b>Status</b> : <b>${status}</b> </p>
       
        <p><u><b>Caution : Please do not share these credentials. These are only for you and not for outsiders.</b></u></p>
        
        <p>!!! This is an automatically system generated email ? please do not reply to it.</p>
      
        <p>Thanks & Regards</p>
        <p>MYVEDAIT TEAM</p>
      
        `;
        console.log(output);
        db.query("SELECT * FROM `myveda-db`.email_srv", (err, result) => {
          if (err) {
            console.log(err);
          } else {
            console.log(result);
            let host1 = result[0]?.host;
            let port1 = result[0]?.port;
            let user1 = result[0]?.auth_uid;
            let pass1 = result[0]?.auth_pass;
            let fromEmail = result[0]?.from_email;
            let bccEmail = result[0]?.bcc_email;
            let transporter = nodemailer.createTransport({
              host: host1,
              port: port1,
              secure: true, // true for 465, false for other p orts
              auth: {
                user: user1, // generated ethereal user
                pass: pass1, // generated ethereal password
              },
            });

            // send mail with defined transport object
            let info = transporter.sendMail({
              from: `"" ${fromEmail}`, // sender address
              // list of receivers
              to: uid,
              subject: "Fault Ticket Update", // Subject line
              bcc: bccEmail,
              html: output, // html body
            });
            console.log("Message sent: %s", info.messageId);
            console.log("Preview URL: %s", nodemailer.getTestMessageUrl(info));
          }
        });
      }
    }
  );
});

//upload company logo
app.put("/uploadcomplogo", (req, res) => {
  const ft = req.body.myFile;

  db.query(
    "UPDATE `myveda-db`.upld_logo SET comp_logo = ? WHERE id = ?",
    [ft, "2"],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});

//upload company logo
app.put("/uploadprodlogo", (req, res) => {
  const ft = req.body.myFile;
  db.query(
    "UPDATE `myveda-db`.upld_logo SET pro_logo = ? WHERE id = ?",
    [ft, "2"],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
//upload customer logo
app.put("/uploadcustlogo", (req, res) => {
  const ft = req.body.myFile;
  db.query(
    "UPDATE `myveda-db`.upld_logo SET cust_logo = ? WHERE id = ?",
    [ft, "2"],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
//get comp logo
app.get("/getcomplogo", (req, res) => {
  db.query("SELECT * from `myveda-db`.upld_logo", (err, result) => {
    if (err) {
      console.log(err);
    } else {
      res.send(result);
    }
  });
});
//select all logo
app.get("/allimage", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.upld_logo", (err, result) => {
    if (err) {
      console.log(err);
    } else {
      res.send(result);
    }
  });
});

/*




user app 





*/

//proctoring Time interval
app.get("/aiprocteringtime", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.proctoring_time_interval",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//sent proctoring time interval
app.put("/sendaiprocteringtime", (req, res) => {
  const time = req.body.AiProctoringData;
  db.query(
    "UPDATE `myveda-db`.proctoring_time_interval SET proctoring_time_interval_seconds = ? where id = ? ",
    [time, "1"],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//data of user data
app.get("/resultdb1/:cust_id/:takeCourseId", (req, res) => {
  const cust_id = req.params.cust_id;
  const takeCourseId = req.params.takeCourseId;
  const littleCourse = takeCourseId.toLowerCase().replace("-", "_");

  db.query(
    "SELECT * FROM `myveda-db`.?? where cust_id = ? and course_id = ?",
    [littleCourse, cust_id, takeCourseId],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//data of user data individuals
app.get("/resultdb/indi/:takeCourseId", (req, res) => {
  const takeCourseId = req.params.takeCourseId;
  const littleCourse = takeCourseId.toLowerCase().replace("-", "_");
  db.query(
    "SELECT * FROM `myveda-db`.?? where course_id = ?",
    [littleCourse, takeCourseId],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//get registration date of user
app.get("/takeregdata/:getUid", (req, res) => {
  const getUid = req.params.getUid;
  db.query(
    "SELECT req_date FROM `myveda-db`.customer_reg where businessMail = ?",
    [getUid],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
app.get("/alluserdata/:takeValue", (req, res) => {
  const takeValue = req.params.takeValue;

  console.log;
  if (takeValue === "IND0") {
    db.query(
      "SELECT businessMail FROM `myveda-db`.customer_reg where cust_id LIKE '%IND0%'",
      [takeValue],
      (err, result) => {
        if (err) console.log(err);
        else {
          res.send(result);
        }
      }
    );
  } else {
    db.query(
      "SELECT businessMail FROM `myveda-db`.customer_reg where cust_id = ?",
      [takeValue],
      (err, result) => {
        if (err) console.log(err);
        else {
          res.send(result);
        }
      }
    );
  }
});

//get course id type for learner performance dashboard
app.get("/admin/course/type/:takeValue", (req, res) => {
  const takeValue = req.params.takeValue;
  db.query(
    "SELECT * from `myveda-db`.add_courses WHERE course_id = ?",
    [takeValue],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//get image for full screen
app.get("/getaiimages/:id", (req, res) => {
  const id = req.params.id;

  db.query(
    "SELECT img FROM `myveda-db`.user_exam_proctoring_data where id  = ?",
    [id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//update contract
app.put("/updatecontract", (req, res) => {
  const cust_id = req.body.cust_id;
  const number = req.body.number;
  const startDate = req.body.startDate;
  const endDate = req.body.endDate;

  db.query(
    "UPDATE `myveda-db`.comp_cust_req_db SET user_limit_allowed = ?, start_date = ?, end_date = ? WHERE cust_id = ?",
    [number, startDate, endDate, cust_id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// //exam data for learner report
// app.get("/getresults/user/:takeValue/:uid", (req, res) => {
//   const takeValue = req.params.takeValue;
//   const uid = req.params.uid;

//   const tableName = takeValue.toLowerCase().replace("-", "_");

//   db.query(
//     "SELECT * FROM `myveda-db`.?? where uid = ? AND course_id = ?",
//     [tableName, uid, takeValue],
//     (err, result) => {
//       if (err) console.log(err);
//       else res.send(result);
//     }
//   );
// });
//get exam data of AI
app.get(
  "/getallexamdataofai/:course_id/:attempt/:user/:examType1",
  (req, res) => {
    const course_id = req.params.course_id;
    const attempt = req.params.attempt;
    const user = req.params.user;
    const examType1 = req.params.examType1;

    db.query(
      "SELECT * FROM `myveda-db`.user_exam_proctoring_data where uid = ? and exam_attempt = ? and exam_type = ? and course_id =?",
      [user, attempt, examType1, course_id],
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  }
);
app.get("/getdataofaipass/:course_id/:attempt/:user/:examType1", (req, res) => {
  const course_id = req.params.course_id;
  const attempt = req.params.attempt;
  const user = req.params.user;
  const examType1 = req.params.examType1;

  db.query(
    "SELECT pass_or_fail FROM `myveda-db`.user_exam_proctoring_data WHERE (uid = ? AND course_id = ? AND exam_attempt = ? AND exam_type = ? AND pass_or_fail = 'Pass')",
    [user, course_id, attempt, examType1],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
app.get("/getdataofaifail/:course_id/:attempt/:user/:examType1", (req, res) => {
  const course_id = req.params.course_id;
  const attempt = req.params.attempt;
  const user = req.params.user;
  const examType1 = req.params.examType1;

  db.query(
    "SELECT pass_or_fail FROM `myveda-db`.user_exam_proctoring_data WHERE (uid = ? AND course_id = ? AND exam_attempt = ? AND exam_type = ? AND pass_or_fail = 'Fail' )",
    [user, course_id, attempt, examType1],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//cursor proctoring of exam
app.get(
  "/cursorproctoringfail/:course_id/:attempt/:user/:examType1",
  (req, res) => {
    const course_id = req.params.course_id;
    const attempt = req.params.attempt;
    const user = req.params.user;
    const examType1 = req.params.examType1;

    db.query(
      "SELECT cursor_move FROM `myveda-db`.exam_cursor_move_out WHERE (uid = ? AND course_id = ? AND exam_attempt = ? AND exam_type = ? AND cursor_move = 'Fail' )",
      [user, course_id, attempt, examType1],
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  }
);
//get idle time out
app.get("/idletimeout", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.idle_time_out", (err, result) => {
    if (err) console.log(err);
    else res.send(result);
  });
});
//update idle time out
app.put("/sendidletimeout", (req, res) => {
  const time = req.body.IdleTimeOut;
  db.query(
    "UPDATE `myveda-db`.idle_time_out SET time_in_min = ? WHERE id = '1'",
    [time],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//
app.get(
  "/cursorproctoring/:course_id/:attempt/:user/:examType1",
  (req, res) => {
    const course_id = req.params.course_id;
    const attempt = req.params.attempt;
    const user = req.params.user;
    const examType1 = req.params.examType1;

    db.query(
      "SELECT * FROM `myveda-db`.exam_cursor_move_out WHERE (uid = ? AND course_id = ? AND exam_attempt = ? AND exam_type = ? AND cursor_move = 'Fail' )",
      [user, course_id, attempt, examType1],
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  }
);

//upload customer chosen by admin
app.put("/uploadcustlogo2", (req, res) => {
  const img = req.body.image;
  const cust_id = req.body.cust_id;

  db.query(
    "UPDATE `myveda-db`.comp_cust_req_db SET Logo = ? WHERE cust_id = ?",
    [img, cust_id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//get question per section
app.get("/getquespersection", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.dfn_ques_per_section", (err, result) => {
    if (err) console.log(err);
    else res.send(result);
  });
});

//get all number of scqs question
app.get("/getallscqs/:value", (req, res) => {
  const value = req.params.value;

  db.query(
    "SELECT question FROM `myveda-db`.add_scqs WHERE qb_id = ?",
    [value],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//get all number of tfqs question
app.get("/getalltfqs/:value", (req, res) => {
  const value = req.params.value;

  db.query(
    "SELECT question FROM `myveda-db`.add_tfqs WHERE qb_id = ? ",
    [value],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//get all number of orqs question
app.get("/getallorqs/:value", (req, res) => {
  const value = req.params.value;

  db.query(
    "SELECT question FROM `myveda-db`.add_orqs WHERE qb_id = ?",
    [value],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//send  number of question per section

app.put("/sendquespersection", (req, res) => {
  const tfqs = req.body.newTfqs;
  const scqs = req.body.newScqs;
  const orqs = req.body.newOrqs;

  db.query(
    "UPDATE `myveda-db`.dfn_ques_per_section SET tfqs = ?, scqs = ?, orqs = ? WHERE id = '1'",
    [tfqs, scqs, orqs],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );

  const tfqsMarks = req.body.newTfqsMarks;
  const scqsMarks = req.body.newScqsMarks;
  const totalMarks = req.body.total;
  const orqsMarks = req.body.newOrqsMarks;
  db.query(
    "UPDATE `myveda-db`.dfn_per_ques_mrks set tfqs_per_ques_marks = ?,scqs_per_ques_marks=?,orqs_per_ques_marks=?, tt_marks = ? where id=1",
    [tfqsMarks, scqsMarks, orqsMarks, totalMarks],
    (err, result) => {
      console.log(err);
    }
  );
});

//send count data in course id tables
app.get("/evaluator/send/count/eval/exam", (req, res) => {
  db.query(
    "SELECT * from  `myveda-db`.add_courses where course_id is not NULL",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        var items = Object.keys(result);
        items.forEach(function (item) {
          // console.log(result[item].course_id);
          const courseId = result[item].course_id;

          const takeCourseId = result[item].course_id
            .toLowerCase()
            .replace("-", "_");

          db.query(
            "SELECT * FROM `myveda-db`.?? where (tfq_sc_apt1 != '' and scq_sc_apt1 !='' and ques_1_apt1 != '' and ans_1_apt1 != '' and (stats_apt1 = 'Pending' OR stats_apt1 = 'FAIL')  and (stats_apt2 = '' OR stats_apt2 = 'FAIL') and stats_apt3='')",
            [takeCourseId],
            (err1, result1) => {
              if (err1) {
                console.log(err1);
              } else {
                const examCount = result1.length;
                console.log(examCount);

                db.query(
                  "UPDATE `myveda-db`.add_courses SET evl_pending = ? WHERE course_id = ?",
                  [examCount, courseId]
                );
              }
            }
          );
        });
      }
    }
  );
});

//send count data in course id tables
app.get("/api/v1/update/pass/learner/data/eval/exam", (req, res) => {
  db.query(
    "SELECT * from  `myveda-db`.add_courses where course_id is not NULL",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        var items = Object.keys(result);
        items.forEach(function (item) {
          // console.log(result[item].course_id);
          const courseId = result[item].course_id;

          const takeCourseId = result[item].course_id
            .toLowerCase()
            .replace("-", "_");

          db.query(
            "SELECT * FROM `myveda-db`.?? where (tfq_sc_apt1 != '' and scq_sc_apt1 !='' and ques_1_apt1 != '' and ans_1_apt1 != '' and ( stats_apt1 = 'PASS' or stats_apt2 = 'PASS' or stats_apt3='PASS'))",
            [takeCourseId],
            (err1, result1) => {
              if (err1) {
                console.log(err1);
              } else {
                const examCount = result1.length;
                console.log(examCount);

                db.query(
                  "UPDATE `myveda-db`.add_courses SET qualified_learners = ? WHERE course_id = ?",
                  [examCount, courseId]
                );
              }
            }
          );
        });
      }
    }
  );
});

//get all course id

app.get("/evaluator/courseids", (req, res) => {
  db.query(
    "SELECT * from  `myveda-db`.add_courses where stats = 1",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

app.post("/sendpqbid", (req, res) => {
  const courseId = req.body.course_id;
  const pQbId = courseId + "-PQB-ID";

  db.query(
    "SELECT * FROM `myveda-db`.p_qb_id where p_qb_id = ?",
    [pQbId],
    (err, result) => {
      if (err) console.log(err);
      else {
        if (result.length > 0) {
          res.send("fail");
        } else {
          db.query(
            "INSERT INTO `myveda-db`.p_qb_id (p_qb_id) VALUES(?)",
            [pQbId],
            (err1, result1) => {
              if (err1) console.log(err1);
              else res.send(result1);
            }
          );
        }
      }
    }
  );
});
//add question in practice Question and answers
app.post("/addqadata", (req, res) => {
  const qbId = req.body.qbId;
  const question = req.body.question;
  const answer = req.body.answer;
  db.query(
    "INSERT INTO `myveda-db`.add_qa(p_qb_id,question,answer) VALUES(?,?,?)",
    [qbId, question, answer],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//get all Practice Question bank ids
app.get("/getallpqbid", (req, res) => {
  db.query("SELECT * FROM  `myveda-db`.p_qb_id", (err, result) => {
    if (err) console.log(err);
    else res.send(result);
  });
});
//get all counnt data
app.get("/getalladdqa/:value", (req, res) => {
  const value = req.params.value;
  db.query(
    "SELECT * FROM `myveda-db`.add_qa WHERE p_qb_id = ?",
    [value],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//update Design
app.put("/updatedesign", (req, res) => {
  const cust_id = req.body.cust_id;
  const number = req.body.number;

  db.query(
    "UPDATE `myveda-db`.comp_cust_req_db SET design_value = ? WHERE cust_id = ?",
    [number, cust_id],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});

//practice per section
app.put("/sendquesperpractice", (req, res) => {
  const newQandA = req.body.newQandA;
  const newNCQ = req.body.newNCQ;

  db.query(
    "UPDATE `myveda-db`.dfn_ques_per_section SET q_and_a = ?,nc_writing = ? where id = '1'",
    [newQandA, newNCQ],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//customer details
app.get("/data/:id", (req, res) => {
  const id = req.params.id;
  db.query(
    "SELECT * FROM `myveda-db`.comp_cust_req_db WHERE id =?",
    [id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//data for pqbid

// app.get("/admin/pqbid/:data", (req, res) => {
//   const data = req.params.data;
//   db.query(
//     "SELECT * FROM `myveda-db`.add_courses where course_id = ?",
//     [data],
//     (err, result) => {
//       if (err) console.log(err);
//       else console.log(result);
//     }
//   );
// });

// first course id pqbid
app.get("/admin/pqbid/one/:one/:cust_id", (req, res) => {
  const { one, cust_id } = req.params;
  db.query(
    "SELECT t1.*, t2.* FROM `myveda-db`.corp_cust_course_ids t1 JOIN `myveda-db`.add_courses t2 ON t1.course_id = t2.course_id WHERE t1.cust_id = ?",
    [cust_id],
    (err, result) => {
      if (err) console.log(err);
      else {
        const arr = result;
        const responseArray = []; // Array to accumulate items

        arr.forEach((item) => {
          responseArray.push(item);

          if (responseArray.length === arr.length) {
            // All iterations are completed
            res.json(responseArray);
          }
        });
      }
    }
  );
});
// second course id pqbid
app.get("/admin/pqbid/two/:two", (req, res) => {
  const two = req.params.two;
  db.query(
    "SELECT * from `myveda-db`.add_courses where course_id = ?",
    [two],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

// third course id pqbid
app.get("/admin/pqbid/three/:three", (req, res) => {
  const three = req.params.three;
  db.query(
    "SELECT * from `myveda-db`.add_courses where course_id = ?",
    [three],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

// four course id pqbid
app.get("/admin/pqbid/four/:four", (req, res) => {
  const four = req.params.four;
  db.query(
    "SELECT * from `myveda-db`.add_courses where course_id = ?",
    [four],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// five course id pqbid
app.get("/admin/pqbid/five/:five", (req, res) => {
  const five = req.params.five;
  db.query(
    "SELECT * from `myveda-db`.add_courses where course_id = ?",
    [five],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// six course id pqbid
app.get("/admin/pqbid/six/:six", (req, res) => {
  const six = req.params.six;
  db.query(
    "SELECT * from `myveda-db`.add_courses where course_id = ?",
    [six],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// seven course id pqbid
app.get("/admin/pqbid/seven/:seven", (req, res) => {
  const seven = req.params.seven;
  db.query(
    "SELECT * from `myveda-db`.add_courses where course_id = ?",
    [seven],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// eight course id pqbid
app.get("/admin/pqbid/eight/:eight", (req, res) => {
  const eight = req.params.eight;
  db.query(
    "SELECT * from `myveda-db`.add_courses where course_id = ?",
    [eight],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// nine course id pqbid
app.get("/admin/pqbid/nine/:nine", (req, res) => {
  const nine = req.params.nine;
  db.query(
    "SELECT * from `myveda-db`.add_courses where course_id = ?",
    [nine],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// ten course id pqbid
app.get("/admin/pqbid/ten/:ten", (req, res) => {
  const ten = req.params.ten;
  db.query(
    "SELECT * from `myveda-db`.add_courses where course_id = ?",
    [ten],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// eleven course id pqbid
app.get("/admin/pqbid/eleven/:eleven", (req, res) => {
  const eleven = req.params.eleven;
  db.query(
    "SELECT * from `myveda-db`.add_courses where course_id = ?",
    [eleven],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// twelve course id pqbid
app.get("/admin/pqbid/twelve/:twelve", (req, res) => {
  const twelve = req.params.twelve;
  db.query(
    "SELECT * from `myveda-db`.add_courses where course_id = ?",
    [twelve],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//get status for activate or deactivate user
app.get("/deactivate/user/:uid", (req, res) => {
  const uid = req.params.uid;
  db.query(
    "SELECT * FROM `myveda-db`.customer_reg WHERE businessMail = ?",
    [uid],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//update status

app.put("/admin/user/status/update", (req, res) => {
  const { uid, status, cust_id } = req.body;

  db.query(
    "UPDATE `myveda-db`.customer_reg SET reg_status = ? WHERE businessMail = ?",
    [status, uid],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//get all question of TFQS
app.get("/admin/get/question/tfqs/:qbId", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.add_tfqs WHERE qb_id = ?",
    [req.params.qbId],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//get all question of scqs
app.get("/admin/get/question/scqs/:qbId", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.add_scqs WHERE qb_id = ?",
    [req.params.qbId],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//get all question of orqs
app.get("/admin/get/question/orqs/:qbId", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.add_orqs WHERE qb_id = ?",
    [req.params.qbId],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// question id tfqs

app.get("/getquestion/tfqs/:val", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.add_tfqs WHERE id = ?",
    [req.params.val],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// question id scqs

app.get("/getquestion/scqs/:val", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.add_scqs WHERE id = ?",
    [req.params.val],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// question id scqs

app.get("/getquestion/orqs/:val", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.add_orqs WHERE id = ?",
    [req.params.val],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//update question tfqs
app.put("/update/question/tfqs", (req, res) => {
  const { question, opt1, opt2, id, answer } = req.body;
  db.query(
    "UPDATE `myveda-db`.add_tfqs SET question = ?, opt1 = ?, opt2 = ?, c_ans = ? WHERE id = ?",
    [question, opt1, opt2, answer, id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//update question scqs
app.put("/update/question/scqs", (req, res) => {
  const { question, opt1, opt2, opt3, opt4, id, answer } = req.body;
  db.query(
    "UPDATE `myveda-db`.add_scqs SET question = ?, opt1 = ?, opt2 = ?,opt3 = ?, opt4= ?, c_ans = ? WHERE id = ?",
    [question, opt1, opt2, opt3, opt4, answer, id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//update question orqs
app.put("/update/question/orqs", (req, res) => {
  const { question, id, answer } = req.body;
  db.query(
    "UPDATE `myveda-db`.add_orqs SET question = ?,answer = ? WHERE id = ?",
    [question, answer, id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//delete question tfqs
app.delete("/question/delete/tfqs/:val", (req, res) => {
  db.query(
    "DELETE from `myveda-db`.add_tfqs WHERE id = ?",
    [req.params.val],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//delete question scqs
app.delete("/question/delete/scqs/:val", (req, res) => {
  db.query(
    "DELETE from `myveda-db`.add_scqs WHERE id = ?",
    [req.params.val],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//delete question orqs
app.delete("/question/delete/orqs/:val", (req, res) => {
  db.query(
    "DELETE from `myveda-db`.add_orqs WHERE id = ?",
    [req.params.val],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

// bulk upload excel for exam

app.post("/excel", (req, res) => {
  const file = req.files.file;
  fs.writeFileSync(__dirname + `/uploadsq/${file?.name}`, file?.data);

  const { type, qbId } = req.body;
  // const buf = Buffer.from(file?.data, "utf8");
  console.log(file);

  importFileToDb("./uploadsq/" + file?.name);

  function importFileToDb(exFile) {
    readXlsxFile(exFile).then((rows) => {
      rows.shift();
      res.send(rows);
      var items = Object.keys(rows);
      items.forEach(function (item) {
        if (type === "TFQS") {
          let query =
            "INSERT INTO `myveda-db`.add_tfqs (qb_id,question,opt1,opt2,c_ans) VALUES (?,?)";
          db.query(query, [qbId, rows[item]], (err, result) => {
            if (err) console.log(err);
            else console.log(result);
          });
        } else if (type === "SCQS") {
          let query =
            "INSERT INTO `myveda-db`.add_scqs (qb_id,question,opt1,opt2,opt3,opt4,c_ans) VALUES (?,?)";
          db.query(query, [qbId, rows[item]], (err, result) => {
            if (err) console.log(err);
            else console.log(result);
          });
        } else if (type === "ORQS") {
          let query =
            "INSERT INTO `myveda-db`.add_orqs (qb_id,question,answer) VALUES (?,?)";
          db.query(query, [qbId, rows[item]], (err, result) => {
            if (err) console.log(err);
            else console.log(result);
          });
        }
      });
    });
  }
});

//

// bulk upload excel for practice quetion and answers

app.post("/practice/upload", (req, rest) => {
  const file = req.files.file;
  fs.writeFileSync(__dirname + `/practice/${file?.name}`, file?.data);

  const { pqbId } = req.body;
  // const buf = Buffer.from(file?.data, "utf8");

  importFileToDb("./practice/" + file?.name);

  function importFileToDb(exFile) {
    readXlsxFile(exFile).then((rows) => {
      rest.send(rows);
      rows.shift();

      var items = Object.keys(rows);
      items.forEach(function (item) {
        console.log(rows[item]);
        let query =
          "INSERT INTO `myveda-db`.add_qa(p_qb_id,question,answer) VALUES (?,?)";
        db.query(query, [pqbId, rows[item]], (err, response) => {
          console.log(err);
        });
      });
    });
  }
});

//get we email cnf data
app.get("/getweemailcnfdata", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.user_we_email_cnf where id = '1'",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//get all rows exam
app.get("/all/attempt/exam/:customerID/:userIdState/:takeValue", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.?? WHERE uid = ? AND  cust_id = ?",
    [req.params.takeValue, req.params.userIdState, req.params.customerID],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//
// check for any course active or not for learner
app.get("/check/expiry/course/:user", (req, res) => {
  let today = new Date().toISOString().slice(0, 10);
  db.query(
    "SELECT * FROM `myveda-db`.customer_reg where businessMail = ?",
    [req.params.user],
    (err, result) => {
      if (err) console.log(err);
      else {
        const regDate = result[0].req_date;

        // result.forEach((x) => {
        //   db.query("");
        // });
        db.query(
          "SELECT * FROM `myveda-db`.user_course_map_table_la where uid = ?",
          [req.params.user],
          (err2, result2) => {
            if (err2) console.log(err2);
            else {
              result2.forEach((x) => {
                db.query(
                  "SELECT * FROM `myveda-db`.add_courses where course_id = ?",
                  [x.course_id],
                  (err3, result3) => {
                    if (err3) console.log(err3);
                    else {
                      const duration = result3[0].duration;
                      var dateObj = new Date(x.course_req_date);
                      console.log(dateObj);
                      dateObj.setDate(dateObj.getDate() + duration);
                      var newDateStr = dateObj.toISOString().slice(0, 10);
                      console.log(newDateStr);

                      let today = new Date().toISOString().slice(0, 10);
                      var data = 0;
                      if (today > newDateStr) {
                        // res.sendStatus(200).json({ message: true });
                        data = 1;
                      }
                      if (data === 1) {
                        db.query(
                          "select * FROM `myveda-db`.active_usr_data_la where uid = ?",
                          [req.params.user],
                          (err6, result6) => {
                            if (err6) console.log(err6);
                            else {
                              if (result6.length === 0) {
                                db.query(
                                  "insert into `myveda-db`.active_usr_data_la(uid,status) values(?,?)",
                                  [req.params.user, "0"]
                                );
                              } else {
                                db.query(
                                  "update `myveda-db`.active_usr_data_la set status = ? where uid = ?",
                                  ["0", req.params.user]
                                );
                              }
                            }
                          }
                        );
                      }
                    }
                  }
                );
              });
            }
          }
        );
      }
    }
  );
});
//delete we attempt for user exam
app.delete("/delete/attempt/row/exam/:e/:courseId", (req, res) => {
  db.query(
    "delete from `myveda-db`.?? WHERE id = ?",
    [req.params.courseId, req.params.e],
    (err, result) => {
      if (err) console.log(err);
      else {
        console.log(result);
        res.send(result);
      }
    }
  );
});
//take type and standard of course id
app.get("/check/type/course/:course_id", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.add_courses where course_id = ?",
    [req.params.course_id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

app.get("/all/user/customers/comp/:cust_id/:course_id", (req, res) => {
  const { cust_id, course_id } = req.params;

  db.query(
    "SELECT * FROM `myveda-db`.customer_reg where cust_id = ?",
    [cust_id, course_id],
    (err, result) => {
      if (err) console.log(err);
      else {
        res.send(result);
      }
    }
  );
});
app.get("/all/user/individuals", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.user_course_map_table_la",
    (err, result) => {
      if (err) console.log(err);
      else {
        res.send(result);
        const arr = result;

        arr.forEach((element) => {
          db.query(
            "SELECT * FROM `myveda-db`.customer_reg where businessMail = ?",
            [element.uid],
            (err2, result2) => {
              if (err2) console.log(err2);
              else {
                let reg_date = result2[0]?.req_date;
                db.query(
                  "UPDATE `myveda-db`.user_course_map_table_la SET reg_date=? where uid = ?",
                  [reg_date, element.uid],
                  (err3, result3) => {
                    if (err3) console.log(err3);
                    else {
                    }
                  }
                );
              }
            }
          );
        });
      }
    }
  );
});
//get type of course id
app.get("/get/type/course/:course_id", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.add_courses where course_id = ?",
    [req.params.course_id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//all course id
app.get("/all/course_id/indi", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.add_courses",
    [req.params.course_id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//get all standard\
app.get("/all/standard/list", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.add_std_list", (err, result) => {
    if (err) console.log(err);
    else res.send(result);
  });
});

// add product service
app.post("/product/service/data", (req, res) => {
  console.log(req.body);
  const { product, title, des } = req.body;
  db.query(
    "SELECT * FROM main_admin_db.product_cat where category_title = ?",
    [product],
    (err, result) => {
      if (err) console.log(err);
      else {
        const img_name = result[0]?.category_img;
        db.query(
          "insert into main_admin_db.product_services(product_cat,service_ttl,img_name,service_des,stats) values(?,?,?,?,?)",
          [product, title, img_name, des, 1],
          (err2, result2) => {
            if (err2) console.log(err2);
            else res.send(result2);
          }
        );
      }
    }
  );
});
//get all promo coupon code
app.get("/get/all/coupon", (req, res) => {
  db.query("SELECT * FROM main_admin_db.coupon_table", (err, result) => {
    if (err) console.log(err);
    else res.send(result);
  });
});

//promo creation in data base
app.post("/coupon/id/creation", (req, res) => {
  const { couponId, date, discount, uses } = req.body;

  var randNo = generator.generate({
    length: 2,
    numbers: true,
  });

  let coupon = couponId + Math.floor(Math.random() * 90 + 10);

  // var today = new Date();
  // var dd = String(today.getDate()).padStart(2, "0");
  // var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
  // var yyyy = today.getFullYear();

  // today = dd + "/" + mm + "/" + yyyy;

  db.query(
    "INSERT into main_admin_db.coupon_table (coupon_id,discount,end_date,uses,coupon_used,uses_remain) values(?,?,?,?,?,?)",
    [coupon + discount, discount, date, uses, 0, uses],
    (err, result) => {
      if (err) console.log(err);
      else {
        db.query(
          "SELECT * FROM `myveda-db`.email_temp_coupon_la",
          (err1, result1) => {
            if (err1) console.log(err1);
            else {
              const subject = result1[0].subject;
              const msg = result1[0].message;
              const caution = result1[0].caution;
              const sign = result1[0].signature;

              const output = `
  
    <h3>Dear Admin </h3>
    <p> ${msg}
    </p>

    <p><b>COUPON-ID : ${coupon + discount}</b></p>

    <p><b>Discount : ${discount} %</b></p>

    <p><b>End Date : ${date}</b></p>

    <p><b>Uses Limit : ${uses}</b></p>

    <p><u><b>Caution : ${caution}</b></u></p>

   

    <p>Thanks &#38; Best Regards </p>

    <p>${sign}</p>


    `;

              db.query("SELECT * FROM `myveda-db`.email_srv", (err, result) => {
                if (err) {
                  console.log(err);
                } else {
                  console.log(result);
                  let host1 = result[0]?.host;
                  let port1 = result[0]?.port;
                  let user1 = result[0]?.auth_uid;
                  let pass1 = result[0]?.auth_pass;
                  let fromEmail = result[0]?.from_email;
                  let bccEmail = result[0]?.bcc_email;
                  let transporter = nodemailer.createTransport({
                    host: host1,
                    port: port1,
                    secure: true, // true for 465, false for other p orts
                    auth: {
                      user: user1, // generated ethereal user
                      pass: pass1, // generated ethereal password
                    },
                  });

                  // send mail with defined transport object
                  let info = transporter.sendMail({
                    from: `"" ${fromEmail}`, // sender address
                    // list of receivers
                    subject: subject, // Subject line
                    bcc: bccEmail,
                    html: output, // html body
                  });
                }
              });
            }
          }
        );

        res.send(result);
      }
    }
  );
});
//email temp bill info
app.get("/get/bill/info/user", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.email_temp_learner_lead",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//email temp coupon info
app.get("/get/coupon/info", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.email_temp_coupon_la", (err, result) => {
    if (err) console.log(err);
    else res.send(result);
  });
});
//email temp trainer info
app.get("/get/trainerla/info", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.email_temp_trainer_la", (err, result) => {
    if (err) console.log(err);
    else res.send(result);
  });
});
//email temp engineer info
app.get("/get/eng/info", (req, res) => {
  db.query(
    "SELECT * FROM `main_admin_db`.email_temp_eng_reg",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//email temp engineer update info
app.get("/update/get/eng/info", (req, res) => {
  db.query(
    "SELECT * FROM `main_admin_db`.email_temp_update_eng",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//email temp ticket reg info
app.get("/ticket/get/eng/info", (req, res) => {
  db.query(
    "SELECT * FROM `main_admin_db`.email_temp_ticket_reg",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//email temp assign ticket info
app.get("/assign/ticket/get/eng/info", (req, res) => {
  db.query(
    "SELECT * FROM `main_admin_db`.email_temp_ticket_assign",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//email temp trainer info update
app.get("/get/trainerla/update/info", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.email_temp_update_trainer_la",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//email temp trainer info update
app.get("/get/batch/generate/info", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.email_temp_batch_gen_la",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//email temp complaint info update
app.get("/get/complaint/info/temp", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.email_temp_complaint_la",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//trainer reg email config subject
app.put("/updatetrainerlasubject", (req, res) => {
  const subject = req.body.subject1;
  db.query(
    "UPDATE `myveda-db`.email_temp_trainer_la SET subject =?  WHERE id = 1",
    [subject],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//update email url of trainer info
app.put("/updatetrainerlaurl", (req, res) => {
  const url = req.body.url;
  db.query(
    "UPDATE `myveda-db`.email_temp_trainer_la SET url =?  WHERE id = 1",
    [url],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email message of trainer info
app.put("/updatetrainerlamsg", (req, res) => {
  const message = req.body.message;
  db.query(
    "UPDATE `myveda-db`.email_temp_trainer_la SET message =?  WHERE id = 1",
    [message],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email caution of trainer info
app.put("/updatetrainerlacaution", (req, res) => {
  const caution = req.body.caution;
  db.query(
    "UPDATE `myveda-db`.email_temp_trainer_la SET caution =?  WHERE id = 1",
    [caution],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email sign of trainer info
app.put("/updatetrainerlasign", (req, res) => {
  const sign = req.body.sign;
  db.query(
    "UPDATE `myveda-db`.email_temp_trainer_la SET signature =?  WHERE id = 1",
    [sign],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
// Engineer

//trainer reg email config subject
app.put("/updateengregsubject", (req, res) => {
  const subject = req.body.subject1;
  db.query(
    "UPDATE `main_admin_db`.email_temp_eng_reg SET subject =?  WHERE id = 1",
    [subject],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//update email url of trainer info
app.put("/updateengregurl", (req, res) => {
  const url = req.body.url;
  db.query(
    "UPDATE `main_admin_db`.email_temp_eng_reg SET url =?  WHERE id = 1",
    [url],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email message of trainer info
app.put("/updateengregmsg", (req, res) => {
  const message = req.body.message;
  db.query(
    "UPDATE `main_admin_db`.email_temp_eng_reg SET message =?  WHERE id = 1",
    [message],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email caution of trainer info
app.put("/updateengregcaution", (req, res) => {
  const caution = req.body.caution;
  db.query(
    "UPDATE `main_admin_db`.email_temp_eng_reg SET caution =?  WHERE id = 1",
    [caution],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email sign of trainer info
app.put("/updateengregsign", (req, res) => {
  const sign = req.body.sign;
  db.query(
    "UPDATE `main_admin_db`.email_temp_eng_reg SET signature =?  WHERE id = 1",
    [sign],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
// Egnineer Update
//trainer reg email config subject
app.put("/updateengregupdatesubject", (req, res) => {
  const subject = req.body.subject1;
  db.query(
    "UPDATE `main_admin_db`.email_temp_update_eng SET subject =?  WHERE id = 1",
    [subject],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//update email url of trainer info
app.put("/updateengregupdateurl", (req, res) => {
  const url = req.body.url;
  db.query(
    "UPDATE `main_admin_db`.email_temp_update_eng SET url =?  WHERE id = 1",
    [url],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email message of trainer info
app.put("/updateengregupdatemsg", (req, res) => {
  const message = req.body.message;
  db.query(
    "UPDATE `main_admin_db`.email_temp_update_eng SET message =?  WHERE id = 1",
    [message],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email caution of trainer info
app.put("/updateengregupdatecaution", (req, res) => {
  const caution = req.body.caution;
  db.query(
    "UPDATE `main_admin_db`.email_temp_update_eng SET caution =?  WHERE id = 1",
    [caution],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email sign of trainer info
app.put("/updateengregupdatesign", (req, res) => {
  const sign = req.body.sign;
  db.query(
    "UPDATE `main_admin_db`.email_temp_update_eng SET signature =?  WHERE id = 1",
    [sign],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
// referral program

//trainer reg email config subject
app.get("/get/api/referral/info/data", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.email_temp_referral_program",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
app.put("/update/referral/subject", (req, res) => {
  const subject = req.body.subject1;
  db.query(
    "UPDATE `myveda-db`.email_temp_referral_program SET subject =?  WHERE id = 1",
    [subject],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//update email url of trainer info
app.put("/update/referral/url", (req, res) => {
  const url = req.body.url;
  db.query(
    "UPDATE `myveda-db`.email_temp_referral_program SET url =?  WHERE id = 1",
    [url],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email message of trainer info
app.put("/update/referral/msg", (req, res) => {
  const message = req.body.message;
  db.query(
    "UPDATE `myveda-db`.email_temp_referral_program SET message =?  WHERE id = 1",
    [message],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email caution of trainer info
app.put("/update/referral/caution", (req, res) => {
  const caution = req.body.caution;
  db.query(
    "UPDATE `myveda-db`.email_temp_referral_program SET caution =?  WHERE id = 1",
    [caution],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email sign of trainer info
app.put("/update/referral/sign", (req, res) => {
  const sign = req.body.sign;
  db.query(
    "UPDATE `myveda-db`.email_temp_referral_program SET signature =?  WHERE id = 1",
    [sign],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//
// Ticket Reg template
// reg email config subject
app.put("/updateticketregsubject", (req, res) => {
  const subject = req.body.subject1;
  db.query(
    "UPDATE `main_admin_db`.email_temp_ticket_reg SET subject =?  WHERE id = 1",
    [subject],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//update email url of
app.put("/updateticketregurl", (req, res) => {
  const url = req.body.url;
  db.query(
    "UPDATE `main_admin_db`.email_temp_ticket_reg SET url =?  WHERE id = 1",
    [url],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email message of
app.put("/updateticketregmsg", (req, res) => {
  const message = req.body.message;
  db.query(
    "UPDATE `main_admin_db`.email_temp_ticket_reg SET message =?  WHERE id = 1",
    [message],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email caution of
app.put("/updateticketregcaution", (req, res) => {
  const caution = req.body.caution;
  db.query(
    "UPDATE `main_admin_db`.email_temp_ticket_reg SET caution =?  WHERE id = 1",
    [caution],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email sign of
app.put("/updateticketregsign", (req, res) => {
  const sign = req.body.sign;
  db.query(
    "UPDATE `main_admin_db`.email_temp_ticket_reg SET signature =?  WHERE id = 1",
    [sign],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//
// Ticket Assign template
// reg email config subject
app.put("/updateticketassignsubject", (req, res) => {
  const subject = req.body.subject1;
  db.query(
    "UPDATE `main_admin_db`.email_temp_ticket_assign SET subject =?  WHERE id = 1",
    [subject],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//update email url of
app.put("/updateticketassignurl", (req, res) => {
  const url = req.body.url;
  db.query(
    "UPDATE `main_admin_db`.email_temp_ticket_assign SET url =?  WHERE id = 1",
    [url],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email message of
app.put("/updateticketassignmsg", (req, res) => {
  const message = req.body.message;
  db.query(
    "UPDATE `main_admin_db`.email_temp_ticket_assign SET message =?  WHERE id = 1",
    [message],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email caution of
app.put("/updateticketassigncaution", (req, res) => {
  const caution = req.body.caution;
  db.query(
    "UPDATE `main_admin_db`.email_temp_ticket_assign SET caution =?  WHERE id = 1",
    [caution],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email sign of
app.put("/updateticketassignsign", (req, res) => {
  const sign = req.body.sign;
  db.query(
    "UPDATE `main_admin_db`.email_temp_ticket_assign SET signature =?  WHERE id = 1",
    [sign],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update batch email template subject
app.put("/updatebatchemailtempsubject", (req, res) => {
  const subject = req.body.subject1;
  db.query(
    "UPDATE `myveda-db`.email_temp_batch_gen_la SET subject =?  WHERE id = 1",
    [subject],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//uupdate batch email template url
app.put("/updatebatchemailtempurl", (req, res) => {
  const url = req.body.url;
  db.query(
    "UPDATE `myveda-db`.email_temp_batch_gen_la SET url =?  WHERE id = 1",
    [url],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update batch email template message
app.put("/updatebatchemailtempmsg", (req, res) => {
  const message = req.body.message;
  db.query(
    "UPDATE `myveda-db`.email_temp_batch_gen_la SET message =?  WHERE id = 1",
    [message],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update batch email template caution
app.put("/updatebatchemailtempcaution", (req, res) => {
  const caution = req.body.caution;
  db.query(
    "UPDATE `myveda-db`.email_temp_batch_gen_la SET caution =?  WHERE id = 1",
    [caution],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update batch email template signature
app.put("/updatebatchemailtempsign", (req, res) => {
  const sign = req.body.sign;
  db.query(
    "UPDATE `myveda-db`.email_temp_batch_gen_la SET signature =?  WHERE id = 1",
    [sign],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//

//get start date and end date of course
app.get("/get/details/course/id/trainer/:course_id", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.add_courses where course_id = ?",
    [req.params.course_id],
    (err, result) => {
      if (err) console.log(err);
      else {
        res.send(result);
      }
    }
  );
});
//update batch email template subject
app.put("/updatecomplainttempsubject", (req, res) => {
  const subject = req.body.subject1;
  db.query(
    "UPDATE `myveda-db`.email_temp_complaint_la SET subject =?  WHERE id = 1",
    [subject],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//uupdate batch email template url
app.put("/updatecomplainttempurl", (req, res) => {
  const url = req.body.url;
  db.query(
    "UPDATE `myveda-db`.email_temp_complaint_la SET url =?  WHERE id = 1",
    [url],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update batch email template message
app.put("/updatecomplainttempmsg", (req, res) => {
  const message = req.body.message;
  db.query(
    "UPDATE `myveda-db`.email_temp_complaint_la SET message =?  WHERE id = 1",
    [message],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update batch email template caution
app.put("/updatecomplainttempcaution", (req, res) => {
  const caution = req.body.caution;
  db.query(
    "UPDATE `myveda-db`.email_temp_complaint_la SET caution =?  WHERE id = 1",
    [caution],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update batch email template signature
app.put("/updatecomplainttempsign", (req, res) => {
  const sign = req.body.sign;
  db.query(
    "UPDATE `myveda-db`.email_temp_complaint_la SET signature =?  WHERE id = 1",
    [sign],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//
//trainer reg email config subject update
app.put("/updatetrainerlaupdatesubject", (req, res) => {
  const subject = req.body.subject1;
  db.query(
    "UPDATE `myveda-db`.email_temp_update_trainer_la SET subject =?  WHERE id = 1",
    [subject],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//update email url of trainer info update
app.put("/updatetrainerlaupdateurl", (req, res) => {
  const url = req.body.url;
  db.query(
    "UPDATE `myveda-db`.email_temp_update_trainer_la SET url =?  WHERE id = 1",
    [url],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email message of trainer info update
app.put("/updatetrainerlaupdatemsg", (req, res) => {
  const message = req.body.message;
  db.query(
    "UPDATE `myveda-db`.email_temp_update_trainer_la SET message =?  WHERE id = 1",
    [message],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//update email sign of trainer info update
app.put("/updatetrainerlaupdatesign", (req, res) => {
  const sign = req.body.sign;
  db.query(
    "UPDATE `myveda-db`.email_temp_update_trainer_la SET signature =?  WHERE id = 1",
    [sign],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//
app.put("/updatebillsubject", (req, res) => {
  const subject = req.body.subject1;
  db.query(
    "UPDATE `myveda-db`.email_temp_learner_lead SET subject =?  WHERE id = 1",
    [subject],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email url of bill info
app.put("/updatebillurl", (req, res) => {
  const url = req.body.url;
  db.query(
    "UPDATE `myveda-db`.email_temp_learner_lead SET url =?  WHERE id = 1",
    [url],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email message of bill info
app.put("/updatebillmsg", (req, res) => {
  const message = req.body.message;
  db.query(
    "UPDATE `myveda-db`.email_temp_learner_lead SET message =?  WHERE id = 1",
    [message],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email caution of bill info
app.put("/updatebillcaution", (req, res) => {
  const caution = req.body.caution;
  db.query(
    "UPDATE `myveda-db`.email_temp_learner_lead SET caution =?  WHERE id = 1",
    [caution],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email sign of bill info
app.put("/updatebillsign", (req, res) => {
  const sign = req.body.sign;
  db.query(
    "UPDATE `myveda-db`.email_temp_learner_lead SET signature =?  WHERE id = 1",
    [sign],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//
app.put("/updatecouponsubject", (req, res) => {
  const subject = req.body.subject1;
  db.query(
    "UPDATE `myveda-db`.email_temp_coupon_la SET subject =?  WHERE id = 1",
    [subject],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email url of coupon info
app.put("/updatecouponurl", (req, res) => {
  const url = req.body.url;
  db.query(
    "UPDATE `myveda-db`.email_temp_coupon_la SET url =?  WHERE id = 1",
    [url],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email message of coupon info
app.put("/updatecouponmsg", (req, res) => {
  const message = req.body.message;
  db.query(
    "UPDATE `myveda-db`.email_temp_coupon_la SET message =?  WHERE id = 1",
    [message],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email caution of coupon info
app.put("/updatecouponcaution", (req, res) => {
  const caution = req.body.caution;
  db.query(
    "UPDATE `myveda-db`.email_temp_coupon_la SET caution =?  WHERE id = 1",
    [caution],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email sign of coupon info
app.put("/updatecouponsign", (req, res) => {
  const sign = req.body.sign;
  db.query(
    "UPDATE `myveda-db`.email_temp_coupon_la SET signature =?  WHERE id = 1",
    [sign],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//email temp payout info
app.get("/get/payout/info/user", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.email_temp_payout_la", (err, result) => {
    if (err) console.log(err);
    else res.send(result);
  });
});
//update email subject of payout
app.put("/updatepayoutsubject", (req, res) => {
  const subject = req.body.subject1;
  db.query(
    "UPDATE `myveda-db`.email_temp_payout_la SET subject =?  WHERE id = 1",
    [subject],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email url of payout
app.put("/updatepayouturl", (req, res) => {
  const url = req.body.url;
  db.query(
    "UPDATE `myveda-db`.email_temp_payout_la SET url =?  WHERE id = 1",
    [url],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email message of payout
app.put("/updatepayoutmsg", (req, res) => {
  const message = req.body.message;
  db.query(
    "UPDATE `myveda-db`.email_temp_payout_la SET message =?  WHERE id = 1",
    [message],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email caution of payout
app.put("/updatepayoutcaution", (req, res) => {
  const caution = req.body.caution;
  db.query(
    "UPDATE `myveda-db`.email_temp_payout_la SET caution =?  WHERE id = 1",
    [caution],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email sign of payout
app.put("/updatepayoutsign", (req, res) => {
  const sign = req.body.sign;
  db.query(
    "UPDATE `myveda-db`.email_temp_payout_la SET signature =?  WHERE id = 1",
    [sign],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//get info comp info
app.get("/get/info/company/myveda", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.cert_info", (err, result) => {
    if (err) console.log(err);
    else res.send(result);
  });
});
//update Address of myveda
app.put("/update/address/comp/myveda", (req, res) => {
  const address = req.body.address;
  db.query(
    "UPDATE `myveda-db`.cert_info SET address =?  WHERE id = 1",
    [address],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update Email of MYVEDAIT
app.put("/update/email/comp/myveda", (req, res) => {
  const email = req.body.email;
  db.query(
    "UPDATE `myveda-db`.cert_info SET email =?  WHERE id = 1",
    [email],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update website of MYVEDAIT
app.put("/update/website/comp/myveda", (req, res) => {
  const website = req.body.site;
  db.query(
    "UPDATE `myveda-db`.cert_info SET website =?  WHERE id = 1",
    [website],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update number of MYVEDAIT
app.put("/update/number/comp/myveda", (req, res) => {
  const number = req.body.number;
  db.query(
    "UPDATE `myveda-db`.cert_info SET number =?  WHERE id = 1",
    [number],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//get all course type

app.get("/get/course/type", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.category_course", (err, result) => {
    if (err) console.log(err);
    else res.send(result);
  });
});

//get all course type code

app.get("/get/course/type/code", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.course_type_min_time", (err, result) => {
    if (err) console.log(err);
    else res.send(result);
  });
});

app.get("/get/all/user/course/id/:e", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.user_course_map_table_la where cust_id = ?",
    [req.params.e],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
app.get("/api/v1/get/cust/course/id/:e", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.comp_cust_req_db where cust_id = ?",
    [req.params.e],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
app.get("/get/all/user/course/id/admin/:takeValue", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.user_course_map_table_la where cust_id = ?",
    [req.params.takeValue],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//get all std list
app.get("/add/std/dropdown", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.add_std_list",

    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//get all options for user to complaint trainer
app.get("/get/tcm/options", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.tcm_la", (err, result) => {
    if (err) console.log(err);
    else res.send(result);
  });
});
//get complaints for current users
app.get("/data/complaints/:uid", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.usr_reg_tcm_la where uid = ?",
    [req.params.uid],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//get complaints for current trainer
app.get("/data/complaints/trainer/:uid", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.usr_reg_tcm_la where trainer_uid = ?",
    [req.params.uid],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//check there is batch id or not in current learner
app.get("/get/courseid/batchid/learner/:id_pass2/:uid", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.user_course_map_table_la where course_id = ? and uid = ?",
    [req.params.id_pass2, req.params.uid],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//get users for manual batch creation
app.get("/get/learner/for/batch/:id", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.user_course_map_table_la t1  JOIN `myveda-db`.customer_reg t2 ON t1.uid =t2.businessMail where course_id = ? and batch_code is null",
    [req.params.id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//create batch manual with batch id
app.post("/create/batch/learners", (req, res) => {
  const arr = req.body.uid;
  //registration date

  var today = new Date();
  var dd = String(today.getDate()).padStart(2, "0");
  var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
  var yyyy = today.getFullYear();

  today = mm + "-" + dd + "-" + yyyy;

  db.query(
    "SELECT * FROM `myveda-db`.add_courses where course_id = ?",
    [req.body.course_id],
    (err5, result5) => {
      if (err5) {
        console.log(err5);
        res.status(500).send("An error occurred");
        return;
      }
      const course = result5[0];
      db.query(
        "SELECT * FROM `myveda-db`.add_std_list where std = ?",
        [course.standard],
        (err4, result4) => {
          if (err4) {
            console.log(err4);
            res.status(500).send("An error occurred");
            return;
          }
          const standard = result4[0];

          db.query(
            "SELECT * FROM `myveda-db`.batch_ids_la",
            (errB, resultB) => {
              if (errB) console.log(errB);
              else {
                const newNo = resultB.length + 1;
                const paddedIds =
                  newNo.toString().length < 4
                    ? "0".repeat(4 - newNo.toString().length) + newNo
                    : newNo;

                const newBatchId = "BATCH" + paddedIds;
                arr.forEach((element_1, index) => {
                  db.query(
                    "SELECT * FROM `myveda-db`.customer_reg where businessMail = ?",
                    [element_1],
                    (err2, result2) => {
                      if (err2) {
                        console.log(err2);
                        if (index === arr.length - 1) {
                          res.status(500).send("An error occurred");
                        }
                        return;
                      }

                      db.query(
                        "SELECT * FROM `myveda-db`.user_course_map_table_la where uid = ? and course_id = ? and iso_std = ?",
                        [element_1, req.body.course_id, standard.std],
                        (err3, result3) => {
                          if (err3) {
                            console.log(err3);
                            if (index === arr.length - 1) {
                              res.status(500).send("An error occurred");
                            }
                            return;
                          }

                          const userCourseMap = result3;

                          if (userCourseMap.length === 0) {
                            console.log("false");
                          } else {
                            userCourseMap.forEach((element1, index1) => {
                              db.query(
                                "UPDATE `myveda-db`.user_course_map_table_la SET batch_code=? WHERE iso_std = ? AND course_id = ? AND uid = ? AND (batch_code IS NULL OR batch_code = '')",
                                [
                                  newBatchId,
                                  standard.std,
                                  req.body.course_id,
                                  element_1,
                                ],
                                (err3, result3) => {
                                  if (err3) {
                                    console.log(err3);
                                    if (
                                      index === arr.length - 1 &&
                                      index1 === userCourseMap.length - 1
                                    ) {
                                      res.status(500).send("An error occurred");
                                    }
                                    return;
                                  }

                                  db.query(
                                    "SELECT * FROM `myveda-db`.usr_batch_status_la WHERE uid = ? AND batch_id = ?",
                                    [element_1, newBatchId],
                                    (errUsrCount, resultUsrCount) => {
                                      if (errUsrCount) {
                                        console.log(errUsrCount);
                                        if (
                                          index === arr.length - 1 &&
                                          index1 === userCourseMap.length - 1
                                        ) {
                                          res
                                            .status(500)
                                            .send("An error occurred");
                                        }
                                        return;
                                      }

                                      if (resultUsrCount.length === 0) {
                                        db.query(
                                          "INSERT INTO `myveda-db`.usr_batch_status_la (name, uid, number, country, batch_id) VALUES (?, ?, ?, ?, ?)",
                                          [
                                            result2[0].firstName +
                                              " " +
                                              result2[0].lastName,
                                            element_1,
                                            result2[0].contactNumber,
                                            result2[0].country,
                                            newBatchId,
                                          ],
                                          (errCer, resultCer) => {
                                            if (errCer) {
                                              console.log(errCer);
                                              if (
                                                index === arr.length - 1 &&
                                                index1 ===
                                                  userCourseMap.length - 1
                                              ) {
                                                res
                                                  .status(500)
                                                  .send("An error occurred");
                                              }
                                              return;
                                            }
                                            if (
                                              index === arr.length - 1 &&
                                              index1 ===
                                                userCourseMap.length - 1
                                            ) {
                                              db.query(
                                                "SELECT * FROM `myveda-db`.batch_ids_la WHERE batch_ids = ? and status = 1",
                                                [newBatchId],
                                                (errCodeM, resultCodeM) => {
                                                  if (errCodeM) {
                                                    console.log(errCodeM);
                                                    if (
                                                      index ===
                                                        arr.length - 1 &&
                                                      index1 ===
                                                        userCourseMap.length - 1
                                                    ) {
                                                      res
                                                        .status(500)
                                                        .send(
                                                          "An error occurred"
                                                        );
                                                    }
                                                    return;
                                                  }

                                                  if (
                                                    resultCodeM.length === 0
                                                  ) {
                                                    db.query(
                                                      "INSERT INTO `myveda-db`.batch_ids_la (batch_ids, date, status) VALUES (?, ?, ?)",
                                                      [newBatchId, today, 1],
                                                      (
                                                        errCodeM1,
                                                        resultCodeM1
                                                      ) => {
                                                        if (errCodeM1) {
                                                          console.log(
                                                            errCodeM1
                                                          );
                                                          if (
                                                            index ===
                                                              arr.length - 1 &&
                                                            index1 ===
                                                              userCourseMap.length -
                                                                1
                                                          ) {
                                                            res
                                                              .status(500)
                                                              .send(
                                                                "An error occurred"
                                                              );
                                                          }
                                                          return;
                                                        }

                                                        db.query(
                                                          "SELECT * FROM `myveda-db`.email_temp_batch_gen_la",
                                                          (
                                                            errBatch,
                                                            resultBatch
                                                          ) => {
                                                            if (errBatch) {
                                                              console.log(
                                                                errBatch
                                                              );
                                                              if (
                                                                index ===
                                                                  arr.length -
                                                                    1 &&
                                                                index1 ===
                                                                  userCourseMap.length -
                                                                    1
                                                              ) {
                                                                res
                                                                  .status(500)
                                                                  .send(
                                                                    "An error occurred"
                                                                  );
                                                              }
                                                              return;
                                                            }

                                                            const output = `
                                                            <h3>Dear Admin</h3>
                                                            <p>${resultBatch[0].message}</p>
                                                            <br />
                                                            <p><b>${resultBatch[0].caution}.</b></p>
                                                            <br />
                                                            <p><b>Batch Code </b>: ${newBatchId}</p>
                                                            <p>Thanks & Regards</p>
                                                            <p>${resultBatch[0].signature}</p>
                                                          `;

                                                            db.query(
                                                              "SELECT * FROM `myveda-db`.email_srv",
                                                              (err, result) => {
                                                                if (err) {
                                                                  console.log(
                                                                    err
                                                                  );
                                                                  if (
                                                                    index ===
                                                                      arr.length -
                                                                        1 &&
                                                                    index1 ===
                                                                      userCourseMap.length -
                                                                        1
                                                                  ) {
                                                                    res
                                                                      .status(
                                                                        500
                                                                      )
                                                                      .send(
                                                                        "An error occurred"
                                                                      );
                                                                  }
                                                                  return;
                                                                }

                                                                let host1 =
                                                                  result[0]
                                                                    ?.host;
                                                                let port1 =
                                                                  result[0]
                                                                    ?.port;
                                                                let user1 =
                                                                  result[0]
                                                                    ?.auth_uid;
                                                                let pass1 =
                                                                  result[0]
                                                                    ?.auth_pass;
                                                                let fromEmail =
                                                                  result[0]
                                                                    ?.from_email;
                                                                let bccEmail =
                                                                  result[0]
                                                                    ?.bcc_email;
                                                                let transporter =
                                                                  nodemailer.createTransport(
                                                                    {
                                                                      host: host1,
                                                                      port: port1,
                                                                      secure: true, // true for 465, false for other ports
                                                                      auth: {
                                                                        user: user1,
                                                                        pass: pass1,
                                                                      },
                                                                    }
                                                                  );

                                                                let info =
                                                                  transporter.sendMail(
                                                                    {
                                                                      from: `"" ${fromEmail}`,
                                                                      subject:
                                                                        resultBatch[0]
                                                                          .subject,
                                                                      bcc: bccEmail,
                                                                      html: output,
                                                                    }
                                                                  );

                                                                console.log(
                                                                  "Message sent: %s",
                                                                  info.messageId
                                                                );
                                                                console.log(
                                                                  "Preview URL: %s",
                                                                  nodemailer.getTestMessageUrl(
                                                                    info
                                                                  )
                                                                );
                                                              }
                                                            );
                                                            res.send(
                                                              resultCodeM1
                                                            );
                                                          }
                                                        );
                                                      }
                                                    );
                                                  } else {
                                                    if (
                                                      index ===
                                                        arr.length - 1 &&
                                                      index1 ===
                                                        userCourseMap.length - 1
                                                    ) {
                                                      res.send(resultCodeM1);
                                                    }
                                                  }
                                                }
                                              );
                                            }
                                          }
                                        );
                                      } else {
                                        if (
                                          index === arr.length - 1 &&
                                          index1 === userCourseMap.length - 1
                                        ) {
                                          res.send(resultCodeM1);
                                        }
                                      }
                                    }
                                  );
                                }
                              );
                            });
                          }
                        }
                      );
                    }
                  );
                });
              }
            }
          );
        }
      );
    }
  );
});
//get all batch id in admin
app.get("/get/all/batch/id/admin", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.batch_ids_la", (err, result) => {
    if (err) console.log(err);
    else res.send(result);
  });
});
//get batch_id for user
app.get("/get/user/batch/id/:id_pass/:user", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.user_course_map_table_la where course_id = ? and uid = ?",
    [req.params.id_pass, req.params.user],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//create learner request meeting
app.post("/create/learner/meet", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.customer_reg where businessMail = ?",
    [req.body.user],
    (err, result) => {
      if (err) console.log(err);
      else {
        db.query(
          "SELECT * FROM `myveda-db`.trainer_reg_table_la as t1 JOIN `myveda-db`.batch_ids_la as t2 on t1.uid = t2.trainer where t2.batch_ids = ?",
          [req.body.batch_id],
          (err2, result2) => {
            if (err2) console.log(err2);
            else {
              db.query(
                "INSERT into `myveda-db`.learner_req_meet_la (name,uid,number,country,req_schedule,batch_id,trainer_uid,agenda) values(?,?,?,?,?,?,?,?)",
                [
                  result[0]?.firstName + " " + result[0]?.lastName,
                  req.body.user,
                  result[0]?.contactNumber,
                  result[0]?.country,
                  req.body.date + "/" + req.body.time,
                  req.body.batch_id,
                  result2[0]?.uid,
                  req.body.agenda,
                ],
                (err3, result3) => {
                  if (err3) console.log(err3);
                  else {
                    db.query(
                      "SELECT * FROM `myveda-db`.email_temp_meeting",
                      (errBatch, resultBatch) => {
                        if (errBatch) console.log(errBatch);
                        else {
                          const output = `
            <h3>Dear ${result2[0]?.name + " " + result2[0]?.surname}</h3>
            <p>you are being requested for one to one meeting, details as per below :</p>
            <br />
        
           
        
            <p><b>Batch-ID </b>: ${req.body.batch_id}</p>

            <p><b>Learner </b>: ${
              result[0]?.firstName + " " + result[0]?.lastName
            }</p>

            <p><b>Learner-ID</b>: ${req.body.user}</p>

            <p><b>Meeting Agenda</b>: ${req.body.agenda}</p>
      
            <p><b>Scheduled Date </b>: ${req.body.date}</p>
      
            <p><b>Scheduled Time </b>: ${req.body.time}</p>
        
            
            <p><b>${resultBatch[0].caution}.</b></p>
            <br />
          
            <p>Thanks & Regards</p>
            <p>${resultBatch[0].signature}</p>
          `;

                          db.query(
                            "SELECT * FROM `myveda-db`.email_srv",
                            (err, result) => {
                              if (err) {
                                console.log(err);
                              } else {
                                let host1 = result[0]?.host;
                                let port1 = result[0]?.port;
                                let user1 = result[0]?.auth_uid;
                                let pass1 = result[0]?.auth_pass;
                                let fromEmail = result[0]?.from_email;
                                let bccEmail = result[0]?.bcc_email;
                                let transporter = nodemailer.createTransport({
                                  host: host1,
                                  port: port1,
                                  secure: true, // true for 465, false for other p orts
                                  auth: {
                                    user: user1, // generated ethereal user
                                    pass: pass1, // generated ethereal password
                                  },
                                });

                                // send mail with defined transport object
                                let info = transporter
                                  .sendMail({
                                    from: `"" ${fromEmail}`, // sender address
                                    to: result2[0]?.uid,
                                    subject:
                                      req.body.user + " Meeting Requrest", // Subject line
                                    bcc: bccEmail,
                                    html: output, // html body
                                  })
                                  .then(() => {
                                    res.send(result);
                                  });

                                console.log("Message sent: %s", info.messageId);
                                console.log(
                                  "Preview URL: %s",
                                  nodemailer.getTestMessageUrl(info)
                                );
                              }
                            }
                          );
                        }
                      }
                    );
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});

//get requested meet of learner in learner login
app.get("/get/req/meets/:user", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.learner_req_meet_la where uid = ?",
    [req.params.user],
    (err, result) => {
      if (err) console.log(err);
      else {
        res.send(result);
      }
    }
  );
});

//get saturday meetings of learner
app.get("/get/sat/meeting/learner/:batch_id", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.sat_batch_status_la where batch_id = ? and meet_link is not null",
    [req.params.batch_id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//
app.get("/get/course/batchid/:batch_id", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.sat_batch_status_la where batch_id = ?",
    [req.params.batch_id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//get requested meet of learner in trainer login

app.get("/request/active/batch/learner/:id", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.learner_req_meet_la where batch_id = ?",
    [req.params.id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//update status trainer
app.put("/api/v1/admin/update/status/trainer", (req, res) => {
  const { uid, status, answer } = req.body;
  var today;
  const date = new Date();
  today =
    (date.getDate() < 10 ? "0" + date.getDate() : date.getDate()) +
    "-" +
    (date.getMonth() + 1 < 10
      ? "0" + (date.getMonth() + 1)
      : date.getMonth() + 1) +
    "-" +
    date.getFullYear();

  db.query(
    "UPDATE `myveda-db`.trainer_reg_table_la SET status = ?, approve_date = ? where uid = ?",
    [status, status === "1" ? today : "", uid],
    (err, result) => {
      if (err) console.log(err);
      else {
        res.send(result);
        db.query(
          "select * from `myveda-db`.trainer_reg_table_la where uid = ?",
          [uid],
          (err2, result2) => {
            if (err2) console.log(err2);
            else {
              let stats = result2[0].status;
              console.log(stats);

              let firstName = result2[0].name;
              let lastName = result2[0].surname;

              // db.query("SELECT * FROM `myveda-db`.trainer_auth_table_la where uid = ?",[uid],(err22,result22)=>{
              //   if(err22)console.log(err2)
              //   else{

              //   }
              // })

              db.query(
                "SELECT * FROM `myveda-db`.email_temp_update_trainer_la",
                (errX, resultX) => {
                  if (errX) console.log(errX);
                  else {
                    const output = `
          
                            <h3>Dear ${firstName} ${lastName} </h3>
                            <p> ${resultX[0].message} :
                            </p>
          
                            <p> URL : <a href=${resultX[0].url}>${
                      resultX[0].url
                    }</a></p>
          
                            <p>  UID : ${uid}</p>
          
                            <p>  Status : <b>${
                              status === "1" ? "Approved" : "Rejected"
                            }</b> </p>
          
                            ${answer ? `<p>Remark : <b>${answer}</b></p>` : ""}
          
                            <p>!!! This is an automatically system generated email ? please do not reply to it.</p>
          
                            <p>Thanks &#38; Best Regards </p>
          
                            <p>${resultX[0].signature}</p>
          
                            `;

                    db.query(
                      "SELECT * FROM `myveda-db`.email_srv",
                      (err, result) => {
                        if (err) {
                          console.log(err);
                        } else {
                          console.log(result);
                          let host1 = result[0]?.host;
                          let port1 = result[0]?.port;
                          let user1 = result[0]?.auth_uid;
                          let pass1 = result[0]?.auth_pass;
                          let fromEmail = result[0]?.from_email;
                          let bccEmail = result[0]?.bcc_email;
                          let transporter = nodemailer.createTransport({
                            host: host1,
                            port: port1,
                            secure: true, // true for 465, false for other p orts
                            auth: {
                              user: user1, // generated ethereal user
                              pass: pass1, // generated ethereal password
                            },
                          });

                          // send mail with defined transport object
                          let info = transporter.sendMail({
                            from: `"" ${fromEmail}`, // sender address
                            to: uid, // list of receivers
                            subject: resultX[0].subject, // Subject line
                            bcc: bccEmail,
                            html: output, // html body
                          });
                        }
                      }
                    );
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});

app.get("/api/v1/trainer/exam/evaluation/:batch_id", (req, res) => {
  console.log(req.params.batch_id);
  db.query(
    "SELECT * FROM `myveda-db`.user_course_map_table_la where batch_code = ?",
    [req.params.batch_id],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        var items = Object.keys(result);
        const allData = [];
        items.forEach(function (item, index, myarr) {
          // console.log(result[item].course_id);
          const courseId = result[item].course_id;

          const takeCourseId = result[item].course_id
            .toLowerCase()
            .replace("-", "_");

          const uid = result[item].uid;

          db.query(
            `SELECT *
            FROM \`myveda-db\`.?? as t1
            INNER JOIN \`myveda-db\`.customer_reg AS t2 ON t1.uid = t2.businessMail
            WHERE (
                tfq_sc_apt1 != '' AND
                scq_sc_apt1 != '' AND
                ques_1_apt1 != '' AND
                ans_1_apt1 != '' AND
                (stats_apt1 = 'Pending' OR stats_apt1 = 'FAIL') AND
                (stats_apt2 = '' OR stats_apt2 = 'FAIL') AND
                stats_apt3 = '' AND
                uid IN (
                    SELECT businessMail
                    FROM \`myveda-db\`.customer_reg
                    WHERE businessMail = ?
                )
            )
            `,
            [takeCourseId, uid],
            (err1, result1) => {
              if (err1) {
                console.log(err1);
              } else {
                allData.push(result1);

                if (Object.is(myarr.length - 1, index)) {
                  // execute last item logic
                  res.send(allData);
                }
              }
            }
          );
        });
      }
    }
  );
});

//update trainer complaint
app.put("/update/trainer/complaint", (req, res) => {
  const { complaint_id, des } = req.body;

  db.query(
    "update `myveda-db`.usr_reg_tcm_la set trainer_just = ?, status = ? where complaint_no = ?",
    [des, 1, complaint_id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//register complaint via user to admin
app.post("/register/compaint/trainer/la", (req, res) => {
  var autoNumer = generator.generate({
    length: 3,
    numbers: true,
    lowercase: false,
    uppercase: false,
  });
  const ftId = "TRAIN" + "COMP" + autoNumer;
  db.query(
    "SELECT * FROM `myveda-db`.trainer_reg_table_la as t1 Join `myveda-db`.batch_ids_la as t2 on t1.uid = t2.trainer where t2.batch_ids = ?",
    [req.body.batchCode],
    (errTT, resultTT) => {
      if (errTT) console.log(errTT);
      else {
        let trainer = resultTT[0]?.uid;
        db.query(
          "INSERT into `myveda-db`.usr_reg_tcm_la(uid,complaint,remark,complaint_no,log_date,log_time,status,batch_code,trainer_uid) values(?,?,?,?,?,?,?,?,?)",
          [
            req.body.uid,
            req.body.complaint,
            req.body.remark,
            ftId,
            req.body.date,
            req.body.time,
            0,
            req.body.batchCode,
            trainer,
          ],
          (err, result) => {
            if (err) console.log(err);
            else {
              res.send(result);

              db.query(
                "SELECT * FROM `myveda-db`.email_temp_complaint_la",
                (err3, result3) => {
                  if (err3) console.log(err3);
                  else {
                    const output = `
            
                  <h3>Dear Admin</h3>
                  <p> ${result3[0].message}
                  </p>
          
                  <p><b>Learner UID </b> :  ${req.body.uid}</p>
                  <p> <b>Complaint Against</b> : ${trainer}</p>
                  <p> <b>Complaint No.</b> : ${ftId}</p>
                  <p> <b>Complaint </b> : ${req.body.complaint}</p>
                  <p> <b>Complaint Remark </b> : ${req.body.remark}</p>
                  <p> <b>Batch Code</b> : ${req.body.batchCode}</p>
                  
          
                 
                  <p>${result3[0].caution}</p>
          
                  <p>Thanks & Regards</p>
                  <p>${result3[0].signature}</p>
          
                    `;
                    db.query(
                      "SELECT * FROM `myveda-db`.email_srv",
                      (err6, result6) => {
                        if (err6) {
                          console.log(err6);
                        } else {
                          console.log(result6);
                          let host1 = result6[0]?.host;
                          let port1 = result6[0]?.port;
                          let user1 = result6[0]?.auth_uid;
                          let pass1 = result6[0]?.auth_pass;
                          let fromEmail = result6[0]?.from_email;
                          let bccEmail = result6[0]?.bcc_email;
                          let transporter = nodemailer.createTransport({
                            host: host1,
                            port: port1,
                            secure: true, // true for 465, false for other p orts
                            auth: {
                              user: user1, // generated ethereal user
                              pass: pass1, // generated ethereal password
                            },
                          });

                          // send mail with defined transport object
                          let info = transporter.sendMail({
                            from: `"" ${fromEmail}`, // sender address

                            to: trainer + "'s Complaint",

                            subject: result3[0].subject, // Subject line
                            bcc: bccEmail,
                            html: output, // html body
                          });
                        }
                      }
                    );
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});
//take course category

app.get("/take/course/category/:id_pass", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.add_courses where course_id = ?",
    [req.params.id_pass],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//get batch code for user
app.get("/get/batch/code/:user/:course_id", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.user_course_map_table_la where uid = ? and course_id = ?",
    [req.params.user, req.params.course_id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//get all course id

app.get("/get/all/courseid/id/:takeId", (req, res) => {
  res.send(req.params.takeId);
});
//

// user app

// const express = require("express");
// const bodyParsor = require("body-parser");
// const nodemailer = require("nodemailer");
// let app = express();
// const db = require("./config/db");
// const cors = require("cors");
// const pdfLib = require("pdf-lib");
// const https = require("https");

// const upload=multer({storage:multer.memoryStorage()})

// app.get('/',(req,res)=>{
//     const sqlInsert="INSERT INTO `myveda-db`.customer_reg(id,firstName,lastName,businessMail,contactNumber,userImg,pincode,city,address) VALUES('4','KMM M','DWIVEDI','TECHNICAL DIRECTOR','9876543210','iMGA','241001','HARDOI','BABA MANIDR');";
//     db.query(sqlInsert,(err,result)=>{
//         res.send('hello akshay');
//     });
// })

// app.use(bodyParser.raw({ limit: "1gb", type: "application/pdf" }));

app.post("/err/msg", (req, res) => {
  res.send("running");
});

app.post("/api/insert", async (req, res) => {
  const regType = req.body.regType;
  const firstName = req.body.firstName;
  const lastName = req.body.lastName;
  const businessMail = req.body.businessMail;
  const contactNumber = req.body.contactNumber;
  const country = req.body.country;
  const city = req.body.city;
  const address = req.body.address;
  const imgname = req.body.photo;
  const landmark = req.body.landmark;
  const custID = req.body.custId;
  let base64Image = imgname.split(";base64,").pop();
  // const image=req.body.photo

  fs.writeFileSync(
    `./user_img/${businessMail}_IMG.jpeg`,
    Buffer.from(base64Image, "base64")
  );

  //registration date

  var today = new Date();
  var dd = String(today.getDate()).padStart(2, "0");
  var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
  var yyyy = today.getFullYear();

  today = yyyy + "-" + mm + "-" + dd;

  if (custID.substr(-4) === "IND0") {
    db.query(
      "SELECT subject,URL FROM `myveda-db`.usr_email_body",
      (err, result) => {
        if (err) {
          console.log(err);
        } else {
          console.log(result);
          const subject = result[0]?.subject;
          const URL = result[0]?.URL;
          console.log(subject);
          console.log(URL);

          db.query(
            "SELECT COUNT(cust_id) AS cust_id_value FROM `myveda-db`.customer_reg WHERE cust_id = ?",
            [custID],
            (err, result) => {
              if (err) {
                console.log(err);
              } else {
                console.log(result[0]?.cust_id_value);
                const userValue = result[0]?.cust_id_value;
                db.query(
                  "UPDATE `myveda-db`.comp_cust_req_db SET registered_user = ? WHERE cust_id = ?",
                  [userValue, custID],
                  (err, result) => {
                    if (err) {
                      console.log(err);
                    } else {
                      db.query(
                        "select (select user_limit_allowed from `myveda-db`.comp_cust_req_db where cust_id = ?) - (select registered_user from  `myveda-db`.comp_cust_req_db where cust_id = ?) as difference",
                        [custID, custID],
                        (err, result) => {
                          if (err) {
                            console.log(err);
                          } else {
                            let remainValue = result[0]?.difference;
                            console.log(remainValue, "remainvalue");
                            db.query(
                              "UPDATE `myveda-db`.comp_cust_req_db SET user_limit_remain = ? WHERE cust_id = ?",
                              [remainValue, custID],
                              (err, result) => {
                                if (err) {
                                  console.log(err);
                                } else {
                                  db.query(
                                    "SELECT user_limit_remain from `myveda-db`.comp_cust_req_db WHERE cust_id = ?",
                                    [custID],
                                    async (err, result) => {
                                      if (err) {
                                        console.log(err);
                                      } else {
                                        console.log(
                                          parseInt(
                                            result[0]?.user_limit_remain,
                                            "Limit"
                                          )
                                        );
                                        if (
                                          parseInt(
                                            result[0]?.user_limit_remain
                                          ) === 0 ||
                                          result[0]?.user_limit_remain ===
                                            undefined
                                        ) {
                                          res.send("not allowed");
                                        } else {
                                          // user registration

                                          db.query(
                                            "SELECT businessMail FROM `myveda-db`.customer_reg WHERE businessMail = ? AND cust_id = ?",
                                            [businessMail, custID],
                                            async (err, result) => {
                                              if (err) {
                                                console.log(err);
                                              } else {
                                                const checkMail = result.length;

                                                if (checkMail === 0) {
                                                  db.query(
                                                    "INSERT INTO `myveda-db`.customer_reg(firstName,lastName,businessMail,contactNumber,city,address,country,img,landmark,cust_id,req_date,reg_type,reg_status,exam_status,app_time,ex_status,state,block,pincode) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                                    [
                                                      firstName,
                                                      lastName,
                                                      businessMail,
                                                      contactNumber,

                                                      city,
                                                      address,
                                                      country,
                                                      imgname,

                                                      landmark,
                                                      custID,
                                                      today,
                                                      regType,
                                                      1,
                                                      "Pending",
                                                      "",
                                                      "Pending",
                                                      req.body.state,
                                                      req.body.block,
                                                      req.body.pincode,
                                                    ],
                                                    async (err, result) => {
                                                      if (err) {
                                                        console.log(err);
                                                      } else {
                                                        res.send(result);
                                                        db.query(
                                                          "select course_id from `myveda-db`.user_course_map_table_la where cust_id = ?",
                                                          [custID],
                                                          (
                                                            errMap,
                                                            resultMap
                                                          ) => {
                                                            if (errMap)
                                                              console.log(
                                                                errMap
                                                              );
                                                            else {
                                                              resultMap.forEach(
                                                                (item) => {
                                                                  db.query(
                                                                    "SELECT duration FROM `myveda-db`.add_courses where course_id = ?",
                                                                    [
                                                                      item.course_id,
                                                                    ],
                                                                    (
                                                                      err11,
                                                                      result11
                                                                    ) => {
                                                                      if (err11)
                                                                        console.log(
                                                                          err11
                                                                        );
                                                                      else {
                                                                        const {
                                                                          duration,
                                                                        } =
                                                                          result11[0];
                                                                        var someDate =
                                                                          new Date(
                                                                            today
                                                                          );

                                                                        var result =
                                                                          someDate.setDate(
                                                                            someDate.getDate() +
                                                                              duration
                                                                          );
                                                                        var exp_date =
                                                                          new Date(
                                                                            result
                                                                          )
                                                                            .toISOString()
                                                                            .split(
                                                                              "T"
                                                                            )[0];
                                                                        console.log(
                                                                          exp_date
                                                                        );
                                                                        db.query(
                                                                          "SELECT * FROM `myveda-db`.indi_cust_course_ids where course_id= ? and cust_id = ?",
                                                                          [
                                                                            item.course_id,
                                                                            custID,
                                                                          ],
                                                                          (
                                                                            err22,
                                                                            result22
                                                                          ) => {
                                                                            if (
                                                                              err22
                                                                            )
                                                                              console.log(
                                                                                err22
                                                                              );
                                                                            else {
                                                                              db.query(
                                                                                "insert into `myveda-db`.indi_cust_course_ids(cust_id,course_id,start_date,end_date) values(?,?,?,?)",
                                                                                [
                                                                                  custID,
                                                                                  item.course_id,
                                                                                  today,
                                                                                  exp_date,
                                                                                ],
                                                                                (
                                                                                  err22,
                                                                                  result22
                                                                                ) => {
                                                                                  if (
                                                                                    err22
                                                                                  )
                                                                                    console.log(
                                                                                      err22
                                                                                    );
                                                                                  else {
                                                                                    if (
                                                                                      err22
                                                                                    )
                                                                                      console.log(
                                                                                        err22
                                                                                      );
                                                                                  }
                                                                                }
                                                                              );
                                                                            }
                                                                          }
                                                                        );
                                                                      }
                                                                    }
                                                                  );
                                                                }
                                                              );
                                                            }
                                                          }
                                                        );

                                                        if (
                                                          custID.substring(
                                                            6
                                                          ) !== "IND0"
                                                        ) {
                                                          db.query(
                                                            "SELECT * FROM `myveda-db`.corp_cust_course_ids where cust_id = ?",
                                                            [custID],
                                                            (errN, resultN) => {
                                                              if (errN)
                                                                console.log(
                                                                  errN
                                                                );
                                                              else {
                                                                const arr =
                                                                  resultN;
                                                                arr.forEach(
                                                                  (element) => {
                                                                    db.query(
                                                                      "SELECT * FROM `myveda-db`.add_courses where course_id = ?",
                                                                      [
                                                                        element.course_id,
                                                                      ],
                                                                      (
                                                                        errX,
                                                                        resultX
                                                                      ) => {
                                                                        if (err)
                                                                          console.log(
                                                                            err
                                                                          );
                                                                        else {
                                                                          const {
                                                                            course_ttl,
                                                                            standard,
                                                                          } =
                                                                            resultX[0];
                                                                          db.query(
                                                                            "SELECT * FROM `myveda-db`.user_course_map_table_la where uid  = ? and course_id = ?",
                                                                            [
                                                                              businessMail,
                                                                              element.course_id,
                                                                            ],
                                                                            (
                                                                              errZ,
                                                                              resultZ
                                                                            ) => {
                                                                              if (
                                                                                errZ
                                                                              )
                                                                                console.log(
                                                                                  errZ
                                                                                );
                                                                              else {
                                                                                if (
                                                                                  !resultZ.length
                                                                                ) {
                                                                                  db.query(
                                                                                    "insert into `myveda-db`.user_course_map_table_la(uid,cust_id,course,iso_std,course_id,reg_date) values(?,?,?,?,?,?)",

                                                                                    [
                                                                                      businessMail,
                                                                                      custID,
                                                                                      course_ttl,
                                                                                      standard,
                                                                                      element.course_id,
                                                                                      today,
                                                                                    ],
                                                                                    (
                                                                                      errL,
                                                                                      resultL
                                                                                    ) => {
                                                                                      if (
                                                                                        errL
                                                                                      )
                                                                                        console.log(
                                                                                          errL
                                                                                        );
                                                                                      else
                                                                                        console.log(
                                                                                          resultL
                                                                                        );
                                                                                    }
                                                                                  );
                                                                                }
                                                                              }
                                                                            }
                                                                          );
                                                                        }
                                                                      }
                                                                    );
                                                                  }
                                                                );
                                                              }
                                                            }
                                                          );
                                                        }
                                                        db.query(
                                                          "SELECT * FROM `myveda-db`.customer_reg WHERE businessMail = ?",
                                                          [businessMail],
                                                          (err, result) => {
                                                            if (err)
                                                              console.log(err);
                                                            else {
                                                              const num =
                                                                result[0]
                                                                  ?.reg_status;
                                                              if (num === 1)
                                                                db.query(
                                                                  "SELECT * FROM `myveda-db`.usr_email_body",
                                                                  (
                                                                    err,
                                                                    result
                                                                  ) => {
                                                                    if (err) {
                                                                      console.log(
                                                                        err
                                                                      );
                                                                    } else {
                                                                      console.log(
                                                                        result
                                                                      );
                                                                      const subject =
                                                                        result[0]
                                                                          ?.subject;
                                                                      const URL =
                                                                        result[0]
                                                                          ?.URL;
                                                                      const message1 =
                                                                        result[0]
                                                                          ?.message1;
                                                                      const message2 =
                                                                        result[0]
                                                                          ?.message2;
                                                                      const caution1 =
                                                                        result[0]
                                                                          ?.caution1;

                                                                      const signature1 =
                                                                        result[0]
                                                                          ?.signature1;
                                                                      const signature2 =
                                                                        result[0]
                                                                          ?.signature2;
                                                                      console.log(
                                                                        subject
                                                                      );
                                                                      console.log(
                                                                        URL
                                                                      );

                                                                      const query1 =
                                                                        "SELECT * FROM `myveda-db`.indi_cust_course_ids where cust_id = ?";

                                                                      setTimeout(
                                                                        () => {
                                                                          db.query(
                                                                            query1,
                                                                            [
                                                                              custID,
                                                                            ],
                                                                            (
                                                                              err66,
                                                                              result66
                                                                            ) => {
                                                                              if (
                                                                                err66
                                                                              )
                                                                                throw err66;
                                                                              else {
                                                                                const arr =
                                                                                  result66;
                                                                                const responseArray =
                                                                                  []; // Array to accumulate items

                                                                                arr.forEach(
                                                                                  (
                                                                                    item
                                                                                  ) => {
                                                                                    responseArray.push(
                                                                                      item
                                                                                    );

                                                                                    if (
                                                                                      responseArray.length ===
                                                                                      arr.length
                                                                                    ) {
                                                                                      // All iterations are completed
                                                                                      // res.json(responseArray)
                                                                                      console.log(
                                                                                        responseArray
                                                                                      );

                                                                                      const output = `
                                                                                    <style>
                                                                                      table {
                                                                                        border-collapse: collapse;
                                                                                        width: 100%;
                                                                                      }
                                                                                      th, td {
                                                                                        border: 1px solid black;
                                                                                        padding: 8px;
                                                                                        text-align: left;
                                                                                      }
                                                                                    </style>
              
                                                                              <h3>Dear ${
                                                                                req
                                                                                  .body
                                                                                  .firstName
                                                                              } ${
                                                                                        req
                                                                                          .body
                                                                                          .lastName
                                                                                      } </h3>
                                                                              <p>${message1}
                                                                              </p>
                      
                                                                              <p><b>Registration Type </b> :  ${regType}</p>
                                                                              <p><b>URL</b> : <a href='${URL}'>${URL}</a></p>
                                                                              <p>  <b>UID</b> : ${
                                                                                req
                                                                                  .body
                                                                                  .businessMail
                                                                              }</p>
                                                                              <p> <b>Passcode</b> : <b>${autoPass}</b> </p>
                                                                              <p> <b>Customer ID</b> : <b>${custID}</b></p>
                                                                              <p><u><b>Caution : ${caution1}</b></u></p>
                                                                              <p><b>Mapped Courses :</b></p>
                                                                              <table>
                                                                                    <thead><tr>
                                                                                      <th>Course-ID</th>
                                                                                      <th>Start Date</th>
                                                                                      <th>End Date</th></tr></thead>
                                                                                      <tbody>
                                                                                      ${responseArray
                                                                                        .map(
                                                                                          (
                                                                                            val
                                                                                          ) => `
                                                                                      <tr>
                                                                                        <td>${val.course_id}</td>
                                                                                        <td>${val.start_date}</td>
                                                                                        <td>${val.end_date}</td>
                                                                                      </tr>
                                                                                    `
                                                                                        )
                                                                                        .join(
                                                                                          ""
                                                                                        )}
                                                                                      </tbody>
                                                                                  </table>
                                                                            
                              
                                                                              <p>!!! This is an automatically system generated email ? please do not reply to it.</p>
                              
                                                                              <p>Thanks & Regards</p>
                                                                              <p>${signature1}</p>
                              
                                                                              `;
                                                                                      console.log(
                                                                                        output
                                                                                      );

                                                                                      db.query(
                                                                                        "SELECT * FROM `myveda-db`.email_srv",
                                                                                        (
                                                                                          err,
                                                                                          result
                                                                                        ) => {
                                                                                          if (
                                                                                            err
                                                                                          ) {
                                                                                            console.log(
                                                                                              err
                                                                                            );
                                                                                          } else {
                                                                                            console.log(
                                                                                              result
                                                                                            );
                                                                                            let host1 =
                                                                                              result[0]
                                                                                                ?.host;
                                                                                            let port1 =
                                                                                              result[0]
                                                                                                ?.port;
                                                                                            let user1 =
                                                                                              result[0]
                                                                                                ?.auth_uid;
                                                                                            let pass1 =
                                                                                              result[0]
                                                                                                ?.auth_pass;
                                                                                            let fromEmail =
                                                                                              result[0]
                                                                                                ?.from_email;
                                                                                            let bccEmail =
                                                                                              result[0]
                                                                                                ?.bcc_email;
                                                                                            let transporter =
                                                                                              nodemailer.createTransport(
                                                                                                {
                                                                                                  host: host1,
                                                                                                  port: port1,
                                                                                                  secure: true, // true for 465, false for other p orts
                                                                                                  auth: {
                                                                                                    user: user1, // generated ethereal user
                                                                                                    pass: pass1, // generated ethereal password
                                                                                                  },
                                                                                                }
                                                                                              );

                                                                                            // send mail with defined transport object
                                                                                            let info =
                                                                                              transporter.sendMail(
                                                                                                {
                                                                                                  from: `"" ${fromEmail}`, // sender address
                                                                                                  to: req
                                                                                                    .body
                                                                                                    .businessMail, // list of receivers
                                                                                                  subject:
                                                                                                    subject, // Subject line
                                                                                                  bcc: bccEmail,
                                                                                                  html: output, // html body
                                                                                                }
                                                                                              );
                                                                                          }
                                                                                        }
                                                                                      );
                                                                                    }
                                                                                  }
                                                                                );
                                                                              }
                                                                            }
                                                                          );
                                                                        },
                                                                        2000
                                                                      );
                                                                    }
                                                                  }
                                                                );
                                                            }
                                                          }
                                                        );
                                                        var autoPass =
                                                          generator.generate({
                                                            length: 10,
                                                            numbers: true,
                                                          });

                                                        var password =
                                                          await bCrypt.hash(
                                                            autoPass,
                                                            10
                                                          );

                                                        console.log(password);

                                                        const sqlInsert1 =
                                                          "INSERT INTO `myveda-db`.auth_tb(uid,passcode) VALUES(?,?)";
                                                        db.query(
                                                          sqlInsert1,
                                                          [
                                                            businessMail,
                                                            password,
                                                          ],
                                                          (err, result) => {
                                                            console.log(err);
                                                          }
                                                        );
                                                      }
                                                    }
                                                  );
                                                } else {
                                                  res.send("user registered");
                                                }
                                              }
                                            }
                                          );
                                        }
                                      }
                                    }
                                  );
                                }
                              }
                            );
                          }
                        }
                      );
                    }
                  }
                );
              }
            }
          );
        }
      }
    );
  } else {
    db.query(
      "SELECT subject,URL FROM `myveda-db`.usr_email_body",
      (err, result) => {
        if (err) {
          console.log(err);
        } else {
          console.log(result);
          const subject = result[0]?.subject;
          const URL = result[0]?.URL;
          console.log(subject);
          console.log(URL);

          db.query(
            "SELECT COUNT(cust_id) AS cust_id_value FROM `myveda-db`.customer_reg WHERE cust_id = ?",
            [custID],
            (err, result) => {
              if (err) {
                console.log(err);
              } else {
                console.log(result[0]?.cust_id_value);
                const userValue = result[0]?.cust_id_value;
                db.query(
                  "UPDATE `myveda-db`.comp_cust_req_db SET registered_user = ? WHERE cust_id = ?",
                  [userValue, custID],
                  (err, result) => {
                    if (err) {
                      console.log(err);
                    } else {
                      db.query(
                        "select (select user_limit_allowed from `myveda-db`.comp_cust_req_db where cust_id = ?) - (select registered_user from  `myveda-db`.comp_cust_req_db where cust_id = ?) as difference",
                        [custID, custID],
                        (err, result) => {
                          if (err) {
                            console.log(err);
                          } else {
                            let remainValue = result[0]?.difference;
                            console.log(remainValue, "remainvalue");
                            db.query(
                              "UPDATE `myveda-db`.comp_cust_req_db SET user_limit_remain = ? WHERE cust_id = ?",
                              [remainValue, custID],
                              (err, result) => {
                                if (err) {
                                  console.log(err);
                                } else {
                                  db.query(
                                    "SELECT user_limit_remain from `myveda-db`.comp_cust_req_db WHERE cust_id = ?",
                                    [custID],
                                    async (err, result) => {
                                      if (err) {
                                        console.log(err);
                                      } else {
                                        console.log(
                                          parseInt(
                                            result[0]?.user_limit_remain,
                                            "Limit"
                                          )
                                        );
                                        if (
                                          parseInt(
                                            result[0]?.user_limit_remain
                                          ) === 0 ||
                                          result[0]?.user_limit_remain ===
                                            undefined
                                        ) {
                                          res.send("not allowed");
                                        } else {
                                          // user registration

                                          db.query(
                                            "SELECT businessMail FROM `myveda-db`.customer_reg WHERE businessMail = ? AND cust_id = ?",
                                            [businessMail, custID],
                                            async (err, result) => {
                                              if (err) {
                                                console.log(err);
                                              } else {
                                                const checkMail = result.length;

                                                if (checkMail === 0) {
                                                  db.query(
                                                    "INSERT INTO `myveda-db`.customer_reg(firstName,lastName,businessMail,contactNumber,city,address,country,img,landmark,cust_id,req_date,reg_type,reg_status,exam_status,app_time,ex_status,state,block) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                                    [
                                                      firstName,
                                                      lastName,
                                                      businessMail,
                                                      contactNumber,

                                                      city,
                                                      address,
                                                      country,
                                                      imgname,

                                                      landmark,
                                                      custID,
                                                      today,
                                                      regType,
                                                      1,
                                                      "Pending",
                                                      "",
                                                      "Pending",
                                                      req.body.state,
                                                      req.body.block,
                                                    ],
                                                    async (err, result) => {
                                                      if (err) {
                                                        console.log(err);
                                                      } else {
                                                        res.send(result);
                                                        if (
                                                          custID.substring(
                                                            6
                                                          ) !== "IND0"
                                                        ) {
                                                          db.query(
                                                            "SELECT * FROM `myveda-db`.corp_cust_course_ids where cust_id = ?",
                                                            [custID],
                                                            (errN, resultN) => {
                                                              if (errN)
                                                                console.log(
                                                                  errN
                                                                );
                                                              else {
                                                                const arr =
                                                                  resultN;
                                                                arr.forEach(
                                                                  (element) => {
                                                                    db.query(
                                                                      "SELECT * FROM `myveda-db`.add_courses where course_id = ?",
                                                                      [
                                                                        element.course_id,
                                                                      ],
                                                                      (
                                                                        errX,
                                                                        resultX
                                                                      ) => {
                                                                        if (err)
                                                                          console.log(
                                                                            err
                                                                          );
                                                                        else {
                                                                          const {
                                                                            course_ttl,
                                                                            standard,
                                                                          } =
                                                                            resultX[0];
                                                                          db.query(
                                                                            "SELECT * FROM `myveda-db`.user_course_map_table_la where uid  = ? and course_id = ?",
                                                                            [
                                                                              businessMail,
                                                                              element.course_id,
                                                                            ],
                                                                            (
                                                                              errZ,
                                                                              resultZ
                                                                            ) => {
                                                                              if (
                                                                                errZ
                                                                              )
                                                                                console.log(
                                                                                  errZ
                                                                                );
                                                                              else {
                                                                                if (
                                                                                  !resultZ.length
                                                                                ) {
                                                                                  db.query(
                                                                                    "insert into `myveda-db`.user_course_map_table_la(uid,cust_id,course,iso_std,course_id,reg_date) values(?,?,?,?,?,?)",

                                                                                    [
                                                                                      businessMail,
                                                                                      custID,
                                                                                      course_ttl,
                                                                                      standard,
                                                                                      element.course_id,
                                                                                      today,
                                                                                    ],
                                                                                    (
                                                                                      errL,
                                                                                      resultL
                                                                                    ) => {
                                                                                      if (
                                                                                        errL
                                                                                      )
                                                                                        console.log(
                                                                                          errL
                                                                                        );
                                                                                      else
                                                                                        console.log(
                                                                                          resultL
                                                                                        );
                                                                                    }
                                                                                  );
                                                                                }
                                                                              }
                                                                            }
                                                                          );
                                                                        }
                                                                      }
                                                                    );
                                                                  }
                                                                );
                                                              }
                                                            }
                                                          );
                                                        }
                                                        db.query(
                                                          "SELECT * FROM `myveda-db`.customer_reg WHERE businessMail = ?",
                                                          [businessMail],
                                                          (err, result) => {
                                                            if (err)
                                                              console.log(err);
                                                            else {
                                                              const num =
                                                                result[0]
                                                                  ?.reg_status;
                                                              if (num === 1)
                                                                db.query(
                                                                  "SELECT * FROM `myveda-db`.usr_email_body",
                                                                  (
                                                                    err,
                                                                    result
                                                                  ) => {
                                                                    if (err) {
                                                                      console.log(
                                                                        err
                                                                      );
                                                                    } else {
                                                                      console.log(
                                                                        result
                                                                      );
                                                                      const subject =
                                                                        result[0]
                                                                          ?.subject;
                                                                      const URL =
                                                                        result[0]
                                                                          ?.URL;
                                                                      const message1 =
                                                                        result[0]
                                                                          ?.message1;
                                                                      const message2 =
                                                                        result[0]
                                                                          ?.message2;
                                                                      const caution1 =
                                                                        result[0]
                                                                          ?.caution1;

                                                                      const signature1 =
                                                                        result[0]
                                                                          ?.signature1;
                                                                      const signature2 =
                                                                        result[0]
                                                                          ?.signature2;
                                                                      console.log(
                                                                        subject
                                                                      );
                                                                      console.log(
                                                                        URL
                                                                      );
                                                                      const query1 =
                                                                        "SELECT * FROM `myveda-db`.corp_cust_course_ids where cust_id = ?";

                                                                      setTimeout(
                                                                        () => {
                                                                          db.query(
                                                                            query1,
                                                                            [
                                                                              custID,
                                                                            ],
                                                                            (
                                                                              err66,
                                                                              result66
                                                                            ) => {
                                                                              if (
                                                                                err66
                                                                              )
                                                                                throw err66;
                                                                              else {
                                                                                const arr =
                                                                                  result66;
                                                                                const responseArray =
                                                                                  []; // Array to accumulate items

                                                                                arr.forEach(
                                                                                  (
                                                                                    item
                                                                                  ) => {
                                                                                    responseArray.push(
                                                                                      item
                                                                                    );

                                                                                    if (
                                                                                      responseArray.length ===
                                                                                      arr.length
                                                                                    ) {
                                                                                      // All iterations are completed
                                                                                      // res.json(responseArray)
                                                                                      console.log(
                                                                                        responseArray
                                                                                      );

                                                                                      const output = `
                                                                                  <style>
                                                                                    table {
                                                                                      border-collapse: collapse;
                                                                                      width: 100%;
                                                                                    }
                                                                                    th, td {
                                                                                      border: 1px solid black;
                                                                                      padding: 8px;
                                                                                      text-align: left;
                                                                                    }
                                                                                  </style>
            
                                                                                
              
                                                                                  <h3>Dear ${
                                                                                    req
                                                                                      .body
                                                                                      .firstName
                                                                                  } ${
                                                                                        req
                                                                                          .body
                                                                                          .lastName
                                                                                      } </h3>
                                                                                  <p>${message1}
                                                                                  </p>
                         
                                                                                 <p><b>Registration Type </b> :  ${regType}</p>
                                                                                  <p><b>URL</b> : <a href='${URL}'>${URL}</a></p>
                                                                                  <p>  <b>UID</b> : ${
                                                                                    req
                                                                                      .body
                                                                                      .businessMail
                                                                                  }</p>
                                                                                  <p> <b>Passcode</b> : <b>${autoPass}</b> </p>
                                                                                  <p> <b>Customer ID</b> : <b>${custID}</b></p>
                                                                              
                                                                            <p><b>Mapped Courses :</b></p>
                                                                            <table>
                                                                                  <thead><tr>
                                                                                    <th>Course-ID</th>
                                                                                    <th>Start Date</th>
                                                                                    <th>End Date</th></tr></thead>
                                                                                    <tbody>
                                                                                    ${responseArray
                                                                                      .map(
                                                                                        (
                                                                                          val
                                                                                        ) => `
                                                                                    <tr>
                                                                                      <td>${val.course_id}</td>
                                                                                      <td>${val.start_date}</td>
                                                                                      <td>${val.end_date}</td>
                                                                                    </tr>
                                                                                  `
                                                                                      )
                                                                                      .join(
                                                                                        ""
                                                                                      )}
                                                                                    </tbody>
                                                                                </table>
                                                                          
                                                                                <p><u><b>Caution : ${caution1}</b></u></p>
                                                                            <p>!!! This is an automatically system generated email ? please do not reply to it.</p>
                            
                                                                            <p>Thanks & Regards</p>
                                                                            <p>${signature1}</p>
                            
                                                                            `;
                                                                                      console.log(
                                                                                        output
                                                                                      );

                                                                                      db.query(
                                                                                        "SELECT * FROM `myveda-db`.email_srv",
                                                                                        (
                                                                                          err,
                                                                                          result
                                                                                        ) => {
                                                                                          if (
                                                                                            err
                                                                                          ) {
                                                                                            console.log(
                                                                                              err
                                                                                            );
                                                                                          } else {
                                                                                            console.log(
                                                                                              result
                                                                                            );
                                                                                            let host1 =
                                                                                              result[0]
                                                                                                ?.host;
                                                                                            let port1 =
                                                                                              result[0]
                                                                                                ?.port;
                                                                                            let user1 =
                                                                                              result[0]
                                                                                                ?.auth_uid;
                                                                                            let pass1 =
                                                                                              result[0]
                                                                                                ?.auth_pass;
                                                                                            let fromEmail =
                                                                                              result[0]
                                                                                                ?.from_email;
                                                                                            let bccEmail =
                                                                                              result[0]
                                                                                                ?.bcc_email;
                                                                                            let transporter =
                                                                                              nodemailer.createTransport(
                                                                                                {
                                                                                                  host: host1,
                                                                                                  port: port1,
                                                                                                  secure: true, // true for 465, false for other p orts
                                                                                                  auth: {
                                                                                                    user: user1, // generated ethereal user
                                                                                                    pass: pass1, // generated ethereal password
                                                                                                  },
                                                                                                }
                                                                                              );

                                                                                            // send mail with defined transport object
                                                                                            let info =
                                                                                              transporter.sendMail(
                                                                                                {
                                                                                                  from: `"" ${fromEmail}`, // sender address
                                                                                                  to: req
                                                                                                    .body
                                                                                                    .businessMail, // list of receivers
                                                                                                  subject:
                                                                                                    subject, // Subject line
                                                                                                  bcc: bccEmail,
                                                                                                  html: output, // html body
                                                                                                }
                                                                                              );
                                                                                          }
                                                                                        }
                                                                                      );
                                                                                    }
                                                                                  }
                                                                                );
                                                                              }
                                                                            }
                                                                          );
                                                                        },
                                                                        2000
                                                                      );
                                                                    }
                                                                  }
                                                                );
                                                            }
                                                          }
                                                        );
                                                        var autoPass =
                                                          generator.generate({
                                                            length: 10,
                                                            numbers: true,
                                                          });

                                                        var password =
                                                          await bCrypt.hash(
                                                            autoPass,
                                                            10
                                                          );

                                                        console.log(password);

                                                        const sqlInsert1 =
                                                          "INSERT INTO `myveda-db`.auth_tb(uid,passcode) VALUES(?,?)";
                                                        db.query(
                                                          sqlInsert1,
                                                          [
                                                            businessMail,
                                                            password,
                                                          ],
                                                          (err, result) => {
                                                            console.log(err);
                                                          }
                                                        );
                                                      }
                                                    }
                                                  );
                                                } else {
                                                  res.send("user registered");
                                                }
                                              }
                                            }
                                          );
                                        }
                                      }
                                    }
                                  );
                                }
                              }
                            );
                          }
                        }
                      );
                    }
                  }
                );
              }
            }
          );
        }
      }
    );
  }
});
//
app.post("/api/insert/trainer/la", (req, res) => {
  const {
    firstName,
    lastName,
    businessMail,
    contactNumber,
    country,
    pincode,
    city,
    experience,
    address,
    photo,
    secEmail,
    landmark,
  } = req.body;
  db.query(
    "INSERT INTO `myveda-db`.trainer_reg_table_la(uid,name,surname,sec_uid,country,pincode,city,contact,address,landmark,course_delivery_exp,img,status) values(?,?,?,?,?,?,?,?,?,?,?,?,?)",
    [
      businessMail,
      firstName,
      lastName,
      secEmail,
      country,
      pincode,
      city,
      contactNumber,
      address,
      landmark,
      experience,
      photo,
      0,
    ],
    (err, result) => {
      if (err) console.log(err);
      else {
        var folderName = trainerPath + businessMail;
        try {
          if (!fs.existsSync(folderName)) {
            fs.mkdirSync(folderName);
            res.send(result);
          }
        } catch (err) {
          console.error(err);
        }
      }
    }
  );
});

// enignner

app.post("/api/insert/engineer/la", (req, res) => {
  const {
    firstName,
    lastName,
    businessMail,
    contactNumber,
    country,
    pincode,
    city,
    experience,
    address,
    photo,
    adhar_num,
    landmark,
    state,
    district,
    high_edu,
    high_tech_edu,
  } = req.body;

  db.query(
    "select * from `main_admin_db`.engineer_reg where uid  = ?",
    [businessMail],
    (err2, result2) => {
      if (err2) console.log(err2);
      else {
        if (result2.length) {
          res.send({ success: false });
        } else {
          db.query(
            "INSERT INTO `main_admin_db`.engineer_reg(uid,name,surname,country,pincode,city,contact,address,landmark,course_delivery_exp,img,reg_status,adhar_num,state,district,high_edu,high_tech_edu) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
            [
              businessMail,
              firstName,
              lastName,

              country,
              pincode,
              city,
              contactNumber,
              address,
              landmark,
              experience,
              photo,
              0,
              adhar_num,
              state,
              district,
              high_edu,
              high_tech_edu,
            ],
            (err, result) => {
              if (err) console.log(err);
              else {
                var folderName = EngPath + "/" + businessMail;
                try {
                  if (!fs.existsSync(folderName)) {
                    fs.mkdirSync(folderName);
                    res.send({ success: true });
                  }
                } catch (err) {
                  console.error(err);
                }
              }
            }
          );
        }
      }
    }
  );
});

//get all trainer list according to status

app.get("/get/trainer/status/:id", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.trainer_reg_table_la where status = ?",
    [req.params.id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//get all eng list according to status

app.get("/get/eng/status/:id", (req, res) => {
  db.query(
    "SELECT * FROM `main_admin_db`.engineer_reg where reg_status = ?",
    [req.params.id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

app.get("/userdata", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.usr_email_body", (err, result) => {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
      const subject = result[0]?.subject;
      const URL = result[0]?.URL;
    }
  });
});

app.get("/api/v1/eng/reg/data/table/:id", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.engineer_reg where uid = ?",
    [req.params.id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
app.post("/login", (req, res) => {
  const uid = req.body.uid;
  const passcode = req.body.passcode;

  db.query(
    "SELECT passcode FROM `myveda-db`.admin_auth WHERE uid = ?",
    [uid],
    (err, result) => {
      if (err) {
        res.send({ err: err });
      }
      if (result != undefined) {
        if (result[0]?.passcode === passcode)
          res.status(200).json({ success: true, message: uid });
        // res.send(result);
        else
          res
            .status(200)
            .json({ success: false, message: "Wrong Username/Password" });
      } else {
        // res.send({messages:"Wrong Username/Password "});
        res
          .status(200)
          .json({ success: false, message: "Wrong Username/Password" });
      }
    }
  );
});
app.post("/eval/login", (req, res) => {
  const uid = req.body.uid;
  const passcode = req.body.passcode;
  console.log(req.body);
  db.query(
    "SELECT passcode FROM `myveda-db`.eval_auth WHERE eval_auth = ?",
    [uid],
    (err, result) => {
      if (err) {
        res.send({ err: err });
      }

      if (result != undefined) {
        if (result[0]?.passcode === passcode)
          res.status(200).json({ success: true, message: uid });
        // res.send(result);
        else
          res
            .status(200)
            .json({ success: false, message: "Wrong Username/Password" });
      } else {
        // res.send({messages:"Wrong Username/Password "});
        console.error("Wrong Username/Password");
      }
    }
  );
});
//get admin cust-id
app.get("/getcourseids/:custId", (req, res) => {
  const custId = req.params.custId;
  db.query(
    "SELECT cust_id,status FROM `myveda-db`.comp_cust_req_db WHERE cust_id = ?",
    [custId],

    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});

//get admin cust-id
app.get("/getadmcustid", (req, res) => {
  db.query(
    "SELECT cust_id FROM `myveda-db`.comp_cust_req_db",

    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
//update status trainer
app.put("/update/status/la/trainer", (req, res) => {
  const { uid, status, answer } = req.body;
  var today;

  const date = new Date();
  today =
    (date.getDate() < 10 ? "0" + date.getDate() : date.getDate()) +
    "-" +
    (date.getMonth() + 1 < 10
      ? "0" + (date.getMonth() + 1)
      : date.getMonth() + 1) +
    "-" +
    date.getFullYear();

  db.query(
    "UPDATE `myveda-db`.trainer_reg_table_la SET status = ?, approve_date = ? where uid = ?",
    [status, status === "1" ? today : "", uid],
    (err, result) => {
      if (err) console.log(err);
      else {
        res.send(result);
        db.query(
          "select * from `myveda-db`.trainer_reg_table_la where uid = ?",
          [uid],
          (err2, result2) => {
            if (err2) console.log(err2);
            else {
              let stats = result2[0].status;
              let firstName = result2[0].name;
              let lastName = result2[0].surname;

              // db.query("SELECT * FROM `myveda-db`.trainer_auth_table_la where uid = ?",[uid],(err22,result22)=>{
              //   if(err22)console.log(err2)
              //   else{

              //   }
              // })

              db.query(
                "SELECT * FROM `myveda-db`.email_temp_update_trainer_la",
                (errX, resultX) => {
                  if (errX) console.log(errX);
                  else {
                    const output = `
  
                  <h3>Dear ${firstName} ${lastName} </h3>
                  <p> ${resultX[0].message} :
                  </p>
  
                  <p> URL : <a href=${resultX[0].url}>${resultX[0].url}</a></p>
  
                  <p>  UID : ${uid}</p>
  
                  <p>  Status : <b>${
                    status === "1" ? "Approved" : "Rejected"
                  }</b> </p>
  
                  ${answer ? `<p>Remark : <b>${answer}</b></p>` : ""} 
  
                  
  
                  <p>!!! This is an automatically system generated email ? please do not reply to it.</p>
  
                  <p>Thanks &#38; Best Regards </p>
  
                  <p>${resultX[0].signature}</p>
  
  
                  `;

                    db.query(
                      "SELECT * FROM `myveda-db`.email_srv",
                      (err, result) => {
                        if (err) {
                          console.log(err);
                        } else {
                          console.log(result);
                          let host1 = result[0]?.host;
                          let port1 = result[0]?.port;
                          let user1 = result[0]?.auth_uid;
                          let pass1 = result[0]?.auth_pass;
                          let fromEmail = result[0]?.from_email;
                          let bccEmail = result[0]?.bcc_email;
                          let transporter = nodemailer.createTransport({
                            host: host1,
                            port: port1,
                            secure: true, // true for 465, false for other p orts
                            auth: {
                              user: user1, // generated ethereal user
                              pass: pass1, // generated ethereal password
                            },
                          });

                          // send mail with defined transport object
                          let info = transporter.sendMail({
                            from: `"" ${fromEmail}`, // sender address
                            to: uid, // list of receivers
                            subject: resultX[0].subject, // Subject line
                            bcc: bccEmail,
                            html: output, // html body
                          });
                        }
                      }
                    );
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});

//update status engineer
app.put("/update/status/eng", (req, res) => {
  const { uid, status, answer } = req.body;
  var today;

  const date = new Date();
  today =
    (date.getDate() < 10 ? "0" + date.getDate() : date.getDate()) +
    "-" +
    (date.getMonth() + 1 < 10
      ? "0" + (date.getMonth() + 1)
      : date.getMonth() + 1) +
    "-" +
    date.getFullYear();

  db.query(
    "UPDATE `main_admin_db`.engineer_reg SET reg_status = ?, approve_date = ? where uid = ?",
    [status, status === "1" ? today : "", uid],
    (err, result) => {
      if (err) console.log(err);
      else {
        // res.send(result);
        db.query(
          "select * from `main_admin_db`.engineer_reg where uid = ?",
          [uid],
          (err2, result2) => {
            if (err2) console.log(err2);
            else {
              let stats = result2[0].status;
              console.log(stats);

              let firstName = result2[0].name;
              let lastName = result2[0].surname;
              let img = result2[0].img;
              let number = result2[0].contact;
              let aadhar_number = result2[0].adhar_num;
              let qualification = result2[0].high_edu;
              let experience = result2[0].course_delivery_exp;

              // db.query("SELECT * FROM `myveda-db`.trainer_auth_table_la where uid = ?",[uid],(err22,result22)=>{
              //   if(err22)console.log(err2)
              //   else{

              //   }
              // })
              if (status === "1") {
                fs.readFile("./assets/id_card.pdf", async function (err, data) {
                  const ab = new ArrayBuffer(data.length);
                  const view = new Uint8Array(ab);

                  for (let i = 0; i < data.length; ++i) {
                    view[i] = data[i];
                  }

                  const pdfDoc = await PDFDocument.load(ab);
                  const helveticaFont = await pdfDoc.embedFont(
                    StandardFonts.TimesRomanItalic
                  );
                  const helveticaFont1 = await pdfDoc.embedFont(
                    StandardFonts.CourierBold
                  );
                  // Step 1: Convert base64 to binary data

                  const userImg = await pdfDoc.embedJpg(img);

                  const pages = pdfDoc.getPages();
                  const firstPage = pages[0];

                  const { width, height } = firstPage.getSize();

                  firstPage.drawImage(userImg, {
                    x: 82,
                    y: height / 2 + 5,
                    font: helveticaFont1,
                    color: rgb(0, 0, 0),
                    height: 90,
                    width: 90,
                  });

                  firstPage.drawText(firstName + " " + lastName, {
                    x: 100,
                    y: height / 2 - 43,
                    font: helveticaFont1,
                    color: rgb(0, 0, 0),
                    size: 12,
                  });

                  firstPage.drawText(number, {
                    x: 100,
                    y: height / 2 - 67,
                    font: helveticaFont1,
                    color: rgb(0, 0, 0),
                    size: 12,
                  });
                  firstPage.drawText(qualification, {
                    x: 100,
                    y: height / 2 - 90,
                    font: helveticaFont1,
                    color: rgb(0, 0, 0),
                    size: 12,
                  });
                  firstPage.drawText(experience, {
                    x: 100,
                    y: height / 2 - 115,
                    font: helveticaFont1,
                    color: rgb(0, 0, 0),
                    size: 12,
                  });
                  firstPage.drawText(aadhar_number, {
                    x: 100,
                    y: height / 2 - 142,
                    font: helveticaFont1,
                    color: rgb(0, 0, 0),
                    size: 12,
                  });
                  const pdfBytes = await pdfDoc.save();
                  fs.writeFileSync(`./engineers_id/${uid}.pdf`, pdfBytes);
                });
              }
              db.query(
                "SELECT * FROM main_admin_db.email_temp_update_eng",
                (errX, resultX) => {
                  if (errX) console.log(errX);
                  else {
                    const output = `

                    <h3>Dear ${firstName} ${lastName} </h3>
                    <p> ${resultX[0].message} :
                    </p>

                    <p> URL : <a href=${resultX[0].url}>${
                      resultX[0].url
                    }</a></p>

                    <p>  UID : ${uid}</p>

                    <p>  Status : <b>${
                      status === "1" ? "Approved" : "Rejected"
                    }</b> </p>

                    ${answer ? `<p>Remark : <b>${answer}</b></p>` : ""}

                    <p>!!! This is an automatically system generated email ? please do not reply to it.</p>

                    <p>Thanks &#38; Best Regards </p>

                    <p>${resultX[0].signature}</p>

                    `;

                    db.query(
                      "SELECT * FROM `myveda-db`.email_srv",
                      (err, result) => {
                        if (err) {
                          console.log(err);
                        } else {
                          console.log(result);
                          let host1 = result[0]?.host;
                          let port1 = result[0]?.port;
                          let user1 = result[0]?.auth_uid;
                          let pass1 = result[0]?.auth_pass;
                          let fromEmail = result[0]?.from_email;
                          let bccEmail = result[0]?.bcc_email;
                          let transporter = nodemailer.createTransport({
                            host: host1,
                            port: port1,
                            secure: true, // true for 465, false for other p orts
                            auth: {
                              user: user1, // generated ethereal user
                              pass: pass1, // generated ethereal password
                            },
                          });

                          // send mail with defined transport object
                          let info = transporter
                            .sendMail({
                              from: `"" ${fromEmail}`, // sender address
                              to: uid, // list of receivers
                              subject: resultX[0].subject, // Subject line
                              bcc: bccEmail,
                              html: output, // html body
                            })
                            .then(() => {
                              res.send(result2);
                            });
                        }
                      }
                    );
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});
//update status fault ticket
app.put("/update/status/fault/ticket/eng", (req, res) => {
  const { engineer, ticket_id } = req.body;
  var today;

  const date = new Date();
  today =
    (date.getDate() < 10 ? "0" + date.getDate() : date.getDate()) +
    "-" +
    (date.getMonth() + 1 < 10
      ? "0" + (date.getMonth() + 1)
      : date.getMonth() + 1) +
    "-" +
    date.getFullYear();

  function formatAMPM(date) {
    var hours = date.getHours();
    var minutes = date.getMinutes();
    var ampm = hours >= 12 ? "pm" : "am";
    hours = hours % 12;
    hours = hours ? hours : 12; // the hour '0' should be '12'
    minutes = minutes < 10 ? "0" + minutes : minutes;
    var strTime = hours + ":" + minutes + " " + ampm;
    return strTime;
  }

  var time = formatAMPM(new Date());

  db.query(
    "update `main_admin_db`.engineer_reg set avl_status = ? where uid = ?",
    [0, engineer],
    (engErr, Engresult) => {
      if (engErr) console.log(engErr);
      else {
        db.query(
          "SELECT * FROM `main_admin_db`.engineer_reg where uid = ?",
          [engineer],
          (err, result) => {
            if (err) console.log(err);
            else {
              const name = result[0]?.name + " " + result[0]?.surname;
              const contact = result[0]?.contact;

              db.query(
                "update main_admin_db.myit_all_ticket_customers set eng_name = ?,eng_mail = ?, eng_num = ?, assign_eng_date_time = ?, status = 1  where ticket_id = ?",
                [name, engineer, contact, today + " " + time, ticket_id],
                (err2, result2) => {
                  if (err2) console.log(err2);
                  else {
                    db.query(
                      "SELECT * FROM main_admin_db.email_temp_ticket_assign",
                      (errX, resultX) => {
                        if (errX) console.log(errX);
                        else {
                          res.send(result);
                          const output = `
    
                  <h3>Dear ${name} </h3>
                  <p>  ${resultX[0].message}
                  </p>
    
              
    
                  <p>  MyIT FT-ID : ${ticket_id}</p>
    
                  <p>!!! ${resultX[0].caution}.</p>
    
                  <p>Thanks &#38; Best Regards </p>
    
                  <p>${resultX[0].signature}</p>
    
    
                  `;

                          db.query(
                            "SELECT * FROM `myveda-db`.email_srv",
                            (err, result) => {
                              if (err) {
                                console.log(err);
                              } else {
                                console.log(result);
                                let host1 = result[0]?.host;
                                let port1 = result[0]?.port;
                                let user1 = result[0]?.auth_uid;
                                let pass1 = result[0]?.auth_pass;
                                let fromEmail = result[0]?.from_email;
                                let bccEmail = result[0]?.bcc_email;
                                let transporter = nodemailer.createTransport({
                                  host: host1,
                                  port: port1,
                                  secure: true, // true for 465, false for other p orts
                                  auth: {
                                    user: user1, // generated ethereal user
                                    pass: pass1, // generated ethereal password
                                  },
                                });

                                // send mail with defined transport object
                                let info = transporter.sendMail({
                                  from: `"" ${fromEmail}`, // sender address
                                  to: engineer, // list of receivers
                                  subject: resultX[0].subject, // Subject line
                                  bcc: bccEmail,
                                  html: output, // html body
                                  attachments: [
                                    {
                                      filename: "engineer_virtual_id.pdf",
                                      path: `./engineers_id/${engineer}.pdf`,
                                    },
                                  ],
                                });
                              }
                            }
                          );
                        }
                      }
                    );
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});
// update ticket
app.put("/api/v1/fault/ticket/revisit/confirm", (req, res) => {
  db.query(
    "update main_admin_db.myit_all_ticket_customers set status = ? where ticket_id = ?",
    [0, req.body.ticket_id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
app.put("/api/v1/update/status/fault/ticket/eng", (req, res) => {
  const { status, ticket_id, amount, remark, pay_res } = req.body;
  const date = new Date();
  const today =
    (date.getDate() < 10 ? "0" + date.getDate() : date.getDate()) +
    "-" +
    (date.getMonth() + 1 < 10
      ? "0" + (date.getMonth() + 1)
      : date.getMonth() + 1) +
    "-" +
    date.getFullYear();

  function formatAMPM(date) {
    var hours = date.getHours();
    var minutes = date.getMinutes();
    var ampm = hours >= 12 ? "pm" : "am";
    hours = hours % 12;
    hours = hours ? hours : 12; // the hour '0' should be '12'
    minutes = minutes < 10 ? "0" + minutes : minutes;
    var strTime = hours + ":" + minutes + " " + ampm;
    return strTime;
  }

  var time = formatAMPM(new Date());
  if (status === "5") {
    db.query(
      "update main_admin_db.myit_all_ticket_customers set status = ?, second_visit_charges = ? where ticket_id  = ?",
      [status, amount ? amount : 0, ticket_id],
      (err, result) => {
        if (err) console.log(err);
        else {
          db.query(
            "select * from main_admin_db.myit_all_ticket_customers where ticket_id = ?",
            [ticket_id],
            (err2, result2) => {
              if (err2) console.log(err2);
              else {
                const data = result2[0].eng_mail;
                db.query(
                  "update main_admin_db.engineer_reg set avl_status = ? where uid = ?",
                  [1, data],
                  (err3, result3) => {
                    if (err3) console.log(err3);
                    else {
                      db.query(
                        "insert into main_admin_db.myit_ft_ticket_log_hist(ticket_id,eng_update_status,eng_update_remark,date,time,eng_mail) value(?,?,?,?,?,?)",
                        [ticket_id, "Closed", remark, today, time, data],
                        (errBB, resultBB) => {
                          if (errBB) console.log(errBB);
                          else {
                            db.query(
                              "select * from main_admin_db.myit_all_ticket_customers where ticket_id = ?",
                              [ticket_id],
                              (err2, result2) => {
                                if (err2) console.log(err2);
                                else {
                                  db.query(
                                    "SELECT * FROM main_admin_db.email_temp_myit_ft_closer",
                                    (errBatch, resultBatch) => {
                                      if (errBatch) console.log(errBatch);
                                      else {
                                        const { name, mail, phone } =
                                          result2[0];
                                        const output = `
                        <h3>Dear ${name}</h3>
                        <p>${resultBatch[0].message}</p>
                        <br />
              
                        <p><b>MYIT FT-ID </b>: ${ticket_id}</p>
            
                        
            
                        <p><b>MYIT FT Status :</b> ${"Closed"}</p>
            
                        <p><b>FT Remarks/ Action Required : </b> ${remark}</p>
            
                        <p><b>URL : </b> <a href=${resultBatch[0].url}>${
                                          resultBatch[0].url
                                        }</a></p>
            
            
              
                        <p><b> Date / Time </b>: ${today}/${time}</p>
              
                  
              
                        <p><b>${resultBatch[0].caution}</b></p>
                        <br />
              
                        <p>Thanks & Regards</p>
                        <p>${resultBatch[0].signature}</p>
                      `;

                                        db.query(
                                          "SELECT * FROM `myveda-db`.email_srv",
                                          (err, result) => {
                                            if (err) {
                                              console.log(err);
                                            } else {
                                              let host1 = result[0]?.host;
                                              let port1 = result[0]?.port;
                                              let user1 = result[0]?.auth_uid;
                                              let pass1 = result[0]?.auth_pass;
                                              let fromEmail =
                                                result[0]?.from_email;
                                              let bccEmail =
                                                result[0]?.bcc_email;
                                              let transporter =
                                                nodemailer.createTransport({
                                                  host: host1,
                                                  port: port1,
                                                  secure: true, // true for 465, false for other p orts
                                                  auth: {
                                                    user: user1, // generated ethereal user
                                                    pass: pass1, // generated ethereal password
                                                  },
                                                });

                                              // send mail with defined transport object
                                              let info = transporter
                                                .sendMail({
                                                  from: `"" ${fromEmail}`, // sender address
                                                  to: mail,
                                                  subject:
                                                    resultBatch[0].subject, // Subject line
                                                  bcc: bccEmail,
                                                  html: output, // html body
                                                })
                                                .then(() => {
                                                  res.send(result);
                                                });

                                              console.log(
                                                "Message sent: %s",
                                                info.messageId
                                              );
                                              console.log(
                                                "Preview URL: %s",
                                                nodemailer.getTestMessageUrl(
                                                  info
                                                )
                                              );
                                            }
                                          }
                                        );
                                      }
                                    }
                                  );
                                }
                              }
                            );
                          }
                        }
                      );
                    }
                  }
                );
              }
            }
          );
        }
      }
    );
  } else {
    db.query(
      "update main_admin_db.myit_all_ticket_customers set status = ?, second_visit_charges = ? where ticket_id  = ?",
      [status, amount, ticket_id],
      (err, result) => {
        if (err) console.log(err);
        else {
          db.query(
            "select * from main_admin_db.myit_all_ticket_customers where ticket_id = ?",
            [ticket_id],
            (err2, result2) => {
              if (err2) console.log(err2);
              else {
                db.query(
                  "insert into main_admin_db.myit_ft_ticket_log_hist(ticket_id,eng_update_status,eng_update_remark,date,time,eng_mail,pay_amt,pay_resn,pay_status) value(?,?,?,?,?,?,?,?,?)",
                  [
                    ticket_id,
                    "Engineer Re-Visit",
                    remark,
                    today,
                    time,
                    result2[0].eng_mail,
                    amount ? amount : "",
                    pay_res ? pay_res : "",
                    "pending",
                  ],
                  (err333, result333) => {
                    if (err333) console.log(err333);
                    else {
                      db.query(
                        "SELECT * FROM main_admin_db.email_temp_eng_revisit",
                        (errBatch, resultBatch) => {
                          if (errBatch) console.log(errBatch);
                          else {
                            const { name, mail, phone } = result2[0];
                            const output = `
            <h3>Dear ${name}</h3>
            <p>${resultBatch[0].message}</p>
            <br />
  
            <p><b>MYIT FT-ID </b>: ${ticket_id}</p>

            

            <p><b>MYIT FT Status :</b> ${"Engineer Re-Visit"}</p>

            <p><b>FT Remarks/ Action Required : </b> ${remark}</p>

           ${amount ? `<p><b>Payable Amount : </b> ${amount}</p>` : ""}
           ${amount ? `<p><b>Payment Reason : </b> ${pay_res}</p>` : ""}

            <p><b>URL : </b> <a href=${resultBatch[0].url}>${
                              resultBatch[0].url
                            }</a></p>


  
            <p><b> Date / Time </b>: ${today}/${time}</p>
  
            <p><b>${resultBatch[0].caution}</b></p>
            <br />
  
            <p>Thanks & Regards</p>
            <p>${resultBatch[0].signature}</p>
          `;

                            db.query(
                              "SELECT * FROM `myveda-db`.email_srv",
                              (err, result) => {
                                if (err) {
                                  console.log(err);
                                } else {
                                  let host1 = result[0]?.host;
                                  let port1 = result[0]?.port;
                                  let user1 = result[0]?.auth_uid;
                                  let pass1 = result[0]?.auth_pass;
                                  let fromEmail = result[0]?.from_email;
                                  let bccEmail = result[0]?.bcc_email;
                                  let transporter = nodemailer.createTransport({
                                    host: host1,
                                    port: port1,
                                    secure: true, // true for 465, false for other p orts
                                    auth: {
                                      user: user1, // generated ethereal user
                                      pass: pass1, // generated ethereal password
                                    },
                                  });

                                  // send mail with defined transport object
                                  let info = transporter
                                    .sendMail({
                                      from: `"" ${fromEmail}`, // sender address
                                      to: mail,
                                      subject: resultBatch[0].subject, // Subject line
                                      bcc: bccEmail,
                                      html: output, // html body
                                    })
                                    .then(() => {
                                      res.send(result);
                                    });

                                  console.log(
                                    "Message sent: %s",
                                    info.messageId
                                  );
                                  console.log(
                                    "Preview URL: %s",
                                    nodemailer.getTestMessageUrl(info)
                                  );
                                }
                              }
                            );
                          }
                        }
                      );
                    }
                  }
                );
              }
            }
          );
        }
      }
    );
  }
});
// take all ticket of MYIT fault ticket
app.get("/eng/all/tickets/resolve/:id", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.myit_all_ticket_customers where eng_mail = ?",
    [req.params.id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// take all ticket of MYIT fault ticket
app.get("/myit/check/ticket/status/:id", (req, res) => {
  console.log("connect");
  db.query(
    "SELECT * FROM main_admin_db.myit_all_ticket_customers where ticket_id = ?",
    [req.params.id],
    (err, result) => {
      if (err) console.log(err);
      else {
        if (result.length) {
          res.send(result);
        } else {
          res.json({ message: "! MyIT FT-ID Not Found" });
        }
      }
    }
  );
});
// resolve ticket of User
app.put("/api/v1/resolve/eng/fault/ticket", (req, res) => {
  const { engineer, ticket_id, answer, status, partReq } = req.body;
  const date = new Date();
  const today =
    (date.getDate() < 10 ? "0" + date.getDate() : date.getDate()) +
    "-" +
    (date.getMonth() + 1 < 10
      ? "0" + (date.getMonth() + 1)
      : date.getMonth() + 1) +
    "-" +
    date.getFullYear();
  const file = req.files?.file;

  function formatAMPM(date) {
    var hours = date.getHours();
    var minutes = date.getMinutes();
    var ampm = hours >= 12 ? "pm" : "am";
    hours = hours % 12;
    hours = hours ? hours : 12; // the hour '0' should be '12'
    minutes = minutes < 10 ? "0" + minutes : minutes;
    var strTime = hours + ":" + minutes + " " + ampm;
    return strTime;
  }

  if (file) {
    fs.writeFileSync(
      `${admFilePath}/engineer_part_req/${today + "_" + file?.name}`,
      file?.data
    );
    fs.writeFileSync(
      `${filePath}/engineer_part_req/${today + "_" + file?.name}`,
      file?.data
    );
  }

  // fs.writeFileSync(
  //   `${admFilePath}/engineer_part_req/${ticket_id + "_" + file?.name}`,
  //   file?.data
  // );
  var time = formatAMPM(new Date());
  var status1 = "";

  if (status === "0") {
    status1 = "In-Progress";
  } else if (status === "3") {
    status1 = "Part Change";
  } else if (status === "4") {
    status1 = "On The Way";
  } else {
    status1 = "Engineer Actions Completed";
  }
  db.query(
    "update main_admin_db.myit_all_ticket_customers set eng_remark = ?, status = ?,eng_update_ticket_date_time = ?,part_details = ? where ticket_id = ? and eng_mail = ?",
    [
      answer,
      status,
      today + " " + time,
      file ? partReq : "",
      ticket_id,
      engineer,
    ],
    (err, result) => {
      if (err) console.log(err);
      else {
        db.query(
          "insert into main_admin_db.myit_ft_ticket_log_hist(ticket_id,eng_update_status,eng_update_remark,date,time,part_detail,img_name) values(?,?,?,?,?,?,?)",
          [
            ticket_id,
            status1,
            answer,
            today,
            time,
            partReq,
            today + "_" + file?.name,
          ],
          (err2, result2) => {
            db.query(
              "SELECT * FROM main_admin_db.email_temp_myit_ft_eng_update",
              (err, resultMMN) => {
                if (err) {
                  console.log(err);
                } else {
                  const { subject, url, message, caution, sign } = resultMMN[0];

                  const output = `

            <h3>Dear Admin </h3>
            <p> ${message}
            </p>

            <p><b> MYIT FT-ID : </b> ${ticket_id}</p>
            <p><b>URL : </b> <a href=${url}>${url}</a></p>
            <p><b>Enginer E-mail : </b> ${engineer}</p>
            ${file ? `<p><b>Part Required :</b> ${partReq}</p>` : ""}
            <p><b>MYIT FT Status : </b> ${status1}</p>
            <p><b>Engineer Remarks/Action Required : </b> ${answer}</p>
            <p><b>Date/Time : </b> ${today}/${time}</p>

            <p><u><b>Caution : ${caution}</b></u></p>

            <p>!!! This is an automatically system generated email ? please do not reply to it.</p>

            <p>Thanks &#38; Best Regards </p>

            <p>${sign}</p>

            `;

                  db.query(
                    "SELECT * FROM `myveda-db`.email_srv",
                    (err, result) => {
                      if (err) {
                        console.log(err);
                      } else {
                        console.log(result);
                        let host1 = result[0]?.host;
                        let port1 = result[0]?.port;
                        let user1 = result[0]?.auth_uid;
                        let pass1 = result[0]?.auth_pass;
                        let fromEmail = result[0]?.from_email;
                        let bccEmail = result[0]?.bcc_email;
                        let transporter = nodemailer.createTransport({
                          host: host1,
                          port: port1,
                          secure: true, // true for 465, false for other p orts
                          auth: {
                            user: user1, // generated ethereal user
                            pass: pass1, // generated ethereal password
                          },
                        });

                        // send mail with defined transport object
                        if (file) {
                          let info = transporter
                            .sendMail({
                              from: `"" ${fromEmail}`, // sender address
                              to: bccEmail, // list of receivers
                              subject: subject + " MyIT FT-ID : " + ticket_id, // Subject line

                              html: output, // html body
                              attachments: [
                                {
                                  filename: file?.name,
                                  content: fs.createReadStream(
                                    `${admFilePath}/engineer_part_req/${
                                      today + "_" + file?.name
                                    }`,
                                    file?.data
                                  ),
                                },
                              ],
                            })
                            .then(() => {
                              res.send(result);
                            });
                        } else {
                          let info = transporter
                            .sendMail({
                              from: `"" ${fromEmail}`, // sender address
                              to: bccEmail, // list of receivers
                              subject: subject + " MyIT FT-ID : " + ticket_id, // Subject line

                              html: output, // html body
                            })
                            .then(() => {
                              res.send(result);
                            });
                        }
                      }
                    }
                  );
                }
              }
            );
          }
        );
      }
    }
  );
});
// ticket logged for engineer
app.get("/myit/all/tickets", (req, res) => {
  db.query(
    "SELECT * FROM  main_admin_db.myit_all_ticket_customers ORDER BY id DESC",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//
app.get("/get/all/eng/assign", (req, res) => {
  db.query(
    "SELECT * FROM `main_admin_db`.engineer_reg where reg_status = ?",
    [1],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
app.get("/getadmcourseid/:value1", (req, res) => {
  const value1 = req.params.value1;
  db.query(
    "SELECT * FROM `myveda-db`.comp_cust_req_db where cust_id = ?",
    [value1],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});

app.get("/getadmcourseid2/:takeValue", (req, res) => {
  const takeValue = req.params.takeValue;
  db.query(
    "SELECT * FROM `myveda-db`.comp_cust_req_db where cust_id = ?",
    [takeValue],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});

//get status data from admin database
// app.get('/getstatususer',(req,res)=>{

//     const custId=req.body.custId;
//     console.log(custId)

//     db.query('SELECT status FROM `myveda-db`.comp_cust_req_db WHERE cust_id=?',[custId],(err,result)=>{
//         console.log(err)
//     })
// })

//forgot passcode
app.post("/forgetpasscode", (req, res) => {
  const email = req.body.getEmail;

  db.query(
    "SELECT uid,passcode FROM  `myveda-db`.auth_tb   WHERE uid = ?",
    [email],
    (err, result) => {
      if (err) {
        console.log(err);
      }
      if (result != undefined) {
        if (result[0]?.uid === email) {
          res.status(200).json({ success: true, message: email });
          const uid = result[0]?.uid;
          const passcode = result[0]?.passcode;
          console.log(uid);
          console.log(passcode);
          db.query(
            "SELECT * FROM `myveda-db`.customer_reg WHERE businessMail = ?",
            [uid],
            async (err, result) => {
              if (err) {
                console.log(err);
              } else {
                var firstName = result[0].firstName;
                var lastName = result[0].lastName;
                var custID = result[0].cust_id;
                db.query(
                  "SELECT * FROM `myveda-db`.passcode_email_cnf",
                  (err, result) => {
                    if (err) {
                      console.log(err);
                    } else {
                      const subject = result[0].subject;
                      const url = result[0].url;
                      const msg = result[0].message;
                      const caution = result[0].caution;
                      const sign = result[0].signature;

                      const output = `

                <h3>Dear ${firstName} ${lastName} </h3>
                <p> ${msg}
                </p>

            

                <p>  UID : ${uid}</p>

                <p> Customer-ID : <b>${custID}</b></p>

                <h5> Change/Reset Passcode Link : <a href='http://localhost:3000/change-pass/${uid}' target="_blank">Click Here</a> </h5>
               
                <p><u><b>Caution : ${caution}</b></u></p>


                <p>!!! This is an automatically system generated email ? please do not reply to it.</p>

                <p>Thanks &#38; Best Regards </p>

                <p>${sign}</p>


                `;

                      db.query(
                        "SELECT * FROM `myveda-db`.email_srv",
                        (err, result) => {
                          if (err) {
                            console.log(err);
                          } else {
                            console.log(result);
                            let host1 = result[0]?.host;
                            let port1 = result[0]?.port;
                            let user1 = result[0]?.auth_uid;
                            let pass1 = result[0]?.auth_pass;
                            let fromEmail = result[0]?.from_email;
                            let bccEmail = result[0]?.bcc_email;
                            let transporter = nodemailer.createTransport({
                              host: host1,
                              port: port1,
                              secure: true, // true for 465, false for other p orts
                              auth: {
                                user: user1, // generated ethereal user
                                pass: pass1, // generated ethereal password
                              },
                            });

                            // send mail with defined transport object
                            let info = transporter.sendMail({
                              from: `"" ${fromEmail}`, // sender address
                              to: req.body.getEmail, // list of receivers
                              subject: subject, // Subject line
                              bcc: bccEmail,
                              html: output, // html body
                            });
                          }
                        }
                      );
                    }
                  }
                );
              }
            }
          );
        }

        // res.send(result);
        else
          res
            .status(200)
            .json({ success: false, message: "Wrong Username/Password" });
      } else {
        // res.send({messages:"Wrong Username/Password "});
        res
          .status(200)
          .json({ success: false, message: "Wrong Username/Password" });
      }
    }
  );
});

//
app.put("/api/v1/reset/change/passcode/uid", (req, res) => {
  try {
    async function dataFly() {
      const { uid, passcode } = req.body;
      var password = await bCrypt.hash(passcode, 10);
      console.log("11");
      db.query(
        "update `myveda-db`.auth_tb set passcode  = ? where uid = ?",
        [password, uid],
        (err, result) => {
          if (err) console.log(err);
          else {
            db.query(
              "SELECT * FROM `myveda-db`.customer_reg WHERE businessMail = ?",
              [uid],
              (err, result) => {
                if (err) {
                  console.log(err);
                } else {
                  var firstName = result[0].firstName;
                  var lastName = result[0].lastName;
                  var custID = result[0].cust_id;
                  db.query(
                    "SELECT * FROM `myveda-db`.passcode_email_cnf",
                    (err, result) => {
                      if (err) {
                        console.log(err);
                      } else {
                        console.log("22");
                        const subject = result[0].subject;
                        const url = result[0].url;
                        const msg = result[0].message;
                        const caution = result[0].caution;
                        const sign = result[0].signature;

                        const output = `
  
                <h3>Dear ${firstName} ${lastName} </h3>
                <p> ${msg}
                </p>
  
            
  
                <p>  UID : ${uid}</p>
  
                <p> Passcode : ${passcode}</p>
  
                <p> Customer-ID : <b>${custID}</b></p>
  
                <p> Change/Reset Passcode Link : <a href='http://localhost:3000/change-pass/${uid}' target="_blank">Click Here</a> </p>
              
  
  
                <p>!!! This is an automatically system generated email ? please do not reply to it.</p>
  
                <p>Thanks &#38; Best Regards </p>
  
                <p>${sign}</p>
  
  
                `;

                        db.query(
                          "SELECT * FROM `myveda-db`.email_srv",
                          (err, result) => {
                            if (err) {
                              console.log(err);
                            } else {
                              console.log(result);
                              let host1 = result[0]?.host;
                              let port1 = result[0]?.port;
                              let user1 = result[0]?.auth_uid;
                              let pass1 = result[0]?.auth_pass;
                              let fromEmail = result[0]?.from_email;
                              let bccEmail = result[0]?.bcc_email;
                              let transporter = nodemailer.createTransport({
                                host: host1,
                                port: port1,
                                secure: true, // true for 465, false for other p orts
                                auth: {
                                  user: user1, // generated ethereal user
                                  pass: pass1, // generated ethereal password
                                },
                              });

                              // send mail with defined transport object
                              let info = transporter
                                .sendMail({
                                  from: `"" ${fromEmail}`, // sender address
                                  to: uid, // list of receivers
                                  subject: subject, // Subject line
                                  bcc: bccEmail,
                                  html: output, // html body
                                })
                                .then(() => {
                                  res.send({ success: true });
                                });
                            }
                          }
                        );
                      }
                    }
                  );
                }
              }
            );
          }
        }
      );
    }

    dataFly();
  } catch (error) {}
});

// forgot Passcode Engineer
app.post("/engineer/forgot/passcode", (req, res) => {
  const email = req.body.getEmail;
  var autoPass = generator.generate({
    length: 10,
    numbers: true,
  });

  db.query(
    "SELECT uid,passcode FROM  main_admin_db.engineer_auth WHERE uid = ?",
    [email],
    (err, result) => {
      if (err) {
        console.log(err);
      }
      if (result != undefined) {
        if (result[0]?.uid === email) {
          const uid = result[0]?.uid;
          const passcode = result[0]?.passcode;
          console.log(uid);
          console.log(passcode);
          db.query(
            "SELECT * FROM main_admin_db.engineer_reg WHERE uid = ?",
            [uid],
            async (err, result) => {
              if (err) {
                console.log(err);
              } else {
                var password = await bCrypt.hash(autoPass, 10);
                var firstName = result[0].name;
                var lastName = result[0].surname;

                db.query(
                  "UPDATE main_admin_db.engineer_auth SET passcode  = ? WHERE uid= ?",
                  [password, uid],
                  (err, result) => {
                    if (err) {
                      console.log(err);
                    } else {
                      db.query(
                        "SELECT * FROM `myveda-db`.passcode_email_cnf",
                        (err, result) => {
                          if (err) {
                            console.log(err);
                          } else {
                            res
                              .status(200)
                              .json({ success: true, message: email });
                            const subject = result[0].subject;
                            const url = result[0].url;
                            const msg = result[0].message;
                            const caution = result[0].caution;
                            const sign = result[0].signature;

                            const output = `
  
                      <h3>Dear ${firstName} ${lastName} </h3>
                      <p> ${msg}
                      </p>

                      <p>URL : ${url}</p>
  
                      <p>  UID : ${uid}</p>

                      <p>  Passcode : <b>${autoPass}</b> </p>

                   

                      <p><u><b>Caution : ${caution}</b></u></p>
  
                    
  
                      <p>Thanks &#38; Best Regards </p>

                      <p>${sign}</p>
  
  
                      `;

                            db.query(
                              "SELECT * FROM `myveda-db`.email_srv",
                              (err, result) => {
                                if (err) {
                                  console.log(err);
                                } else {
                                  console.log(result);
                                  let host1 = result[0]?.host;
                                  let port1 = result[0]?.port;
                                  let user1 = result[0]?.auth_uid;
                                  let pass1 = result[0]?.auth_pass;
                                  let fromEmail = result[0]?.from_email;
                                  let bccEmail = result[0]?.bcc_email;
                                  let transporter = nodemailer.createTransport({
                                    host: host1,
                                    port: port1,
                                    secure: true, // true for 465, false for other p orts
                                    auth: {
                                      user: user1, // generated ethereal user
                                      pass: pass1, // generated ethereal password
                                    },
                                  });

                                  // send mail with defined transport object
                                  let info = transporter.sendMail({
                                    from: `"" ${fromEmail}`, // sender address
                                    to: req.body.getEmail, // list of receivers
                                    subject: "Engineer Forgot Passcode", // Subject line
                                    bcc: bccEmail,
                                    html: output, // html body
                                  });
                                }
                              }
                            );
                          }
                        }
                      );
                    }
                  }
                );
              }
            }
          );
        }

        // res.send(result);
        else
          res
            .status(200)
            .json({ success: false, message: "Wrong Username/Password" });
      } else {
        // res.send({messages:"Wrong Username/Password "});
        res
          .status(200)
          .json({ success: false, message: "Wrong Username/Password" });
      }
    }
  );
});
// forgot Passcode trainer
app.post("/trainer/forgot/passcode", (req, res) => {
  const email = req.body.getEmail;
  var autoPass = generator.generate({
    length: 10,
    numbers: true,
  });

  db.query(
    "SELECT uid,passcode FROM  `myveda-db`.trainer_auth_table_la WHERE uid = ?",
    [email],
    (err, result) => {
      if (err) {
        console.log(err);
      }
      if (result != undefined) {
        if (result[0]?.uid === email) {
          const uid = result[0]?.uid;
          const passcode = result[0]?.passcode;
          console.log(uid);
          console.log(passcode);
          db.query(
            "SELECT * FROM `myveda-db`.trainer_reg_table_la WHERE uid = ?",
            [uid],
            async (err, result) => {
              if (err) {
                console.log(err);
              } else {
                var password = await bCrypt.hash(autoPass, 10);
                var firstName = result[0].name;
                var lastName = result[0].surname;

                db.query(
                  "UPDATE `myveda-db`.trainer_auth_table_la SET passcode  = ? WHERE uid= ?",
                  [password, uid],
                  (err, result) => {
                    if (err) {
                      console.log(err);
                    } else {
                      db.query(
                        "SELECT * FROM `myveda-db`.passcode_email_cnf",
                        (err, result) => {
                          if (err) {
                            console.log(err);
                          } else {
                            res
                              .status(200)
                              .json({ success: true, message: email });
                            const subject = result[0].subject;
                            const url = result[0].url;
                            const msg = result[0].message;
                            const caution = result[0].caution;
                            const sign = result[0].signature;

                            const output = `
  
                      <h3>Dear ${firstName} ${lastName} </h3>
                      <p> ${msg}
                      </p>

                      <p>URL : ${url}</p>
  
                      <p>  UID : ${uid}</p>

                      <p>  Passcode : <b>${autoPass}</b> </p>

                   

                      <p><u><b>Caution : ${caution}</b></u></p>
  
                      <p>!!! This is an automatically system generated email ? please do not reply to it.</p>
  
                      <p>Thanks &#38; Best Regards </p>

                      <p>${sign}</p>
  
  
                      `;

                            db.query(
                              "SELECT * FROM `myveda-db`.email_srv",
                              (err, result) => {
                                if (err) {
                                  console.log(err);
                                } else {
                                  console.log(result);
                                  let host1 = result[0]?.host;
                                  let port1 = result[0]?.port;
                                  let user1 = result[0]?.auth_uid;
                                  let pass1 = result[0]?.auth_pass;
                                  let fromEmail = result[0]?.from_email;
                                  let bccEmail = result[0]?.bcc_email;
                                  let transporter = nodemailer.createTransport({
                                    host: host1,
                                    port: port1,
                                    secure: true, // true for 465, false for other p orts
                                    auth: {
                                      user: user1, // generated ethereal user
                                      pass: pass1, // generated ethereal password
                                    },
                                  });

                                  // send mail with defined transport object
                                  let info = transporter.sendMail({
                                    from: `"" ${fromEmail}`, // sender address
                                    to: req.body.getEmail, // list of receivers
                                    subject: "Trainer Forgot Passcode", // Subject line
                                    bcc: bccEmail,
                                    html: output, // html body
                                  });
                                }
                              }
                            );
                          }
                        }
                      );
                    }
                  }
                );
              }
            }
          );
        }

        // res.send(result);
        else
          res
            .status(200)
            .json({ success: false, message: "Wrong Username/Password" });
      } else {
        // res.send({messages:"Wrong Username/Password "});
        res
          .status(200)
          .json({ success: false, message: "Wrong Username/Password" });
      }
    }
  );
});
//get user cust-id
app.get("/getusrcustid", (req, res) => {
  db.query("SELECT cust_id FROM `myveda-db`.customer_reg", (err, result) => {
    if (err) {
      console.log(err);
    } else {
      res.send(result);
    }
  });
});

//User Image Fetch
app.get("/userimg/:user", (req, res) => {
  let user = req.params.user;

  db.query(
    "SELECT img FROM `myveda-db`.customer_reg WHERE businessMail = ?",
    [user],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
//Trainer Image Fetch
app.get("/trainerimg/:user", (req, res) => {
  let user = req.params.user;
  db.query(
    "SELECT img FROM `myveda-db`.trainer_reg_table_la WHERE uid = ?",
    [user],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
//engineer Image Fetch
app.get("/eng/img/:user", (req, res) => {
  let user = req.params.user;
  db.query(
    "SELECT img FROM `main_admin_db`.engineer_reg WHERE uid = ?",
    [user],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
//all user for active batch
app.get("/active/batch/learner/:id", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.usr_batch_status_la where batch_id =?",
    [req.params.id],
    (err, result) => {
      if (err) console.log(err);
      else {
        res.send(result);
      }
    }
  );
});
//info of trainer homepage
app.get("/active/info/:id", (req, res) => {
  db.query(
    "SELECT *,t1.duration as data_time FROM `myveda-db`.sat_batch_status_la as t1 JOIN `myveda-db`.add_courses as t2 on t1.course_id = t2.course_id  where batch_id =? order by id_sat_batch desc",
    [req.params.id],
    (err, result) => {
      if (err) console.log(err);
      else {
        res.send(result);
      }
    }
  );
});
//Cust Id Fetch for User
app.get("/custid/:user", (req, res) => {
  let user = req.params.user;

  db.query(
    "SELECT * FROM `myveda-db`.customer_reg WHERE businessMail = ?",
    [user],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
//Cust Id Fetch for User
app.get("/businessuid/:user", (req, res) => {
  let user = req.params.user;

  db.query(
    `SELECT *
    FROM \`myveda-db\`.customer_reg AS t1
    LEFT JOIN \`myveda-db\`.user_course_map_table_la AS t2 ON t1.businessMail = t2.uid
    WHERE t1.businessMail = ?
    `,
    [user],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
//
app.get("/user/feedback/data/:uid/:course_id", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.usr_feedbck where uid = ? and course_id = ?",
    [req.params.uid, req.params.course_id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// get course duration for user
app.get("/get/course/duration/:id_pass2", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.add_courses where course_id = ?",
    [req.params.id_pass2],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//get course duration of users
app.get("/course/duration/user/:user/:id_pass2", (req, res) => {
  db.query(
    `SELECT *
    FROM \`myveda-db\`.customer_reg AS t1
    LEFT JOIN \`myveda-db\`.user_course_map_table_la AS t2 ON t1.businessMail = t2.uid
    WHERE t1.businessMail = ? and t2.course_id = ?`,
    [req.params.user, req.params.id_pass2],
    (err, result) => {
      if (err) console.log(err);
      else {
        res.send(result);
        console.log(result);
      }
    }
  );
});
app.get("/check/course/expire/date/:user", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.active_usr_data_la where uid = ? and status = ?",
    [req.params.user, "0"],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//
app.get("/get/meet/auth/:email", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.meet_auth where uid = ?",
    [req.params.email],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//schedule meeting link

//Use the ApiKey and APISecret from config.js
app.post("/meeting", (req, res) => {
  email = req.body.email;

  const { api_key, secret_key } = req.body;

  console.log(req.body);

  const payload = {
    iss: api_key,
    exp: new Date().getTime() + 5000,
  };

  const token = jwt.sign(payload, secret_key);

  var options = {
    method: "POST",
    uri: "https://api.zoom.us/v2/users/" + email + "/meetings",
    body: {
      topic: "Meeting",
      type: 1,
      settings: {
        host_video: "true",
        participant_video: "true",
      },
    },
    auth: {
      bearer: token,
    },
    headers: {
      "User-Agent": "Zoom-api-Jwt-Request",
      "content-type": "application/json",
    },
    json: true, //Parse the JSON string in the response
  };

  rp(options)
    .then(function (response) {
      console.log("response is: ", response.join_url);
      // response.status(200).json(response);
      let dataRes = {
        join_url: response.join_url,
      };
      res.status(200).json(dataRes);

      // console.log(dataRes + "hello 222");

      // res.send("create meeting result: " + JSON.stringify(response));
    })
    .catch(function (err) {
      // API call failed...
      console.log("API call failed, reason ", err);
    });
});

//send meeting link trainer and learner
const createMeet = (
  arr,
  res,
  result2,
  batch_id,
  link,
  meetAgenda,
  date,
  time
) => {
  arr.forEach((element, index, myarr) => {
    db.query(
      `select * from \`myveda-db\`.customer_reg where businessMail = ?`,
      [element],
      (errP, resultP) => {
        if (errP) console.log(errP);
        else {
          db.query(
            "SELECT * FROM `myveda-db`.email_temp_meeting",
            (errBatch, resultBatch) => {
              if (errBatch) console.log(errBatch);
              else {
                const output = `
  <h3>Dear ${resultP[0]?.firstName + " " + resultP[0]?.lastName}</h3>
  <p>${resultBatch[0].message}</p>
  <br />
  
  <p><b>Course-ID </b>: ${result2[0]?.course_id}</p>
  
  <p><b>Batch-ID </b>: ${batch_id}</p>
  
  <p><b>Trainer Details </b></p>
  
  <p><b>Name </b>: ${result2[0].name + " " + result2[0].surname}</p>
  
  <p><b>E-mail </b>: ${result2[0].uid}</p>
  
  <p><b>Phone No. </b>: ${result2[0].contact}</p>
  
  
  <p><b>Meeting Link</b> : <a href=${link}>${link}</a></p>
    <p><b>Meeting Agenda</b> : ${meetAgenda}</p>
    <p><b>Meeting Date</b> : ${date}</p>
    <p><b>Meeting Time</b> : ${time}</p>


  
  <p><b>${resultBatch[0].caution}.</b></p>
  <br />
  
  <p>Thanks & Regards</p>
  <p>${resultBatch[0].signature}</p>
  `;

                db.query(
                  "SELECT * FROM `myveda-db`.email_srv",
                  (err, result) => {
                    if (err) {
                      console.log(err);
                    } else {
                      console.log(result);
                      let host1 = result[0]?.host;
                      let port1 = result[0]?.port;
                      let user1 = result[0]?.auth_uid;
                      let pass1 = result[0]?.auth_pass;
                      let fromEmail = result[0]?.from_email;
                      let bccEmail = result[0]?.bcc_email;
                      let transporter = nodemailer.createTransport({
                        host: host1,
                        port: port1,
                        secure: true, // true for 465, false for other p orts
                        auth: {
                          user: user1, // generated ethereal user
                          pass: pass1, // generated ethereal password
                        },
                      });

                      // send mail with defined transport object
                      let info = transporter.sendMail({
                        from: `"" ${fromEmail}`, // sender address
                        to: element,
                        subject: resultBatch[0].subject, // Subject line
                        bcc: bccEmail,
                        html: output, // html body
                      });

                      console.log("Message sent: %s", info.messageId);
                      console.log(
                        "Preview URL: %s",
                        nodemailer.getTestMessageUrl(info)
                      );
                    }
                  }
                );
              }
            }
          );
        }
      }
    );

    if (Object.is(myarr.length - 1, index)) {
      res.send({ success: true });
    }
  });
};
app.post("/create/sat/meet", (req, res) => {
  const { batch_id, date, time, link, students, meetAgenda } = req.body;

  //also match date and time to count query
  db.query(
    "select * from `myveda-db`.sat_batch_status_la where meet_link is null and batch_id = ?",
    [link, batch_id],
    (errWW, resultWW) => {
      if (errWW) console.log(errWW);
      else {
        if (resultWW.length === 1) {
          db.query(
            "update `myveda-db`.sat_batch_status_la set duration = ?, meet_link = ?,meet_agenda = ?,start_date = ?,start_time = ?  where batch_id = ?",
            [
              "Date - " + date + " Time - " + time,
              link,
              meetAgenda,
              date,
              time,
              batch_id,
            ],
            (err, result) => {
              if (err) console.log(err);
              else {
                db.query(
                  "SELECT * FROM `myveda-db`.sat_batch_status_la t1  JOIN `myveda-db`.trainer_reg_table_la t2 ON t1.trainer_uid =t2.uid Join `myveda-db`.batch_ids_la as t3 on t1.trainer_uid = t3.trainer where t3.batch_ids = ?",
                  [batch_id],
                  (err2, result2) => {
                    if (err2) console.log(err2);
                    else {
                      createMeet(
                        students,
                        res,
                        result2,
                        batch_id,
                        link,
                        meetAgenda,
                        date,
                        time
                      );
                    }
                  }
                );
              }
            }
          );
        } else {
          db.query(
            "SELECT * FROM `myveda-db`.sat_batch_status_la where batch_id = ?",
            [batch_id],
            (errWW, resultWW) => {
              if (errWW) console.log(errWW);
              else {
                db.query(
                  "insert into `myveda-db`.sat_batch_status_la(trainer_uid,batch_id,course_id,duration,meet_link,course,meet_agenda, start_date,start_time) values(?,?,?,?,?,?,?,?,?)",
                  [
                    resultWW[0].trainer_uid,
                    batch_id,
                    resultWW[0].course_id,
                    "Date - " + date + " Time - " + time,
                    link,
                    resultWW[0].course,
                    meetAgenda,
                    date,
                    time,
                  ],
                  (err, result) => {
                    if (err) console.log(err);
                    else {
                      db.query(
                        "SELECT * FROM `myveda-db`.sat_batch_status_la t1  JOIN `myveda-db`.trainer_reg_table_la t2 ON t1.trainer_uid =t2.uid Join `myveda-db`.batch_ids_la as t3 on t1.trainer_uid = t3.trainer where t3.batch_ids = ?",
                        [batch_id],
                        (err2, result2) => {
                          if (err2) console.log(err2);
                          else {
                            createMeet(
                              students,
                              res,
                              result2,
                              batch_id,
                              link,
                              meetAgenda,
                              date,
                              time
                            );
                          }
                        }
                      );
                    }
                  }
                );
              }
            }
          );
        }
      }
    }
  );
});
// update Trainer Meeting
app.put("/update/trainer/meet", (req, res) => {
  try {
    const { batch_id, end_date, end_time, meet_id, data } = req.body;

    const { start_date, start_time } = data;

    const calculateTimeDifference = () => {
      const [startHour, startMinute, startPeriod] = start_time.split(/:| /);
      const [endHour, endMinute, endPeriod] = end_time.split(/:| /);

      const [startYear, startMonth, startDay] = start_date
        .split("-")
        .map(Number);
      const [endYear, endMonth, endDay] = end_date.split("-").map(Number);

      let startTotalMinutes =
        (parseInt(startHour, 10) % 12) * 60 + parseInt(startMinute, 10);
      let endTotalMinutes =
        (parseInt(endHour, 10) % 12) * 60 + parseInt(endMinute, 10);

      if (startPeriod === "pm" && startHour !== "12") {
        startTotalMinutes += 12 * 60;
      }

      if (endPeriod === "pm" && endHour !== "12") {
        endTotalMinutes += 12 * 60;
      }

      if (startPeriod === "am" && startHour === "12") {
        startTotalMinutes = parseInt(startMinute, 10);
      }

      if (endPeriod === "am" && endHour === "12") {
        endTotalMinutes = parseInt(endMinute, 10);
      }

      const startDateObj = new Date(
        startYear,
        startMonth - 1,
        startDay,
        (startHour % 12) + (startPeriod === "PM" ? 12 : 0),
        startMinute
      );
      const endDateObj = new Date(
        endYear,
        endMonth - 1,
        endDay,
        (endHour % 12) + (endPeriod === "PM" ? 12 : 0),
        endMinute
      );

      const differenceInMs = endDateObj - startDateObj;
      const differenceInMinutes = Math.floor(differenceInMs / (1000 * 60));

      return differenceInMinutes;
    };

    const min_data = calculateTimeDifference();

    db.query(
      "update `myveda-db`.sat_batch_status_la set end_date = ?,end_time = ?,status = ?  where batch_id = ? and id_sat_batch = ?",
      [
        end_date,
        end_time,
        1,
        min_data,
        meet_duration_min,
        batch_id,
        data.id_sat_batch,
      ],
      (err, result) => {
        if (err) console.log(err);
        else {
          res.send(result);
        }
      }
    );
  } catch (error) {}
});
// update Learner Meeting
app.put("/update/learner/meet", (req, res) => {
  try {
    const { batch_id, end_date, end_time, meet_id, data } = req.body;

    const { start_date, start_time } = data;

    db.query(
      "update `myveda-db`.learner_req_meet_la set end_date = ?,end_time = ?,status = ?  where batch_id = ? and id_req = ?",
      [end_date, end_time, 1, batch_id, data.id_req],
      (err, result) => {
        if (err) console.log(err);
        else {
          res.send(result);
        }
      }
    );
  } catch (error) {
    console.log(error);
  }
});
//learner create meet

app.post("/accept/create/learner/meet", (req, res) => {
  const { batch_id, date, time, link, uid } = req.body;
  db.query(
    "update `myveda-db`.learner_req_meet_la set req_schedule = ?,meet_link = ?,accept_reject = ? where id_req = ? and uid = ? and batch_id = ?",
    [
      date + "/" + time,
      link,
      "Accepted",
      req.body.meet_id,
      req.body.uid,
      batch_id,
    ],
    (err, result) => {
      if (err) console.log(err);
      else {
        db.query(
          "SELECT * FROM `myveda-db`.customer_reg where businessMail = ?",
          [req.body.uid],
          (err11, result11) => {
            if (err11) console.log(err11);
            else {
              db.query(
                "SELECT * FROM `myveda-db`.email_temp_meeting",
                (errBatch, resultBatch) => {
                  if (errBatch) console.log(errBatch);
                  else {
                    const output = `
          <h3>Dear ${result11[0]?.firstName + " " + result11[0]?.lastName}</h3>
          <p>Your meeting requerst has accepted by trainer, please login to your portal for joining, details as per below :</p>
          <br />

          <p><b>Batch-ID </b>: ${batch_id}</p>

          <p><b>Scheduled Date </b>: ${date}</p>

          <p><b>Scheduled Time </b>: ${time}</p>

          <p><b>Meeting Link : </b> <a href='${link}'>${link}</a></p>

          <p><b>${resultBatch[0].caution}.</b></p>
          <br />

          <p>Thanks & Regards</p>
          <p>${resultBatch[0].signature}</p>
        `;

                    db.query(
                      "SELECT * FROM `myveda-db`.email_srv",
                      (err, result) => {
                        if (err) {
                          console.log(err);
                        } else {
                          res.send(result);
                          let host1 = result[0]?.host;
                          let port1 = result[0]?.port;
                          let user1 = result[0]?.auth_uid;
                          let pass1 = result[0]?.auth_pass;
                          let fromEmail = result[0]?.from_email;
                          let bccEmail = result[0]?.bcc_email;
                          let transporter = nodemailer.createTransport({
                            host: host1,
                            port: port1,
                            secure: true, // true for 465, false for other p orts
                            auth: {
                              user: user1, // generated ethereal user
                              pass: pass1, // generated ethereal password
                            },
                          });

                          // send mail with defined transport object
                          let info = transporter.sendMail({
                            from: `"" ${fromEmail}`, // sender address
                            to: req.body.uid,
                            subject: req.body.uid + " Meeting Requrest", // Subject line
                            bcc: bccEmail,
                            html: output, // html body
                          });

                          console.log("Message sent: %s", info.messageId);
                          console.log(
                            "Preview URL: %s",
                            nodemailer.getTestMessageUrl(info)
                          );
                        }
                      }
                    );
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});
//reject learner request
app.put("/reject/learner/req/meet", (req, res) => {
  db.query(
    "update `myveda-db`.learner_req_meet_la set accept_reject = ? where id_req = ? and uid = ?",
    ["rejected", req.body.id, req.body.uid],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//for feedback data showing in feedback window
app.get("/feedbackdata", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.snd_feedbck_db",

    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});

//send feedback data in admin db
app.post("/api/sendfeedback", (req, res) => {
  const uid = req.body.getUid;
  const custID = req.body.CustId;
  const q1 = req.body.q1;
  const q2 = req.body.q2;
  const q3 = req.body.q3;
  const rv1 = req.body.rv1;
  const rv2 = req.body.rv2;
  const rv3 = req.body.rv3;
  const { course_id } = req.body;
  const textBox = req.body.textBox;
  const textBox2 = req.body.textBox2;
  const textBox3 = req.body.textBox3;

  db.query(
    "INSERT INTO `myveda-db`.usr_feedbck(uid,cust_id,q1,q1_ans,q2,q2_ans,q3,q3_ans,remrk1,remrk2,remrk3,course_id) values(?,?,?,?,?,?,?,?,?,?,?,?)",
    [
      uid,
      custID,
      q1,
      rv1,
      q2,
      rv2,
      q3,
      rv3,
      textBox,
      textBox2,
      textBox3,
      course_id,
    ],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
//get feedback of user
// app.get("/api/get/feedback/:uid", (req, res) => {
//   const uid = req.params.uid;
//   db.query(
//     "SELECT * FROM `myveda-db`.usr_feedbck WHERE uid = ?",
//     [uid],
//     (err, result) => {
//       if (err) console.log(err);
//       else res.send(result);
//     }
//   );
// });

//send helpdesk data from user image is undefined
app.post("/ftdata", (req, res) => {
  //for thisy

  const ft = req.body.taken;

  const fileName = req.body.ftName;
  const date = req.body.date;
  const time = req.body.time;
  const status = "In-Progress";
  const uid = req.body.uid;
  const cust_id = req.body.getCustId;
  const firstName = req.body.firstName;
  const lastName = req.body.lastName;
  console.log(firstName);
  console.log(lastName);
  console.log(fileName);

  console.log(ft);
  var autoNumer = generator.generate({
    length: 3,
    numbers: true,
    lowercase: false,
    uppercase: false,
  });
  const ftId = "MYVEDAIT" + "FT" + autoNumer;
  const CustomerID = req.body.getCustId;
  db.query(
    "INSERT INTO `myveda-db`.usr_hlpdsk(ft_id,date,time,prblm,status,cust_id,rca_rm,ac_rm,ac_date,ac_time,uid,img) values(?,?,?,?,?,?,?,?,?,?,?,?)",
    [ftId, date, time, fileName, status, CustomerID, "", "", "", "", uid, ft],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );

  // email body

  const output = `

       <h3>Dear ${firstName} ${lastName} </h3>
       <p>Our customer Support Team received your Fault Ticket and will begin to work as soon as possible .
       </p>
       <p>FT details are as Follows:</p>
       <p>  <b>Customer ID </b> : ${cust_id}</p>
       <p>  <b>UID</b> : ${uid}</p>
       <p>  <b>Fault Ticket-ID</b> : ${ftId}</p>
       <p>  <b>Problem Description</b>: ${fileName}</p>

       <p>!!! This is an automatically system generated email ? please do not reply to it.</p>

       <p>All the best !</p>

       <p>Thanks & Regards</p>
       <p>MYVEDAIT TEAM</p>

       `;

  db.query("SELECT * FROM `myveda-db`.email_srv", (err, result) => {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
      let host1 = result[0]?.host;
      let port1 = result[0]?.port;
      let user1 = result[0]?.auth_uid;
      let pass1 = result[0]?.auth_pass;
      let fromEmail = result[0]?.from_email;
      let bccEmail = result[0]?.bcc_email;
      let transporter = nodemailer.createTransport({
        host: host1,
        port: port1,
        secure: true, // true for 465, false for other p orts
        auth: {
          user: user1, // generated ethereal user
          pass: pass1, // generated ethereal password
        },
      });

      // send mail with defined transport object
      let info = transporter.sendMail({
        from: `"" ${fromEmail}`, // sender address
        // list of receivers
        to: uid,
        subject: "Fault Ticket", // Subject line
        bcc: bccEmail,
        html: output, // html body
      });
    }
  });
});

//get data for user
app.get("/getftdata/:uid", (req, res) => {
  const uid = req.params.uid;
  db.query(
    "SELECT * FROM `myveda-db`.usr_hlpdsk WHERE uid = ?",
    [uid],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
//get data for scqs
app.get("/scqsdata", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.add_scqs", (err, result) => {
    if (err) {
      console.log(err);
    } else {
      res.send(result);
    }
  });
});
//check data
app.get("/scqsdataattempt1/:courseid", (req, res) => {
  const courseid = req.params.courseid;

  const courId = courseid + "-QB";

  db.query(
    "SELECT scqs FROM `myveda-db`.dfn_ques_per_section",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        db.query(
          "SELECT * from `myveda-db`.add_courses WHERE course_id = ?",
          [courseid],
          (err5, result5) => {
            if (err5) {
              console.log(err5);
            } else {
              let qbId = result5[0].qb_id;
              let num = result[0].scqs;
              db.query(
                "SELECT * FROM `myveda-db`.add_scqs where qb_id = ?  ORDER BY RAND() LIMIT " +
                  num,
                [qbId],
                (err, result) => {
                  if (err) {
                    console.log(err);
                  } else {
                    res.send(result);
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});
//scqs course id 2 and attempt 1
app.get("/scqsdataattempt1c2/:courseid2/:attempt", (req, res) => {
  const courseid2 = req.params.courseid2;

  const courId = courseid2 + "-QB";

  db.query(
    "SELECT scqs FROM `myveda-db`.dfn_ques_per_section",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        let num = result[0].scqs;
        db.query(
          "SELECT * FROM `myveda-db`.add_scqs where qb_id = ?  ORDER BY RAND() LIMIT " +
            num,
          [courId],
          (err, result) => {
            if (err) {
              console.log(err);
            } else {
              res.send(result);
            }
          }
        );
      }
    }
  );
});
//scqs course id 2 and attempt 2
app.get("/scqsdataattempt1c22/:courseid2", (req, res) => {
  const courseid2 = req.params.courseid2;
  const attempt = "attempt2";
  const courId = courseid2 + "-QB";

  db.query(
    "SELECT scqs FROM `myveda-db`.dfn_ques_per_section",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        let num = result[0].scqs;
        db.query(
          "SELECT * FROM `myveda-db`.add_scqs where attempt = ? and qb_id = ?  ORDER BY RAND() LIMIT " +
            num,
          [attempt, courId],
          (err, result) => {
            if (err) {
              console.log(err);
            } else {
              res.send(result);
            }
          }
        );
      }
    }
  );
});
//get course id 2 attempt 3
app.get("/scqsdataattempt1c222/:courseid2", (req, res) => {
  const courseid2 = req.params.courseid2;
  const attempt = "attempt3";
  const courId = courseid2 + "-QB";

  db.query(
    "SELECT scqs FROM `myveda-db`.dfn_ques_per_section",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        let num = result[0].scqs;
        db.query(
          "SELECT * FROM `myveda-db`.add_scqs where attempt = ? and qb_id = ?  ORDER BY RAND() LIMIT " +
            num,
          [attempt, courId],
          (err, result) => {
            if (err) {
              console.log(err);
            } else {
              res.send(result);
            }
          }
        );
      }
    }
  );
});
//get scqs question course id 2 and attempt 2
//get scq data for attempt 2
app.get("/scqsdataattempt2/:courseid", (req, res) => {
  const courseid = req.params.courseid;
  const attempt = "attempt2";
  const courId = courseid + "-QB";

  db.query(
    "SELECT scqs FROM `myveda-db`.dfn_ques_per_section",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        let num = result[0].scqs;
        db.query(
          "SELECT * FROM `myveda-db`.add_scqs where attempt = ? and qb_id = ?  ORDER BY RAND() LIMIT " +
            num,
          [attempt, courId],
          (err, result) => {
            if (err) {
              console.log(err);
            } else {
              res.send(result);
            }
          }
        );
      }
    }
  );
});
//get scq data for attempt 3
app.get("/scqsdataattempt3/:courseid", (req, res) => {
  const courseid = req.params.courseid;
  const attempt = "attempt3";
  const courId = courseid + "-QB";

  db.query(
    "SELECT scqs FROM `myveda-db`.dfn_ques_per_section",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        let num = result[0].scqs;
        db.query(
          "SELECT * FROM `myveda-db`.add_scqs where attempt = ? and qb_id = ?  ORDER BY RAND() LIMIT " +
            num,
          [attempt, courId],
          (err, result) => {
            if (err) {
              console.log(err);
            } else {
              res.send(result);
            }
          }
        );
      }
    }
  );
});

//get data for tfqs
app.get("/tfqsdata/:courseid", (req, res) => {
  const courseid = req.params.courseid;
  const courId = courseid + "-QB";
  const attempt = req.params.attempt;
  console.log(courId);

  db.query(
    "SELECT tfqs FROM `myveda-db`.dfn_ques_per_section",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        db.query(
          "SELECT * from `myveda-db`.add_courses WHERE course_id = ?",
          [courseid],
          (err5, result5) => {
            if (err) {
              console.log(err);
            } else {
              let qbId = result5[0].qb_id;
              let num = result[0].tfqs;
              db.query(
                "SELECT * FROM `myveda-db`.add_tfqs where qb_id = ?  ORDER BY RAND() LIMIT " +
                  num,
                [qbId],
                (err, result) => {
                  if (err) {
                    console.log(err);
                  } else {
                    res.send(result);
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});
//get tfqs data for attempt 2
app.get("/tfqsdata2/:courseid", (req, res) => {
  const courseid = req.params.courseid;
  const attempt = "attempt2";
  const courId = courseid + "-QB";
  db.query(
    "SELECT tfqs FROM `myveda-db`.dfn_ques_per_section",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        let num = result[0].tfqs;
        db.query(
          "SELECT * FROM `myveda-db`.add_tfqs where attempt = ? and qb_id = ?  ORDER BY RAND() LIMIT " +
            num,
          [attempt, courId],
          (err, result) => {
            if (err) {
              console.log(err);
            } else {
              res.send(result);
            }
          }
        );
      }
    }
  );
});
//get tfqs data for attempt 3
app.get("/tfqsdata3/:courseid", (req, res) => {
  const courseid = req.params.courseid;
  const attempt = "attempt3";
  const courId = courseid + "-QB";
  db.query(
    "SELECT tfqs FROM `myveda-db`.dfn_ques_per_section",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        let num = result[0].tfqs;
        db.query(
          "SELECT * FROM `myveda-db`.add_tfqs where attempt = ? and qb_id = ?  ORDER BY RAND() LIMIT " +
            num,
          [attempt, courId],
          (err, result) => {
            if (err) {
              console.log(err);
            } else {
              res.send(result);
            }
          }
        );
      }
    }
  );
});
//get tfqs data for course id 2 attempt 1
app.get("/tfqsdatac2/:courseid2/:attempt", (req, res) => {
  const courseid2 = req.params.courseid2;
  const courId = courseid2 + "-QB";
  const attempt = req.params.attempt;
  db.query(
    "SELECT tfqs FROM `myveda-db`.dfn_ques_per_section",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        let num = result[0].tfqs;
        db.query(
          "SELECT * FROM `myveda-db`.add_tfqs where attempt = ? and qb_id = ?  ORDER BY RAND() LIMIT " +
            num,
          [attempt, courId],
          (err, result) => {
            if (err) {
              console.log(err);
            } else {
              res.send(result);
            }
          }
        );
      }
    }
  );
});
//get tfqs data for course id 2 attempt 2
app.get("/tfqsdatac22/:courseid2", (req, res) => {
  const courseid2 = req.params.courseid2;
  const attempt = "attempt2";
  const courId = courseid2 + "-QB";
  db.query(
    "SELECT tfqs FROM `myveda-db`.dfn_ques_per_section",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        let num = result[0].tfqs;
        db.query(
          "SELECT * FROM `myveda-db`.add_tfqs where attempt = ? and qb_id = ?  ORDER BY RAND() LIMIT " +
            num,
          [attempt, courId],
          (err, result) => {
            if (err) {
              console.log(err);
            } else {
              res.send(result);
            }
          }
        );
      }
    }
  );
});
//get tfqs data for course id 2 attempt 3
app.get("/tfqsdatac222/:courseid2", (req, res) => {
  const courseid2 = req.params.courseid2;
  const attempt = "attempt3";
  const courId = courseid2 + "-QB";
  db.query(
    "SELECT tfqs FROM `myveda-db`.dfn_ques_per_section",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        let num = result[0].tfqs;
        db.query(
          "SELECT * FROM `myveda-db`.add_tfqs where attempt = ? and qb_id = ?  ORDER BY RAND() LIMIT " +
            num,
          [attempt, courId],
          (err, result) => {
            if (err) {
              console.log(err);
            } else {
              res.send(result);
            }
          }
        );
      }
    }
  );
});
//get orqs question
app.get("/getorqsquesdata/:courseid", (req, res) => {
  const courseid = req.params.courseid;
  const courId = courseid + "-QB";

  db.query(
    "SELECT orqs FROM `myveda-db`.dfn_ques_per_section",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        db.query(
          "SELECT * from `myveda-db`.add_courses WHERE course_id = ?",
          [courseid],
          (err5, result5) => {
            if (err) {
              console.log(err);
            } else {
              let qbId = result5[0].qb_id;
              let num = result[0].orqs;
              console.log(num);
              db.query(
                "SELECT * FROM `myveda-db`.add_orqs where qb_id = ?  ORDER BY RAND() LIMIT " +
                  num,
                [qbId],
                (err, result) => {
                  if (err) {
                    console.log(err);
                  } else {
                    res.send(result);
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});
//get orqs data for attempt 2
app.get("/getorqsquesdata2/:courseid", (req, res) => {
  const courseid = req.params.courseid;
  const attempt1 = "attempt2";
  const courId = courseid + "-QB";
  db.query(
    "SELECT orqs FROM `myveda-db`.dfn_ques_per_section",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        let num = result[0].orqs;
        db.query(
          "SELECT * FROM `myveda-db`.add_orqs where attempt = ? and qb_id = ?  ORDER BY RAND() LIMIT " +
            num,
          [attempt1, courId],
          (err, result) => {
            if (err) {
              console.log(err);
            } else {
              res.send(result);
            }
          }
        );
      }
    }
  );
});
//get orqs data for attempt 3
app.get("/getorqsquesdata3/:courseid", (req, res) => {
  const courseid = req.params.courseid;
  const attempt1 = "attempt3";
  const courId = courseid + "-QB";
  db.query(
    "SELECT orqs FROM `myveda-db`.dfn_ques_per_section",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        let num = result[0].orqs;
        db.query(
          "SELECT * FROM `myveda-db`.add_orqs where attempt = ? and qb_id = ?  ORDER BY RAND() LIMIT " +
            num,
          [attempt1, courId],
          (err, result) => {
            if (err) {
              console.log(err);
            } else {
              res.send(result);
            }
          }
        );
      }
    }
  );
});
//get orqs data for Course id 2 and attempt 1
app.get("/getorqsquesdatac2/:courseid2/:attempt", (req, res) => {
  const courseid2 = req.params.courseid2;
  const courId = courseid2 + "-QB";
  const attempt = req.params.attempt;
  console.log(attempt);
  console.log(courId);

  db.query(
    "SELECT orqs FROM `myveda-db`.dfn_ques_per_section",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        let num = result[0].orqs;
        console.log(num);
        db.query(
          "SELECT * FROM `myveda-db`.add_orqs where attempt = ? and qb_id = ?  ORDER BY RAND() LIMIT " +
            num,
          [attempt, courId],
          (err, result) => {
            if (err) {
              console.log(err);
            } else {
              res.send(result);
            }
          }
        );
      }
    }
  );
});
//get orqs data for course id 2 and attempt 2
app.get("/getorqsquesdatac22/:courseid2", (req, res) => {
  const courseid2 = req.params.courseid2;
  const attempt1 = "attempt2";
  const courid = courseid2 + "-QB";
  db.query(
    "SELECT orqs FROM `myveda-db`.dfn_ques_per_section",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        let num = result[0].orqs;
        db.query(
          "SELECT * FROM `myveda-db`.add_orqs where attempt = ? and qb_id = ?  ORDER BY RAND() LIMIT " +
            num,
          [attempt1, courid],
          (err, result) => {
            if (err) {
              console.log(err);
            } else {
              res.send(result);
            }
          }
        );
      }
    }
  );
});
//get orqs data for course id 2 and attempt 3
app.get("/getorqsquesdatac222/:courseid2", (req, res) => {
  const courseid2 = req.params.courseid2;
  const attempt1 = "attempt3";
  const courid = courseid2 + "-QB";

  db.query(
    "SELECT orqs FROM `myveda-db`.dfn_ques_per_section",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        let num = result[0].orqs;
        db.query(
          "SELECT * FROM `myveda-db`.add_orqs where attempt = ? and qb_id = ?  ORDER BY RAND() LIMIT " +
            num,
          [attempt1, courid],
          (err, result) => {
            if (err) {
              console.log(err);
            } else {
              res.send(result);
            }
          }
        );
      }
    }
  );
});
// app.get('*', function (req, res) {
//     res.sendFile(__dirname+'index.html');});

// app.get('/random',(req,res)=>{
//     const custID = "ACERGRN9PE"
//     db.query("SELECT COUNT(cust_id) AS result FROM `myveda-db`.comp_cust_req_db WHERE cust_id = ?",[custID],(err,result)=>{
//         if(err){
//             console.log(err);
//         }else{
//             console.log(result[0].result);

//         }})
// })
//send scqs scored by user in result db
app.put("/sendscqsdatausr", (req, res) => {
  const scqsScore = req.body.score;
  const UID = req.body.getUid;
  const cust_id = req.body.CustId;
  const course_id = req.body.course_id;
  const attempt = req.body.attempt;
  const lowerCourseID = course_id.toLowerCase().replace("-", "_");

  const date = new Date();
  const today =
    (date.getDate() < 10 ? "0" + date.getDate() : date.getDate()) +
    "-" +
    (date.getMonth() + 1 < 10
      ? "0" + (date.getMonth() + 1)
      : date.getMonth() + 1) +
    "-" +
    date.getFullYear();

  if (attempt === "attempt1") {
    db.query(
      "UPDATE `myveda-db`.?? SET cust_id = ?, scq_sc_apt1 = ?, exam_date_scq_apt1 = ? where uid=?",
      [lowerCourseID, cust_id, scqsScore, today, UID],
      (err, result) => {
        if (err) {
          console.log(err);
        } else {
          res.send(result);
        }
      }
    );
  } else if (attempt === "attempt2") {
    db.query(
      "UPDATE `myveda-db`.?? SET cust_id = ?, scq_sc_apt2 = ?,exam_date_scq_apt2 = ? where uid=?",
      [lowerCourseID, cust_id, scqsScore, today, UID],
      (err, result) => {
        if (err) {
          console.log(err);
        } else {
          res.send(result);
        }
      }
    );
  } else if (attempt === "attempt3") {
    db.query(
      "UPDATE `myveda-db`.?? SET cust_id = ?, scq_sc_apt3 = ?,exam_date_scq_apt3 = ? where uid=?",
      [lowerCourseID, cust_id, scqsScore, today, UID],
      (err, result) => {
        if (err) {
          console.log(err);
        } else {
          res.send(result);
        }
      }
    );
  }
});

//send tfqs scored by user in db
app.put("/sendtfqsdatausr", (req, res) => {
  const tfqsScore = req.body.tfqsScore;
  const UID = req.body.getUid;
  const courseID = req.body.course_id;
  const attempt = req.body.attempt;
  const lowerCourseID = req.body.course_id.toLowerCase().replace("-", "_");
  console.log(UID);
  console.log(lowerCourseID);
  console.log(attempt);
  const date = new Date();
  const today =
    (date.getDate() < 10 ? "0" + date.getDate() : date.getDate()) +
    "-" +
    (date.getMonth() + 1 < 10
      ? "0" + (date.getMonth() + 1)
      : date.getMonth() + 1) +
    "-" +
    date.getFullYear();

  if (attempt === "attempt1") {
    db.query(
      "UPDATE `myveda-db`.?? SET  tfq_sc_apt1 = ?,course_id=?,exam_date_tfq_apt1 = ? where uid = ?",
      [lowerCourseID, tfqsScore, courseID, today, UID],
      (err, result) => {
        if (err) {
          console.log(err);
        } else {
          console.log(result);
        }
      }
    );
  } else if (attempt === "attempt2") {
    db.query(
      "UPDATE `myveda-db`.?? SET  tfq_sc_apt2 = ?,course_id=?,exam_date_tfq_apt2 = ? where uid=?",
      [lowerCourseID, tfqsScore, courseID, today, UID],
      (err, result) => {
        if (err) {
          console.log(err);
        } else {
          console.log(result);
        }
      }
    );
  } else if (attempt === "attempt3") {
    db.query(
      "UPDATE `myveda-db`.?? SET  tfq_sc_apt3 = ?,course_id=?,exam_date_tfq_apt3 = ? where uid=?",
      [lowerCourseID, tfqsScore, courseID, today, UID],
      (err, result) => {
        if (err) {
          console.log(err);
        } else {
          console.log(result);
        }
      }
    );
  }
});

//send orqs question and answer in evaluator db for marking
app.put("/sendusrorqsdata", (req, res) => {
  const cust_id = req.body.custID;
  const course_id = req.body.courseID;
  const UID = req.body.uid;
  const q1 = req.body.q1;
  const ans1 = req.body.ans1;
  const q2 = req.body.q2;
  const ans2 = req.body.ans2;
  const q3 = req.body.q3;
  const ans3 = req.body.ans3;
  const q4 = req.body.q4;
  const ans4 = req.body.ans4;
  const q5 = req.body.q5;
  const ans5 = req.body.ans5;
  const attempt = req.body.attempt;
  const Evalans1 = req.body.Evalans1;
  const Evalans2 = req.body.Evalans2;
  const Evalans3 = req.body.Evalans3;
  const Evalans4 = req.body.Evalans4;
  const Evalans5 = req.body.Evalans5;
  const lowerCourseID = course_id.toLowerCase().replace("-", "_");
  const date = new Date();
  const today =
    (date.getDate() < 10 ? "0" + date.getDate() : date.getDate()) +
    "-" +
    (date.getMonth() + 1 < 10
      ? "0" + (date.getMonth() + 1)
      : date.getMonth() + 1) +
    "-" +
    date.getFullYear();

  if (attempt === "attempt1") {
    db.query(
      "UPDATE `myveda-db`.?? SET exam_date_orq_apt1 = ?,ques_1_apt1 = ?, ans_1_apt1 = ?, ques_2_apt1 = ?, ans_2_apt1 = ?,ques_3_apt1 = ?, ans_3_apt1 = ?,ques_4_apt1 = ?,ans_4_apt1=?,ques_5_apt1 = ?,ans_5_apt1 = ?,correct_ans1_apt1 = ?,correct_ans2_apt1 = ?,correct_ans3_apt1 = ?,correct_ans4_apt1 = ?,correct_ans5_apt1 = ? where uid = ?;",
      [
        lowerCourseID,
        today,
        q1,
        ans1,
        q2,
        ans2,
        q3,
        ans3,
        q4,
        ans4,
        q5,
        ans5,
        Evalans1,
        Evalans2,
        Evalans3,
        Evalans4,
        Evalans5,
        UID,
      ],
      (err, result) => {
        if (err) {
          console.log(err);
        } else {
          res.send(result);
        }
      }
    );

    // console.log(cust_id);
  } else if (attempt === "attempt2") {
    db.query(
      "UPDATE `myveda-db`.?? SET exam_date_orq_apt2 = ?,ques_1_apt2 = ?, ans_1_apt2 = ?, ques_2_apt2 = ?, ans_2_apt2 = ?,ques_3_apt2 = ?, ans_3_apt2 = ?,ques_4_apt2 = ?,ans_4_apt2=?,ques_5_apt2 = ?,ans_5_apt2 = ?,correct_ans1_apt2 = ?,correct_ans2_apt2 = ?,correct_ans3_apt2 = ?,correct_ans4_apt2 = ?,correct_ans5_apt2 = ? where uid = ?",
      [
        lowerCourseID,
        today,
        q1,
        ans1,
        q2,
        ans2,
        q3,
        ans3,
        q4,
        ans4,
        q5,
        ans5,
        Evalans1,
        Evalans2,
        Evalans3,
        Evalans4,
        Evalans5,
        UID,
      ],
      (err, result) => {
        if (err) {
          console.log(err);
        } else {
          res.send(result);
        }
      }
    );
  } else if (attempt === "attempt3") {
    db.query(
      "UPDATE `myveda-db`.?? SET exam_date_orq_apt3 = ?,ques_1_apt3 = ?, ans_1_apt3 = ?, ques_2_apt3 = ?, ans_2_apt3 = ?,ques_3_apt3 = ?, ans_3_apt3 = ?,ques_4_apt3 = ?,ans_4_apt3=?,ques_5_apt3 = ?,ans_5_apt3 = ?,correct_ans1_apt3 = ?,correct_ans2_apt3 = ?,correct_ans3_apt3 = ?,correct_ans4_apt3 = ?,correct_ans5_apt3 = ? where uid = ?",
      [
        lowerCourseID,
        today,
        q1,
        ans1,
        q2,
        ans2,
        q3,
        ans3,
        q4,
        ans4,
        q5,
        ans5,
        Evalans1,
        Evalans2,
        Evalans3,
        Evalans4,
        Evalans5,
        UID,
      ],
      (err, result) => {
        if (err) {
          console.log(err);
        } else {
          res.send(result);
        }
      }
    );
  }
});

//get scqs score
app.get("/getscqsperquesdata", (req, res) => {
  db.query(
    "SELECT scqs_per_ques_marks FROM `myveda-db`.dfn_per_ques_mrks where id = 1",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
//get tfqs score
app.get("/gettfqsperquesdata", (req, res) => {
  db.query(
    "SELECT tfqs_per_ques_marks FROM `myveda-db`.dfn_per_ques_mrks where id = 1",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});

//get scqs score
app.get("/getscqsperquesdata/one", (req, res) => {
  db.query(
    "SELECT scqs_per_ques_marks FROM `myveda-db`.dfn_per_ques_mrks where id = 2",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
//get tfqs score
app.get("/gettfqsperquesdata/one", (req, res) => {
  db.query(
    "SELECT tfqs_per_ques_marks FROM `myveda-db`.dfn_per_ques_mrks where id = 2",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});

//take result fridging values
app.get("/takeresult/:takeuser/:courseid", (req, res) => {
  const takeuser = req.params.takeuser;
  const courseid = req.params.courseid;
  const lowerCourseID = courseid.toLowerCase().replace("-", "_");

  db.query(
    "SELECT * FROM `myveda-db`.?? where uid = ?",
    [lowerCourseID, takeuser],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});

//examlist usr result
app.get("/getresultdatausr/:idValue/:getUid", (req, res) => {
  const idValue = req.params.idValue;
  const getUid = req.params.getUid;

  const lowerCourseID = idValue.toLowerCase().replace("-", "_");
  db.query(
    "SELECT * FROM `myveda-db`.?? where course_id=? and uid=?",
    [lowerCourseID, idValue, getUid],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});

//block button of all in course id 1 all attempts
app.get("/attempt1tfqblock/:getUid/:courseid", (req, res) => {
  const getUid = req.params.getUid;
  const courseid = req.params.courseid;
  const lowerCourseID = courseid.toLowerCase().replace("-", "_");
  db.query(
    "SELECT * FROM `myveda-db`.?? where uid = ?",
    [lowerCourseID, getUid],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});

//for company
app.get("/checkactive/:custId", (req, res) => {
  const custId = req.params.custId;

  db.query(
    "SELECT * FROM `myveda-db`.comp_cust_req_db where cust_id = ?",
    [custId],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});
//for individual

app.get("/checkactive/individual/:custId/:uid", (req, res) => {
  const { custId, uid } = req.params;

  db.query(
    "SELECT * FROM `myveda-db`.user_course_map_table_la where cust_id = ? and uid = ?",
    [custId, uid],
    async (err, result) => {
      if (err) {
        console.log(err);
      } else {
        const myData = [];

        const promises = result.map((item) => {
          const cr_id = item.course_id.replace("-", "_")?.toLowerCase();

          return new Promise((resolve, reject) => {
            db.query(
              `SELECT *, t1.course_ttl as course,t2.end_date as exp_date FROM \`myveda-db\`.add_courses AS t1 
              LEFT JOIN \`myveda-db\`.indi_cust_course_ids AS t2 ON t1.course_id = t2.course_id 
               where t2.cust_id = ?`,
              [custId],
              (err1, result1) => {
                if (err1) {
                  reject(err1);
                } else {
                  console.log(result);
                  myData.push(...result1);
                  resolve();
                }
              }
            );
          });
        });

        try {
          await Promise.all(promises);
          res.json(myData);
        } catch (error) {
          console.log(error);
          res.status(500).json({ message: "An error occurred" });
        }
        // res.send(result);
      }
    }
  );
});

//change all logos
app.get("/getcomplogousr", (req, res) => {
  db.query("SELECT * from `myveda-db`.upld_logo", (err, result) => {
    if (err) {
      console.log(err);
    } else {
      res.send(result);
    }
  });
});

//  get standard of ISO for Lead Auditor Exercises
app.get("/get/standard/iso/ex/:course_id", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.add_courses where course_id = ?",
    [req.params.course_id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//manage session user
app.post("/sessionout", (req, res) => {
  const uid = req.body.uid;
  const loginDate = req.body.loginDate;
  const loginTime = req.body.loginTime;
  const logoutDate = req.body.logoutDate;
  const logoutTime = req.body.logoutTime;
  const total_time = req.body.totalTime;

  db.query(
    "INSERT INTO `myveda-db`.learning_progress_tbl(uid,login_date,login_time,logout_date,logout_time,total_sec) VALUES(?,?,?,?,?,?)",
    [uid, loginDate, loginTime, logoutDate, logoutTime, total_time],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//course session time log
app.post("/my/course/session", (req, res) => {
  const uid = req.body.uid;
  const loginDate = req.body.loginDate;
  const loginTime = req.body.loginTime;
  const logoutDate = req.body.logoutDate;
  const logoutTime = req.body.logoutTime;
  const total_time = req.body.totalTime;

  db.query(
    "INSERT INTO `myveda-db`.learner_course_log_data(uid,login_date,login_time,logout_date,logout_time,time_sec,course_id) VALUES(?,?,?,?,?,?,?)",
    [
      uid,
      loginDate,
      loginTime,
      logoutDate,
      logoutTime,
      total_time,
      req.body.course_id,
    ],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//take all data related learning progress time
app.get("/learningprogresstime/:uid", (req, res) => {
  const uid = req.params.uid;
  db.query(
    "SELECT total_sec FROM `myveda-db`.learning_progress_tbl where uid = ?",
    [uid],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

app.get("/remain/time/exam/:uid/:id_pass2", (req, res) => {
  const { uid, id_pass2 } = req.params;
  db.query(
    "SELECT time_sec FROM `myveda-db`.learner_course_log_data where uid = ? and course_id = ?",
    [uid, id_pass2],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//take all data related user logs
app.get("/logsuser/:uid", (req, res) => {
  const uid = req.params.uid;
  db.query(
    "SELECT login_date,login_time,logout_date,logout_time FROM `myveda-db`.learning_progress_tbl where uid = ?",
    [uid],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//take all data related user course logs
app.get("/course/log/user/:uid/:id_pass2", (req, res) => {
  const { uid, id_pass2 } = req.params;
  db.query(
    "SELECT * FROM `myveda-db`.learner_course_log_data where uid = ? and course_id = ?",
    [uid, id_pass2],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//take all data related learning progress time
app.get("/counttable/:uid", (req, res) => {
  const uid = req.params.uid;
  db.query(
    "SELECT COUNT(total_sec) AS count_rows_hour FROM `myveda-db`.learning_progress_tbl WHERE uid=  ?",
    [uid],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//

app.get("/takeimage", (req, res) => {
  db.query(
    "SELECT img FROM `myveda-db`.customer_reg WHERE businessMail =  ?",
    ["akshaydixit927@gmail.com"],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//send proctoring data in to folders and database
app.post("/sendproctoringdata", (req, res1) => {
  const imageUser = req.body.image;
  const { date, time, uid, examType, examAttempt, timeLabel, courseid } =
    req.body;
  let base64Image = imageUser.split(";base64,").pop();

  db.query(
    "SELECT * FROM `myveda-db`.customer_reg where businessMail  = ?",
    [uid],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        const takePhoto = result[0].img;

        var parameters = {
          image_base64_1: takePhoto.toString("base64"),

          image_base64_2: imageUser.toString("base64"),
        };
        facepp.post("/compare", parameters, function (err, res) {
          console.log(res.confidence);
          const matchedPer = res.confidence;
          if (matchedPer >= 60) {
            const takeValue = "Pass";

            console.log(takeValue);

            fs.writeFileSync(
              `./USER_AI_PROCTORING_IMG_DATA/${date}_${timeLabel}_${uid}_${examType}_${examAttempt}_${takeValue}_IMG.jpeg`,
              Buffer.from(base64Image, "base64")
            );

            db.query(
              "INSERT INTO `myveda-db`.user_exam_proctoring_data(uid, course_id, exam_attempt, exam_type, capture_date, capture_time, pass_or_fail, matched_percentage,img) values(?,?,?,?,?,?,?,?,?)",
              [
                uid,
                courseid,
                examAttempt,
                examType,
                date,
                time,
                takeValue,
                matchedPer,
                imageUser,
              ],
              (err, result) => {
                if (err) console.log(err);
                else res1.json(result);
              }
            );
          } else {
            const takeValue = "Fail";

            fs.writeFileSync(
              `./USER_AI_PROCTORING_IMG_DATA/${date}_${timeLabel}_${uid}_${examType}_${examAttempt}_${takeValue}_IMG.jpeg`,
              Buffer.from(base64Image, "base64")
            );
            db.query(
              "INSERT INTO `myveda-db`.user_exam_proctoring_data(uid, course_id, exam_attempt, exam_type, capture_date, capture_time, pass_or_fail,matched_percentage,img) values(?,?,?,?,?,?,?,?,?)",
              [
                uid,
                courseid,
                examAttempt,
                examType,
                date,
                time,
                takeValue,
                matchedPer,
                imageUser,
              ],
              (err, result) => {
                if (err) {
                  console.log(err);
                } else {
                  db.query(
                    "SELECT pass_or_fail FROM `myveda-db`.user_exam_proctoring_data where uid = ? and pass_or_fail = ? and course_id = ? and exam_type = ? and exam_attempt = ?",
                    [uid, takeValue, courseid, examType, examAttempt],
                    (err, result) => {
                      if (err) {
                        console.log(err);
                      } else {
                        const takeData = [
                          {
                            data: result,
                            message: "Fail",
                          },
                        ];
                        res1.json(takeData);
                      }
                    }
                  );
                }
              }
            );
          }
        });
      }
    }
  );
});
//send cursor fail event
app.post("/sendproctoringdatacursor", (req, res) => {
  const { date, time, uid, examType, examAttempt, courseid } = req.body;

  const takeValue = "Fail";

  db.query(
    "INSERT INTO `myveda-db`.exam_cursor_move_out (uid,course_id,exam_attempt,exam_type,capture_date,capture_time,cursor_move) VALUES (?,?,?,?,?,?,?)",
    [uid, courseid, examAttempt, examType, date, time, takeValue],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        db.query(
          "SELECT cursor_move FROM `myveda-db`.exam_cursor_move_out where uid = ? and cursor_move = ? and course_id = ? and exam_type = ? and exam_attempt = ?",
          [uid, takeValue, courseid, examType, examAttempt],
          (err, result1) => {
            if (err) {
              console.log(err);
            } else {
              const sendData = [
                {
                  data: result1,
                  message: takeValue,
                },
              ];

              res.send(sendData);
            }
          }
        );
      }
    }
  );
});
//take AI proctoring time from Database
app.get("/getaitimeforuser", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.proctoring_time_interval",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

// start date of course id 1
app.get("/startenddate/:courseID", (req, res) => {
  const courseID = req.params.courseID;
  db.query(
    "SELECT * FROM `myveda-db`.add_courses where course_id = ?",
    [courseID],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
app.get("/startenddate/:courseID2", (req, res) => {
  const courseID2 = req.params.courseID2;
  db.query(
    "SELECT * FROM `myveda-db`.add_courses where course_id = ?",
    [courseid2],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//get exam data of AI
app.get(
  "/getallexamdataofai/:course_id/:attempt/:user/:examType1",
  (req, res) => {
    const course_id = req.params.course_id;
    const attempt = req.params.attempt;
    const user = req.params.user;
    const examType1 = req.params.examType1;

    db.query(
      "SELECT * FROM `myveda-db`.user_exam_proctoring_data where uid = ? and exam_attempt = ? and exam_type = ? and course_id =?",
      [user, attempt, examType1, course_id],
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  }
);
//
app.get("/getresults/user/:takeValue/:uid", (req, res) => {
  const takeValue = req.params.takeValue;
  const uid = req.params.uid;

  const lowerCourseID = takeValue.toLowerCase().replace("-", "_");

  db.query(
    "SELECT * FROM `myveda-db`.?? where uid = ?",
    [lowerCourseID, uid],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

app.get("/getdataofaifail/:course_id/:attempt/:user/:examType1", (req, res) => {
  const course_id = req.params.course_id;
  const attempt = req.params.attempt;
  const user = req.params.user;
  const examType1 = req.params.examType1;

  db.query(
    "SELECT pass_or_fail FROM `myveda-db`.user_exam_proctoring_data WHERE (uid = ? AND course_id = ? AND exam_attempt = ? AND exam_type = ? AND pass_or_fail = 'Fail' )",
    [user, course_id, attempt, examType1],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//take pdf data from admin db for particular course id
app.get("/takepdfdata/:id_pass", (req, res) => {
  const id_pass = req.params.id_pass;
  db.query(
    "SELECT * FROM `myveda-db`.pdf_mat where course_id = ?",
    [id_pass],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//take video data from admin db for particular course id
app.get("/takevdodata/:id_pass", (req, res) => {
  const id_pass = req.params.id_pass;
  console.log(id_pass);
  db.query(
    "SELECT * FROM `myveda-db`.vdo_mat where course_id = ?",
    [id_pass],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//get idle time out
app.get("/getidletimeout", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.idle_time_out", (err, result) => {
    if (err) console.log(err);
    else res.send(result);
  });
});

//take ppt data from admin db for particular course id
app.get("/takepptdata/:id_pass", (req, res) => {
  const id_pass = req.params.id_pass;
  db.query(
    "SELECT * FROM `myveda-db`.ppt_mat where course_id = ?",
    [id_pass],
    (err, result) => {
      if (err) console.log(err);
      else {
        res.send(result);
      }
    }
  );
});

//check cust -id
app.get("/checkcustid/:id", (req, res) => {
  const id = req.params.id;
  db.query(
    "SELECT * FROM `myveda-db`.comp_cust_req_db as t1 join main_admin_db.myveda_indi_cust_ids as t2 on t1.spocEmail = t2.email where t1.cust_id = ?",
    [id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//get design status
app.get("/designstatus/:takeValue", (req, res) => {
  const { takeValue } = req.params;

  db.query(
    "SELECT * FROM `myveda-db`.comp_cust_req_db WHERE cust_id = ?",
    [takeValue],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//practice data
app.get("/practicedata/nc", (req, res) => {
  db.query(
    "SELECT nc_writing FROM `myveda-db`.dfn_ques_per_section where id = '1'",
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        const num = result[0].nc_writing;
        db.query(
          "SELECT * FROM `myveda-db`.nc_question ORDER BY RAND() LIMIT " + 35,
          (err, result) => {
            if (err) console.log(err);
            else res.send(result);
          }
        );
      }
    }
  );
});
//practice data get for course id
app.get("/practicedata/:courseid", (req, res) => {
  const courseid = req.params.courseid;

  db.query(
    "SELECT p_qb_id  FROM `myveda-db`.add_courses WHERE course_id = ?",
    [courseid],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        let pQbId = result[0]?.p_qb_id;
        db.query(
          "SELECT q_and_a FROM `myveda-db`.dfn_ques_per_section where id = '1'",
          (err, result) => {
            if (err) {
              console.log(err);
            } else {
              const num = result[0].q_and_a;
              db.query(
                "SELECT * FROM `myveda-db`.add_qa WHERE p_qb_id = ? ORDER BY RAND() LIMIT " +
                  num,
                [pQbId],
                (err, result) => {
                  if (err) console.log(err);
                  else res.send(result);
                }
              );
            }
          }
        );
      }
    }
  );
});
//get correct answer data

app.get("/practice/getcorrectans/:ques", (req, res) => {
  const ques = req.params.ques;

  db.query(
    "SELECT * FROM `myveda-db`.add_qa WHERE id = ?",
    [ques],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//get correct answer nc
///practice/getcorrectans/nc/
app.get("/practice/getcorrectans/nc/:ques", (req, res) => {
  const ques = req.params.ques;

  db.query(
    "SELECT * FROM `myveda-db`.nc_question WHERE nc_quesId = ?",
    [ques],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//get course id
app.get("/getcourse/type/:id_pass", (req, res) => {
  const id_pass = req.params.id_pass;
  db.query(
    "SELECT * FROM `myveda-db`.add_courses WHERE course_id = ?",
    [id_pass],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//   uid: uid,
// courseid: courseid,
// cust_id: cust_id,

//insert uid for course id
app.post("/insertdata/courseid/table", (req, res) => {
  const uid = req.body.uid;
  const courseid = req.body.courseid;
  const cust_id = req.body.cust_id;
  const status = 1;
  const lowerCourseID = courseid.toLowerCase().replace("-", "_");

  db.query(
    "SELECT * FROM `myveda-db`.customer_reg WHERE businessMail = ?",
    [uid],
    (errs, results) => {
      if (errs) {
        console.log(errs);
      } else {
        let firstName = results[0]?.firstName;
        let lastName = results[0]?.lastName;
        db.query(
          "SELECT uid_status from `myveda-db`.?? WHERE uid = ?",
          [lowerCourseID, uid],
          (err, result) => {
            if (err) {
              console.log(err);
            } else {
              let takeStatus = result[0]?.uid_status;
              if (takeStatus === 1) {
                console.log("");
              } else {
                db.query(
                  "INSERT INTO `myveda-db`.??(uid,cust_id,course_id,stats_apt1,tfq_sc_apt1,scq_sc_apt1,orq_sc_apt1,tot_sc_apt1,ques_1_apt1,ans_1_apt1,ques_2_apt1,ans_2_apt1,firstName,lastName,ques_3_apt1,ans_3_apt1,ques_4_apt1,ans_4_apt1,ques_5_apt1,ans_5_apt1,percent_apt1,tfq_sc_apt2,scq_sc_apt2,orq_sc_apt2,tot_sc_apt2,ques_1_apt2,ans_1_apt2,ques_2_apt2,ans_2_apt2,ques_3_apt2,ans_3_apt2,ques_4_apt2,ans_4_apt2,ques_5_apt2,ans_5_apt2,percent_apt2,stats_apt2,tfq_sc_apt3,scq_sc_apt3,orq_sc_apt3,tot_sc_apt3,ques_1_apt3,ans_1_apt3,ques_2_apt3,ans_2_apt3,ques_3_apt3,ans_3_apt3,ques_4_apt3,ans_4_apt3,ques_5_apt3,ans_5_apt3,percent_apt3,stats_apt3,uid_status) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                  [
                    lowerCourseID,
                    uid,
                    cust_id,
                    courseid,
                    "Pending",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    firstName,
                    lastName,

                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    status,
                  ],
                  (err, result) => {
                    console.log(err);
                  }
                );
              }
            }
          }
        );
      }
    }
  );
});

//user data for profile
app.get("/user/data/:uid", (req, res) => {
  const uid = req.params.uid;
  console.log(uid);
  db.query(
    "SELECT * FROM `myveda-db`.customer_reg WHERE businessMail = ?",
    [uid],
    (err, result) => {
      if (err) console.log(err);
      else {
        res.send(result);
      }
    }
  );
});
//trainer data for profile
app.get("/trainer/data/:uid", (req, res) => {
  const uid = req.params.uid;
  db.query(
    "SELECT * FROM `myveda-db`.trainer_reg_table_la WHERE uid = ?",
    [uid],
    (err, result) => {
      if (err) console.log(err);
      else {
        res.send(result);
      }
    }
  );
});

//get course type time
app.get("/getcoursetype/:type", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.course_type_min_time where course_type = ?",
    [req.params.type],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//workbook route check course id type
app.get("/workbook/route/courseid/:courseid", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.add_courses WHERE course_id = ?",
    [req.params.courseid],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//update acadamic certificate

app.post("/upload/certificate/my", (req, res) => {
  const file = req.files.foo;
  const { uid } = req.body;
  var folderName = trainerPath + uid;

  try {
    if (fs.existsSync(folderName)) {
      if (file) {
        fs.writeFileSync(`${folderName}/${uid + file?.name}`, file?.data);
        db.query(
          "UPDATE `myveda-db`.trainer_reg_table_la SET acadamic_cert = ? where uid = ?",
          [file?.name, uid],
          (err2, result2) => {
            if (err2) console.log(err2);
            else res.send(result2);
          }
        );
      } else {
        console.log("err");
      }
    }
  } catch (err) {
    console.error(err);
  }
});
//update acadamic certificate

app.post("/eng/first/cert", (req, res) => {
  const file = req.files.foo;
  const { uid } = req.body;

  console.log(uid);
  var folderName = EngPath + "/" + uid;
  console.log(folderName);

  try {
    if (fs.existsSync(folderName)) {
      console.log("true");
      if (file) {
        console.log("true 1");
        fs.writeFileSync(`${folderName}/${uid + file?.name}`, file?.data);
        db.query(
          "UPDATE `main_admin_db`.engineer_reg SET resume = ? where uid = ?",
          [file?.name, uid],
          (err2, result2) => {
            if (err2) console.log(err2);
            else res.send(result2);
          }
        );
      } else {
        console.log("err");
      }
    }
  } catch (err) {
    console.error(err);
  }
});
//professional certification doc upload
//professional certification doc upload
app.post("/upload/certificate/professional", (req, res) => {
  const file = req.files.foo2;
  const { uid } = req.body;

  console.log(uid);
  var folderName = trainerPath + uid;

  try {
    if (fs.existsSync(folderName)) {
      if (file) {
        fs.writeFileSync(`${folderName}/${uid + file?.name}`, file?.data);
        db.query(
          "UPDATE `myveda-db`.trainer_reg_table_la SET qualification_1_cert = ? where uid = ?",
          [file?.name, uid],
          (err2, result2) => {
            if (err2) console.log(err2);
            else res.send(result2);
          }
        );
      } else {
        console.log("err");
      }
    }
  } catch (err) {
    console.error(err);
  }
});

//engineer highest qualification
app.post("/eng/cert/second", (req, res) => {
  const file = req.files.foo2;
  const { uid } = req.body;

  console.log(uid);
  var folderName = EngPath + "/" + uid;

  try {
    if (fs.existsSync(folderName)) {
      if (file) {
        fs.writeFileSync(`${folderName}/${uid + file?.name}`, file?.data);
        db.query(
          "UPDATE `main_admin_db`.engineer_reg SET high_qualification = ? where uid = ?",
          [file?.name, uid],
          (err2, result2) => {
            if (err2) console.log(err2);
            else res.send(result2);
          }
        );
      } else {
        console.log("err");
      }
    }
  } catch (err) {
    console.error(err);
  }
});
//iso cert -1

app.post("/upload/certificate1/iso", (req, res) => {
  const file = req.files.foo5;
  const { uid } = req.body;

  console.log(uid);
  var folderName = trainerPath + uid;

  try {
    if (fs.existsSync(folderName)) {
      if (file) {
        fs.writeFileSync(`${folderName}/${uid + file?.name}`, file?.data);
        db.query(
          "UPDATE `myveda-db`.trainer_reg_table_la SET qualification_2_cert = ? where uid = ?",
          [file?.name, uid],
          (err2, result2) => {
            if (err2) console.log(err2);
            else res.send(result2);
          }
        );
      } else {
        console.log("err");
      }
    }
  } catch (err) {
    console.error(err);
  }
});

//engineer technical certificate

app.post("/eng/cert/third", (req, res) => {
  const file = req.files.foo5;
  const { uid } = req.body;
  var folderName = EngPath + "/" + uid;

  try {
    if (fs.existsSync(folderName)) {
      if (file) {
        fs.writeFileSync(`${folderName}/${uid + file?.name}`, file?.data);
        db.query(
          "UPDATE `main_admin_db`.engineer_reg SET high_tech_qualification = ? where uid = ?",
          [file?.name, uid],
          (err2, result2) => {
            if (err2) console.log(err2);
            else res.send(result2);
          }
        );
      } else {
        console.log("err");
      }
    }
  } catch (err) {
    console.error(err);
  }
});
//iso cert - 2

app.post("/upload/certificate2/iso", (req, res) => {
  const file = req.files.foo6;
  const { uid } = req.body;

  console.log(uid);
  var folderName = trainerPath + uid;

  try {
    if (fs.existsSync(folderName)) {
      if (file) {
        fs.writeFileSync(`${folderName}/${uid + file?.name}`, file?.data);
        db.query(
          "UPDATE `myveda-db`.trainer_reg_table_la SET qualification_3_cert = ? where uid = ?",
          [file?.name, uid],
          (err2, result2) => {
            if (err2) console.log(err2);
            else res.send(result2);
          }
        );
      } else {
        console.log("err");
      }
    }
  } catch (err) {
    console.error(err);
  }
});
// get product data in add services in admin
app.get("/product/data", (req, res) => {
  db.query("SELECT * FROM main_admin_db.product_cat", (err, result) => {
    if (err) console.log(err);
    else res.send(result);
  });
});
// get product data in add services in admin
app.get("/unpublish/product/data", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.product_cat where publish_status is null",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// upload product logo
app.post("/upload/product/logo/slms", (req, res) => {
  // const file = req.files.ppt; //but not with this
  // const { courseId } = req.body;

  // const fileName = (file?.name).replace(".zip", "");
  // db.query("")

  if (!req.files || Object.keys(req.files).length === 0) {
    console.log("no image");
  }
  const image = req.files.image;
  // Do something with the uploaded file, e.g. save it to disk or process it.

  const png = new PNG({ filterType: 4 });
  png.parse(image?.data, (error, data) => {
    if (error) {
      console.error(error);
      return;
    }
    const writeStream = fs.createWriteStream(
      `${filePath}/Logos/${image?.name}`
    );
    data.pack().pipe(writeStream);
  });

  db.query(
    "update main_admin_db.product_cat set category_img = ? where category_title = ?",
    [image?.name, req.body.data],
    (err, result) => {
      if (err) console.log(err);
      else console.log(result);
    }
  );
});

//iso cert - 3

app.post("/upload/certificate3/iso", (req, res) => {
  const file = req.files.foo7;
  const { uid } = req.body;

  console.log(uid);
  var folderName = trainerPath + uid;

  try {
    if (fs.existsSync(folderName)) {
      if (file) {
        fs.writeFileSync(`${folderName}/${uid + file?.name}`, file?.data);
        db.query(
          "UPDATE `myveda-db`.trainer_reg_table_la SET qualification_4_cert = ? where uid = ?",
          [file?.name, uid],
          (err2, result2) => {
            if (err2) console.log(err2);
            else res.send(result2);
          }
        );
      } else {
        console.log("err");
      }
    }
  } catch (err) {
    console.error(err);
  }
});

//white paper 1

app.post("/upload/white/paper/first", (req, res) => {
  const file = req.files.foo4;
  const { uid } = req.body;

  console.log(uid);
  var folderName = trainerPath + uid;

  try {
    if (fs.existsSync(folderName)) {
      if (file) {
        fs.writeFileSync(`${folderName}/${uid + file?.name}`, file?.data);
        db.query(
          "UPDATE `myveda-db`.trainer_reg_table_la SET white_paper_1_cert = ? where uid = ?",
          [file?.name, uid],
          (err2, result2) => {
            if (err2) console.log(err2);
            else res.send(result2);
          }
        );
      } else {
        console.log("err");
      }
    }
  } catch (err) {
    console.error(err);
  }
});
//white paper 2

app.post("/upload/white/paper/second", (req, res) => {
  const file = req.files.foo3;
  const { uid } = req.body;

  console.log(uid);
  var folderName = trainerPath + uid;

  try {
    if (fs.existsSync(folderName)) {
      if (file) {
        fs.writeFileSync(`${folderName}/${uid + file?.name}`, file?.data);
        db.query(
          "UPDATE `myveda-db`.trainer_reg_table_la SET white_paper_2_cert = ? where uid = ?",
          [file?.name, uid],
          (err2, result2) => {
            if (err2) console.log(err2);
            else res.send(result2);
          }
        );
      } else {
        console.log("err");
      }
    }
  } catch (err) {
    console.error(err);
  }
});

app.post("/api/update/trainer/la/doc", (req, res) => {
  const {
    acadamicInput,
    professionalInput,
    cert1Input,
    cert2Input,
    cert3Input,
    uid,
  } = req.body;

  const input1 = cert1Input ? cert1Input?.toLowerCase() : "blank_col1";
  const input2 = cert2Input ? cert2Input?.toLowerCase() : "blank_col2";
  const input3 = cert3Input ? cert3Input?.toLowerCase() : "blank_col3";
  const date = new Date();
  const today =
    (date.getDate() < 10 ? "0" + date.getDate() : date.getDate()) +
    "-" +
    (date.getMonth() + 1 < 10
      ? "0" + (date.getMonth() + 1)
      : date.getMonth() + 1) +
    "-" +
    date.getFullYear();

  db.query(
    "UPDATE `myveda-db`.trainer_reg_table_la SET highest_acadamic_qualification = ?, qualification_1 = ?,qualification_2 = ?,qualification_3 = ?,qualification_4 = ?, reg_date = ? where uid = ?",
    [
      acadamicInput,
      professionalInput,
      cert1Input?.replace("-", "").toLowerCase(),
      cert2Input?.replace("-", "").toLowerCase(),
      cert3Input?.replace("-", "").toLowerCase(),
      today,
      uid,
    ],
    async (err, result) => {
      if (err) console.log(err);
      else {
        var autoPass = generator.generate({
          length: 10,
          numbers: true,
        });

        var password = await bCrypt.hash(autoPass, 10);

        console.log(password);

        const sqlInsert1 =
          "INSERT INTO `myveda-db`.trainer_auth_table_la(uid,passcode) VALUES(?,?)";
        db.query(sqlInsert1, [uid, password], (err4, result4) => {
          if (err4) console.log(err4);
          else {
            db.query(
              "select * from  `myveda-db`.trainer_reg_table_la where uid = ?",
              [uid],
              (errT, resultT) => {
                if (errT) console.log(errT);
                else {
                  res.send(resultT);
                  const firstName = resultT[0].name;
                  const lastName = resultT[0].surname;
                  db.query(
                    "SELECT * FROM `myveda-db`.email_temp_trainer_la",
                    (errTT, resultTT) => {
                      if (errTT) console.log(errTT);
                      else {
                        let msg = resultTT[0].message;
                        let sign = resultTT[0].signature;
                        let caution = resultTT[0].caution;
                        let url = resultTT[0].url;
                        const output = `

                        <h3>Dear ${firstName} ${lastName} </h3>
                        <p>${msg}
                        </p>

                       <p><b>Registration Type </b> : Trainer</p>
                       <p>URL : <a href=${url}> ${url}</a></p>
                        <p>  <b>UID</b> : ${uid}</p>
                        <p> <b>Passcode</b> : <b>${autoPass}</b> </p>

                       

                        <p>${caution}</p>

                        <p>Thanks & Regards</p>

                        <p>${sign}</p>

  `;

                        db.query(
                          "SELECT * FROM `myveda-db`.email_srv",
                          (err6, result6) => {
                            if (err6) {
                              console.log(err6);
                            } else {
                              console.log(result6);
                              let host1 = result6[0]?.host;
                              let port1 = result6[0]?.port;
                              let user1 = result6[0]?.auth_uid;
                              let pass1 = result6[0]?.auth_pass;
                              let fromEmail = result6[0]?.from_email;
                              let bccEmail = result6[0]?.bcc_email;
                              let transporter = nodemailer.createTransport({
                                host: host1,
                                port: port1,
                                secure: true, // true for 465, false for other p orts
                                auth: {
                                  user: user1, // generated ethereal user
                                  pass: pass1, // generated ethereal password
                                },
                              });

                              // send mail with defined transport object
                              let info = transporter.sendMail({
                                from: `"" ${fromEmail}`, // sender address
                                to: uid, // list of receivers
                                subject: resultTT[0].subject, // Subject line
                                bcc: bccEmail,
                                html: output, // html body
                              });
                            }
                          }
                        );
                      }
                    }
                  );
                }
              }
            );
          }
        });
      }
    }
  );
});
// engineer doc
app.post("/api/update/engineer/la/doc", (req, res) => {
  const { cert1, cert2, cert3, uid } = req.body;

  const date = new Date();
  const today =
    (date.getDate() < 10 ? "0" + date.getDate() : date.getDate()) +
    "-" +
    (date.getMonth() + 1 < 10
      ? "0" + (date.getMonth() + 1)
      : date.getMonth() + 1) +
    "-" +
    date.getFullYear();

  db.query(
    "UPDATE `main_admin_db`.engineer_reg SET highest_acadamic_qualification = ?, professional_qualification =? , la_cert_1_iso_std = ?, reg_date = ? where uid = ?",
    [cert1, cert2, cert3, today, uid],
    async (err, result) => {
      if (err) console.log(err);
      else {
        var autoPass = generator.generate({
          length: 10,
          numbers: true,
        });

        var password = await bCrypt.hash(autoPass, 10);

        console.log(password);

        const sqlInsert1 =
          "INSERT INTO `main_admin_db`.engineer_auth(uid,passcode) VALUES(?,?)";
        db.query(sqlInsert1, [uid, password], (err4, result4) => {
          if (err4) console.log(err4);
          else {
            db.query(
              "select * from  `main_admin_db`.engineer_reg where uid = ?",
              [uid],
              (errT, resultT) => {
                if (errT) console.log(errT);
                else {
                  res.send(resultT);
                  const firstName = resultT[0].name;
                  const lastName = resultT[0].surname;
                  db.query(
                    "SELECT * FROM `main_admin_db`.email_temp_eng_reg",
                    (errTT, resultTT) => {
                      if (errTT) console.log(errTT);
                      else {
                        let msg = resultTT[0].message;
                        let sign = resultTT[0].signature;
                        let caution = resultTT[0].caution;
                        let url = resultTT[0].url;
                        const output = `

                        <h3>Dear ${firstName} ${lastName} </h3>
                        <p>${msg}
                        </p>

                       <p><b>Registration Type </b> : Engineer</p>
                       <p>URL : <a href=${url}> ${url}</a></p>
                        <p>  <b>UID</b> : ${uid}</p>
                        <p> <b>Passcode</b> : <b>${autoPass}</b> </p>

                      

                        <p>${caution}</p>

                        <p>Thanks & Regards</p>

                        <p>${sign}</p>

  `;

                        db.query(
                          "SELECT * FROM `myveda-db`.email_srv",
                          (err6, result6) => {
                            if (err6) {
                              console.log(err6);
                            } else {
                              console.log(result6);
                              let host1 = result6[0]?.host;
                              let port1 = result6[0]?.port;
                              let user1 = result6[0]?.auth_uid;
                              let pass1 = result6[0]?.auth_pass;
                              let fromEmail = result6[0]?.from_email;
                              let bccEmail = result6[0]?.bcc_email;
                              let transporter = nodemailer.createTransport({
                                host: host1,
                                port: port1,
                                secure: true, // true for 465, false for other p orts
                                auth: {
                                  user: user1, // generated ethereal user
                                  pass: pass1, // generated ethereal password
                                },
                              });

                              // send mail with defined transport object
                              let info = transporter.sendMail({
                                from: `"" ${fromEmail}`, // sender address
                                to: uid, // list of receivers
                                subject: resultTT[0].subject, // Subject line
                                bcc: bccEmail,
                                html: output, // html body
                              });
                            }
                          }
                        );
                      }
                    }
                  );
                }
              }
            );
          }
        });
      }
    }
  );
});

//maintain user status taking.... /user/status/reg/"+user+"/"+course_id+"/"+takeValaue
// app.post("/user/status/reg/:user/:course_id/:takeValue", (req, res) => {
//   const { user, course_id, takeValue } = req.params;
//   const lowerCourseID = course_id.toLowerCase().replace("-", "_");
//   db.query(
//     "SELECT *, COUNT (*) as count from `myveda-db`.?? WHERE uid = ? AND cust_id = ?",
//     [lowerCourseID + "_status", user, takeValue],
//     (err, result) => {
//       if (err) console.log(err);
//       else {
//         let count = result[0].count;
//         if (count === 0) {
//           db.query(
//             "SELECT * FROM `myveda-db`.customer_reg WHERE businessMail = ? AND cust_id = ?",
//             [user, takeValue],
//             (err1, result1) => {
//               if (err1) console.log(err1);
//               else {
//                 let reg_date = result1[0].req_date;
//                 let phone_num = result1[0].contactNumber;
//                 db.query(
//                   "INSERT INTO `myveda-db`.??(uid,cust_id,course_id,reg_date,phone_num,exam_status,ex_status) VALUES(?,?,?,?,?,?,?)",
//                   [
//                     lowerCourseID + "_status",
//                     user,
//                     takeValue,
//                     course_id,
//                     reg_date,
//                     phone_num,
//                     "Pending",
//                     "Pending",
//                   ],
//                   (err3, result3) => {
//                     if (err3) console.log(err3);
//                     else {
//                       console.log(result3);
//                     }
//                   }
//                 );
//               }
//             }
//           );
//         }
//       }
//     }
//   );
// });

//user status for exam
//user status for exam
app.put("/user/status/exam/", (req, res) => {
  const { uid, course_id, status } = req.body;
  const tot_time = req.body.tot_time;

  const lowerCourseID = course_id.toLowerCase().replace("-", "_");

  console.log(tot_time);

  db.query(
    "UPDATE `myveda-db`.?? SET exam_status = ? where uid = ? ",
    [lowerCourseID, status, uid],
    (err, result) => {
      if (err) console.log(err);
      else {
        db.query(
          "select * from `myveda-db`.customer_reg where businessMail = ?",
          [uid],
          (errUid, resultUid) => {
            if (errUid) console.log(uid);
            else {
              const { firstName, lastName, cust_id } = resultUid[0];
              db.query(
                "SELECT * FROM `myveda-db`.email_temp_exam_eval_staus",
                (errEvalTemp, resultEvalTemp) => {
                  if (errEvalTemp) console.log(errEvalTemp);
                  else {
                    const { subject, message, url, caution, signature } =
                      resultEvalTemp[0];
                    const output = `
      
              <h3>Dear ${firstName} ${lastName} </h3>
              <p> ${message}:
              </p>
      
              <p><b>Course ID</b>: ${course_id}</p>
      
              <p><b>Customer ID</b> : ${cust_id}</p>
      
              <p><b>Exam Status</b> : ${status}</p>
      
              <p>${caution}</p>
      
              <p>Thanks &#38; Best Regards </p>
      
              <p>${signature}</p>
      
              `;

                    db.query(
                      "SELECT * FROM `myveda-db`.email_srv",
                      (err, result) => {
                        if (err) {
                          console.log(err);
                        } else {
                          console.log(result);
                          let host1 = result[0]?.host;
                          let port1 = result[0]?.port;
                          let user1 = result[0]?.auth_uid;
                          let pass1 = result[0]?.auth_pass;
                          let fromEmail = result[0]?.from_email;
                          let bccEmail = result[0]?.bcc_email;
                          let transporter = nodemailer.createTransport({
                            host: host1,
                            port: port1,
                            secure: false, // true for 465, false for other p orts
                            auth: {
                              user: user1, // generated ethereal user
                              pass: pass1, // generated ethereal password
                            },
                          });

                          // send mail with defined transport object
                          let info = transporter.sendMail({
                            from: `"" ${fromEmail}`, // sender address
                            to: uid, // list of receivers
                            subject: "Exam", // Subject line
                            bcc: [bccEmail],
                            html: output, // html body
                          });
                        }
                      }
                    );

                    db.query(
                      "UPDATE `myveda-db`.customer_reg SET app_time = ? WHERE businessMail = ?",
                      [tot_time, uid]
                    );
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});
//get course categories
app.get("/get/categories/course", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.add_courses", (err, result) => {
    if (err) console.log(err);
    else res.send(result);
  });
});
// get all course id for myveda
app.get("/get/courses/id", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.category_course", (err, result) => {
    if (err) console.log(err);
    else res.send(result);
  });
});
//get service categories
app.get("/get/categories/services", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.product_cat where publish_status = 1",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//get course list by categories
app.get("/list/course/", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.add_courses where stats = ? ",
    [1],
    (err, result) => {
      if (err) console.log(err);
      else {
        res.send({
          result: result,
        });
      }
    }
  );
});

// app.get("/list/course/", (req, res) => {
//   db.query(
//     "SELECT * FROM `myveda-db`.add_courses where stats = ? ",
//     [1],
//     (err, result) => {
//       if (err) console.log(err);
//       else {
//         res.send( result,
//         );
//       }
//     }
//   );
// });
// get skill and outcome of a course id
app.get("/api/v1/get/card/data/skill/outcome/:courseId", (req, res) => {
  const course_id = req.params.courseId;
  db.query(
    "SELECT * FROM `myveda-db`.add_courses where course_id = ?",
    [course_id],
    (err, result) => {
      if (err) console.log(err);
      else {
        db.query(
          "SELECT * FROM `myveda-db`.course_skills_gain where course_id =? ",
          [course_id],
          (err2, result2) => {
            if (err2) console.log(err2);
            else {
              db.query(
                "SELECT * FROM `myveda-db`.course_skills_outcome where course_id =? ",
                [course_id],
                (err3, result3) => {
                  if (err2) console.log(err2);
                  else {
                    res.send({
                      result: result,
                      skill: result2,
                      outcome: result3,
                    });
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});
//get leanring schedule of course
app.get("/api/v1/get/course/learning/schedule/:course_id", (req, res) => {
  const { course_id } = req.params;
  db.query(
    "SELECT * FROM `myveda-db`.course_weekly_learning_schedule where course_id = ? and week = 1",
    [course_id],
    (err, result) => {
      if (err) console.log(err);
      else {
        db.query(
          "SELECT * FROM `myveda-db`.course_weekly_learning_schedule where course_id = ? and week = 2",
          [course_id],
          (err2, result2) => {
            if (err2) console.log(err2);
            else {
              db.query(
                "SELECT * FROM `myveda-db`.course_weekly_learning_schedule where course_id = ? and week = 3",
                [course_id],
                (err3, result3) => {
                  if (err3) console.log(err3);
                  else {
                    db.query(
                      "SELECT * FROM `myveda-db`.course_weekly_learning_schedule where course_id = ? and week = 4",
                      [course_id],
                      (err4, result4) => {
                        if (err4) console.log(err4);
                        else {
                          // console.log(result3);
                          res.send({
                            week_1: result,
                            week_2: result2,
                            week_3: result3,
                            week_4: result4,
                          });
                        }
                      }
                    );
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});
// //get course list by categories
// app.get("/list/course/:id1", (req, res) => {
//   db.query(
//     "SELECT * FROM `myveda-db`.add_courses where stats = ? AND cat_id = ?",
//     [1,req.params.id1],
//     (err, result) => {
//       if (err) console.log(err);
//       else res.send(result);
//     }
//   );
// });
// get all details of course category
app.get("/course/category/details/:checkName", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.category_course where course = ?",
    [req.params.checkName],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

app.get("/list/course/category/:name", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.product_services where stats = ? AND product_cat = ?",
    [1, req.params.name],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// add product
app.post("/add/product", (req, res) => {
  const file = req.files.image;

  var folderName = filePath + "/Logos";

  console.log(folderName);

  try {
    if (fs.existsSync(folderName)) {
      if (file) {
        fs.writeFileSync(`${folderName}/${file?.name}`, file?.data);
        db.query(
          "insert into main_admin_db.product_cat (category_title,category_img,category_des,route) values(?,?,?,?)",
          [req.body.title, file?.name, req.body.des, req.body.route],
          (err2, result2) => {
            if (err2) console.log(err2);
            else res.send(result2);
          }
        );
      } else {
        console.log("err");
      }
    }
  } catch (err) {
    console.error(err);
  }
});
app.put("/api/v1/publish/product", (req, res) => {
  const { id, bgColor, serviceDuration, servicePrice, title, des, buyNowSt } =
    req.body;
  const status = buyNowSt === true ? 1 : 0;
  db.query(
    "update main_admin_db.product_cat set publish_status = ?, service_tag_title = ?,service_tag_action = ?,bg_color = ?,buy_avl = ?,sub_duration = ?, per_month_price = ? where id = ?",
    [1, title, des, bgColor, status, serviceDuration, servicePrice, id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// get all services

app.get("/get/all/services/cat/:value", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.product_services where product_cat = ?",
    [req.params.value],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//get service data

app.get("/get/service/data/:value", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.product_services where id = ?",
    [req.params.value],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// update service data deactivate or activate
app.put("/update/product/service/data", (req, res) => {
  db.query(
    "update main_admin_db.product_services set stats = ? where id = ?",
    [req.body.status, req.body.serviceValue],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// update footer links data
app.put("/update/footer/info/data", (req, res) => {
  const { num, email, address, policy } = req.body;

  db.query(
    "update main_admin_db.footer_service_home set num = ?,email = ?,address = ?,policy = ? where id = 1",
    [num, email, address, policy],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// update footer links data number
app.put("/update/footer/info/number/data", (req, res) => {
  const { num } = req.body;

  db.query(
    "update main_admin_db.footer_service_home set num = ? where id = 1",
    [num],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

// update footer links data email
app.put("/update/footer/info/email/data", (req, res) => {
  const { email } = req.body;

  db.query(
    "update main_admin_db.footer_service_home set email = ? where id = 1",
    [email],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

// update footer links data address
app.put("/update/footer/info/address/data", (req, res) => {
  const { address } = req.body;

  db.query(
    "update main_admin_db.footer_service_home set address = ? where id = 1",
    [address],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

// update footer links data
app.put("/update/footer/info/policy/data", (req, res) => {
  const { policy } = req.body;

  db.query(
    "update main_admin_db.footer_service_home set policy = ? where id = 1",
    [policy],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

// update about data
app.put("/update/about/data", (req, res) => {
  db.query(
    "update main_admin_db.footer_service_home set value_type = ?, about_us = ? where id = 1",
    [req.body.type, req.body.title],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//
app.get("/get/all/course/data/:value", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.add_courses where stats = ? and l_mode = ?",
    [1, req.params.value],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
app.get("/pricing/get/all/course/data", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.add_courses where stats = ?",
    [1],

    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
app.get("/get/all/data/courselist/:id", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.add_courses where stats = ? and id = ?",
    [1, req.params.id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//registration for course
app.post("/reg/course", (req, res) => {
  const {
    firstName,
    businessMail,
    contactNumber,
    country,
    surname,
    city,
    address,
    state,
    id,
    invoice_type,
    pincode,
  } = req.body;

  let name_slice = firstName.slice(0, 2);
  let number_slice = contactNumber.substr(-4);

  let cust_id = name_slice.toUpperCase() + number_slice + "IND0";
  let today = new Date().toISOString().slice(0, 10);
  db.query(
    `SELECT *
    FROM \`main_admin_db\`.myveda_indi_cust_ids AS t1
    INNER JOIN \`myveda-db\`.customer_reg AS t2
    ON t1.email = t2.businessMail
    WHERE t2.businessMail = ?
    `,
    [businessMail],
    (err, result) => {
      if (err) console.log(err);
      else {
        let count_coulmn = result;
        if (count_coulmn.length === 0) {
          db.query(
            `SELECT *
            FROM \`main_admin_db\`.myveda_indi_cust_ids where email = ?`,
            [businessMail],
            (errV, resultV) => {
              if (errV) console.log(errV);
              else {
                if (resultV.length === 0) {
                  db.query(
                    "INSERT INTO main_admin_db.myveda_indi_cust_ids(full_name,email,country,number,surname,city,address,state,pincode) VALUES(?,?,?,?,?,?,?,?,?)",
                    [
                      firstName,
                      businessMail,
                      country,
                      contactNumber,
                      surname,
                      city,
                      address,
                      state,
                      pincode,
                    ],
                    (err1, result1) => {
                      if (err1) console.log(err1);
                      else {
                        res.send(result1);
                        if (id === 1) {
                          db.query(
                            "INSERT INTO `myveda-db`.user_course_map_table_la (uid,cust_id,invoice_type) values(?,?,?)",
                            [businessMail, cust_id, invoice_type],
                            (err1, result1) => {
                              if (err1) console.log(err1);
                              else {
                                db.query(
                                  "insert into `myveda-db`.active_usr_data_la(uid,status) values(?,?)",
                                  [businessMail, "1"],
                                  (err33, result33) => {
                                    if (err33) console.log(err33);
                                    else {
                                    }
                                  }
                                );
                              }
                            }
                          );
                        }
                        db.query(
                          "SELECT * FROM `myveda-db`.email_temp_learner_lead",
                          (errM, resultM) => {
                            if (errM) console.log(errM);
                            else {
                              const output = `
    
                            <h3>Dear Admin </h3>
                            <p> ${resultM[0]?.message} : </p>
            
                            <p>Name : ${firstName}</p>
            
                            <p>  E-mail : ${businessMail}</p>
            
                            <p>  Country : <b>${country}</b> </p>
            
                            <p> Conatact No. : <b>${contactNumber}</b></p>
            
                            <p>!!! ${resultM[0]?.caution}.</p>
            
                            <p>Thanks &#38; Best Regards </p>
            
                            <p>${resultM[0]?.sign}</p>
            
                            `;
                              db.query(
                                "SELECT * FROM `myveda-db`.email_srv",
                                (err, result) => {
                                  if (err) {
                                    console.log(err);
                                  } else {
                                    console.log(result);
                                    let host1 = result[0]?.host;
                                    let port1 = result[0]?.port;
                                    let user1 = result[0]?.auth_uid;
                                    let pass1 = result[0]?.auth_pass;
                                    let fromEmail = result[0]?.from_email;
                                    let bccEmail = result[0]?.bcc_email;
                                    let transporter =
                                      nodemailer.createTransport({
                                        host: host1,
                                        port: port1,
                                        secure: true, // true for 465, false for other p orts
                                        auth: {
                                          user: user1, // generated ethereal user
                                          pass: pass1, // generated ethereal password
                                        },
                                      });

                                    // send mail with defined transport object
                                    let info = transporter.sendMail({
                                      from: `"" ${fromEmail}`, // sender address
                                      to: "", // list of receivers
                                      subject: resultM[0].subject, // Subject line
                                      bcc: bccEmail,
                                      html: output, // html body
                                    });
                                  }
                                }
                              );
                            }
                          }
                        );
                      }
                    }
                  );
                } else {
                  db.query(
                    "update main_admin_db.myveda_indi_cust_ids set full_name = ?,country = ?,number = ? where email = ?",
                    [firstName, country, contactNumber, businessMail],
                    (err1, result1) => {
                      if (err1) console.log(err1);
                      else {
                        res.send(result1);
                        db.query(
                          "SELECT * FROM `myveda-db`.email_temp_learner_lead",
                          (errM, resultM) => {
                            if (errM) console.log(errM);
                            else {
                              const output = `
    
                            <h3>Dear Admin </h3>
                            <p> ${resultM[0].message} : </p>
            
                            <p>Name : ${firstName}</p>
            
                            <p>  E-mail : ${businessMail}</p>
            
                            <p>  Country : <b>${country}</b> </p>
            
                            <p> Conatact No. : <b>${contactNumber}</b></p>
            
                            <p>!!! ${resultM[0]?.caution}.</p>
            
                            <p>Thanks &#38; Best Regards </p>
            
                            <p>${resultM[0]?.sign}</p>
            
                            `;

                              db.query(
                                "SELECT * FROM `myveda-db`.email_srv",
                                (err, result) => {
                                  if (err) {
                                    console.log(err);
                                  } else {
                                    console.log(result);
                                    let host1 = result[0]?.host;
                                    let port1 = result[0]?.port;
                                    let user1 = result[0]?.auth_uid;
                                    let pass1 = result[0]?.auth_pass;
                                    let fromEmail = result[0]?.from_email;
                                    let bccEmail = result[0]?.bcc_email;
                                    let transporter =
                                      nodemailer.createTransport({
                                        host: host1,
                                        port: port1,
                                        secure: true, // true for 465, false for other p orts
                                        auth: {
                                          user: user1, // generated ethereal user
                                          pass: pass1, // generated ethereal password
                                        },
                                      });

                                    // send mail with defined transport object
                                    let info = transporter.sendMail({
                                      from: `"" ${fromEmail}`, // sender address
                                      to: "", // list of receivers
                                      subject: resultM[0].subject, // Subject line
                                      bcc: bccEmail,
                                      html: output, // html body
                                    });
                                  }
                                }
                              );
                            }
                          }
                        );
                      }
                    }
                  );
                }
              }
            }
          );
        } else {
          res.send("no");
        }
      }
    }
  );
});
//registration for course update
app.put("/reg/update/course", (req, res) => {
  const { firstName, businessMail, contactNumber, country } = req.body;
  db.query(
    "SELECT * FROM main_admin_db.myveda_indi_cust_ids where email = ?",
    [businessMail],
    (err, result) => {
      if (err) console.log(err);
      else {
        let count_coulmn = result.length;
        if (count_coulmn > 0) {
          db.query(
            "UPDATE main_admin_db.myveda_indi_cust_ids SET full_name = ?,country = ?,number = ? where email = ?",
            [firstName, country, contactNumber, businessMail],
            (err1, result1) => {
              if (err1) console.log(err1);
              else {
                res.send(result1);
              }
            }
          );
        } else {
          res.send("no");
        }
      }
    }
  );
});
//check coupon id
app.get("/check/coupon/:id", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.coupon_table where coupon_id = ?",
    [req.params.id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

// get description of iso
app.get("/description/iso/:iso_std", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.add_std_list where std = ?",
    [req.params.iso_std],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

app.get("/list/points/iso/:iso_std", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.std_points_li where std_name = ?",
    [req.params.iso_std],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

// // course pricing
// app.get("/price/iso/course/:iso_std/:category", (req, res) => {
//   db.query(
//     "SELECT * FROM `myveda-db`.add_courses where course_category = ? and standard = ?",
//     [req.params.category, req.params.iso_std],
//     (err, result) => {
//       if (err) console.log(err);
//       else res.send(result);
//     }
//   );
// });
// about course
app.get("/about/iso/course/:iso_std/:category", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.about_the_course_la where course_category = ? and iso_std = ?",
    [req.params.category, req.params.iso_std],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// objective course
app.get("/obj/iso/course/:iso_std/:category", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.course_objective_la where course_category = ? and iso_std = ?",
    [req.params.category, req.params.iso_std],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// attend course
app.get("/attend/iso/course/:iso_std/:category", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.attend_course_la where course_category = ? and iso_std = ?",
    [req.params.category, req.params.iso_std],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//image of course
app.get("/image/course/:category", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.category_course where course = ?",
    [req.params.category],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// course detaile page data for particular course
app.get("/api/v1/get/course/detailed/data/:course_id", (req, res) => {
  const { course_id } = req.params;
  db.query(
    "select * from `myveda-db`.add_courses where course_id = ?",
    [course_id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//update customer id
app.put("/cust_id/user/update", (req, res) => {
  const { mail, name, countryCode, number, country, order_id } = req.body;

  let name_slice = name.slice(0, 2);
  let number_slice = number.slice(0, 4);

  let cust_id = name_slice.toUpperCase() + number_slice + "IND0";
  const {
    gst_number,
    coupon_number,
    taxes,
    after_discount,
    discount_amount,
    discount_percent,
    final_fee_for_pay,
    hsnHacData,
  } = req.body.invoiceData;

  console.log(req.body);

  db.query(
    "UPDATE main_admin_db.myveda_indi_cust_ids SET cust_id = ?,order_id = ?,ccav_order_status = ?,gstin = ?,dis = ?,dis_amount = ?,appl_coupon = ?,amount_aft_dis = ?,tax_amount = ?,final_amount= ?,tax = ?,hsn_hac = ? where email = ? ",
    [
      cust_id,
      order_id,
      "Pending",
      gst_number,
      discount_percent ? parseInt(discount_percent) : 0,
      discount_amount,
      coupon_number,
      after_discount,

      taxes,
      final_fee_for_pay,
      hsnHacData.tax_rate_percent,
      hsnHacData.hsn_code,
      mail,
    ],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// get hsn hac for commercial training purpose
app.get("/api/v1/get/com/train/hsn/hac", (req, res) => {
  try {
    db.query(
      "select * from main_admin_db.hsn_sac_table where id = 1",
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {}
});
// get hsn hac for cloud software purpose
app.get("/api/v1/get/cloud/soft/hsn/hac", (req, res) => {
  try {
    db.query(
      "select * from main_admin_db.hsn_sac_table where id = 6",
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {}
});
// get hsn hac for computer maintenance  purpose
app.get("/api/v1/get/myit/ticket/hsn/hac", (req, res) => {
  try {
    db.query(
      "select * from main_admin_db.hsn_sac_table where id = 2",
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {}
});
//auto map course in data table for user
app.post("/insert/course/data/payment", (req, res) => {
  const {
    mail,
    name,
    countryCode,
    number,
    country,
    course_title,
    iso_std,
    order_id,
    cust_idd,
  } = req.body;

  let name_slice = name.slice(0, 2);
  let number_slice = number.slice(0, 4);

  let cust_id = cust_idd
    ? cust_idd
    : name_slice.toUpperCase() + number_slice + "IND0";

  var today = new Date();
  var dd = String(today.getDate()).padStart(2, "0");
  var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
  var yyyy = today.getFullYear();

  var presentDate = yyyy + "-" + mm + "-" + dd;

  // Add 90 days to the current date

  db.query(
    "select duration from `myveda-db`.add_courses where course_ttl = ?",
    [course_title],
    (err56, result56) => {
      if (err56) console.log(err56);
      else {
        const duration = result56[0]?.duration;
        today.setDate(today.getDate() + duration);

        var futureDD = String(today.getDate()).padStart(2, "0");
        var futureMM = String(today.getMonth() + 1).padStart(2, "0");
        var futureYYYY = today.getFullYear();

        var futureDate = futureYYYY + "-" + futureMM + "-" + futureDD;
        db.query(
          "SELECT * FROM `myveda-db`.user_course_map_table_la WHERE uid = ? and cust_id = ? and course = ? and iso_std = ? and order_id = ?",
          [mail, cust_id, course_title, iso_std, order_id],
          (err, result) => {
            if (err) console.log(err);
            else {
              if (result.length === 0) {
                db.query(
                  "SELECT * FROM `myveda-db`.add_courses where course_ttl = ? and standard = ? ",
                  [course_title, iso_std],
                  (err111, result111) => {
                    if (err111) console.log(err111);
                    else {
                      let course_id = result111[0].course_id;

                      db.query(
                        "INSERT INTO `myveda-db`.user_course_map_table_la (uid,cust_id,course,iso_std,course_id,course_req_date,start_date,end_date,duration,invoice_type,order_id) values(?,?,?,?,?,?,?,?,?,?,?)",
                        [
                          mail,
                          cust_id,
                          course_title,
                          iso_std,
                          course_id,
                          presentDate,
                          presentDate,
                          futureDate,
                          duration,
                          "Online",
                          order_id,
                        ],
                        (err1, result1) => {
                          if (err1) console.log(err1);
                          else {
                            db.query(
                              "insert into `myveda-db`.active_usr_data_la(uid,status) values(?,?)",
                              [mail, "1"],
                              (err33, result33) => {
                                if (err33) console.log(err33);
                                else res.send(result1);
                              }
                            );
                          }
                        }
                      );
                    }
                  }
                );
              } else {
                console.log("data row already there. = line 21230");
              }
            }
          }
        );
      }
    }
  );

  // db.query("INERTO INTO `myveda-db`.user_course_map_table_la ()")
});
//get login status of trainer
app.get("/get/status/trainer/:id", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.trainer_reg_table_la where uid = ?",
    [req.params.id],
    (err, result) => {
      if (err) console.log(err);
      else {
        res.send(result);
      }
    }
  );
});
//get login status of trainer
app.get("/get/status/eng/:id", (req, res) => {
  db.query(
    "SELECT * FROM `main_admin_db`.engineer_reg where uid = ?",
    [req.params.id],
    (err, result) => {
      if (err) console.log(err);
      else {
        res.send(result);
      }
    }
  );
});
// invoice
// invoice

const checkEndDate = async (mail, cust_id) => {
  try {
    const takeEndDate = await new Promise((resolve, reject) => {
      db.query(
        "SELECT * FROM `myveda-db`.user_course_map_table_la where uid = ? and cust_id = ?",
        [mail, cust_id],
        (errM, resultM) => {
          if (errM) {
            console.log(errM);
            reject(errM);
          } else {
            resolve(resultM);
          }
        }
      );
    });

    const lastRowData = takeEndDate[takeEndDate.length - 1];
    console.log(lastRowData, "check_date");
    return { end_date: lastRowData?.end_date };
  } catch (error) {}
};
app.put("/save/recipt/pdf", async function (req, res) {
  const {
    dataUri,
    mail,
    name,
    countryCode,
    number,
    country,
    invoice_num,
    final_amt,
    service,
    order_id,
    ip_address,
    remark,
    hsn_sac,
    ccavResDetails,
    otherData,
  } = req.body;

  var date = new Date(); // Now
  date.setDate(date.getDate()); // Set now + 30 days as the new date

  const buffer = Buffer.from(dataUri.split(",")[1], "base64");
  // var today = new Date();
  // var takeDate = today.setDate(today.getDate() + 30);
  var dd = String(date.getDate()).padStart(2, "0");
  var mm = String(date.getMonth()).padStart(2, "0"); //January is 0!
  var yyyy = date.getFullYear();

  const takeDate = yyyy + "-" + mm + "-" + dd;
  db.query(
    "SELECT * FROM `myveda-db`.user_course_map_table_la where uid = ?",
    [mail],
    (errM, resultM) => {
      if (errM) console.log(errM);
      else {
        const data = resultM;
      }
    }
  );

  const {
    tracking_id,
    bank_ref_no,
    order_status,
    failure_msg,
    payment_mode,
    card_name,
    status_code,
    status_message,
    retry,
    trans_date,
    response_code,
    amount,
    mer_param5,
  } = req.body.ccavResDetails;

  const parsedInvData = JSON.parse(mer_param5);

  const {
    coupon_id,
    mrp_amount,
    inv_amount,
    dis_percent,
    dis_amount,
    discounted_amount,
    tax_amount,
    tax_percent,
    inv_incl_tax_amount,
  } = parsedInvData;

  const coupon_no = coupon_id ? coupon_id : "N/A";

  console.log(coupon_no);

  const file_name_ = `${mail}.pdf`;

  db.query(
    "SELECT * FROM main_admin_db.myveda_indi_cust_ids where email = ?",
    [mail],
    (err11, result11) => {
      if (err11) console.log(err11);
      else {
        let cust_id = result11[0].cust_id;

        db.query(
          "SELECT * FROM `main_admin_db`.tax_invoice_order_myvedait where invoice_no = ? and billing_email = ?",
          [invoice_num, mail],
          (errIn, resultIn) => {
            if (errIn) console.log(errIn);
            else {
              if (resultIn.length === 0) {
                db.query(
                  `insert into \`main_admin_db\`.tax_invoice_order_myvedait (service_id,service_name,order_id,cust_id,order_date,invoice_no,billing_name,billing_tel,billing_email,billing_address,services,
                    payment_status,payment_date_time,txn_details,payment_mode,
                    mer_amount,
                    ccav_tracking_id,
                    ccav_bank_ref_no,
                    ccav_order_status,
                    ccav_failure_msg,
                    ccav_payment_mode,
                    ccav_card_name,
                    ccav_status_code,
                    ccav_status_message,
                    ccav_retry,
                    ccav_trans_date,
                    ccav_response_code,
                    invoice_gen_type,
                    coupon_id,
                    mrp_amount,
                    inv_amount,
                    inv_incl_tax_amount,
                    dis_percent,
                    dis_amount,
                    discounted_amount,
                    tax_amount,
                    tax_percent,
                    hsn_sac,
                    place_of_supply,
                    sales_type,
                    file_name
                    ) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`,
                  [
                    1,
                    "MyVeda E-Learning Courses",
                    order_id,
                    cust_id,
                    takeDate,
                    invoice_num,
                    ccavResDetails.billing_name,
                    ccavResDetails.billing_tel,
                    ccavResDetails.billing_email,
                    ccavResDetails.billing_address,
                    "MyVeda E-Learning Courses",
                    "Paid",
                    takeDate,
                    remark ? remark : "",
                    payment_mode ? payment_mode : "",
                    amount,
                    tracking_id,
                    bank_ref_no,
                    order_status,
                    failure_msg,
                    payment_mode,
                    card_name,
                    status_code,
                    status_message,
                    retry,
                    trans_date,
                    response_code,
                    "Online",
                    coupon_no,
                    mrp_amount,
                    discounted_amount,
                    inv_incl_tax_amount,
                    dis_percent,
                    dis_amount,
                    discounted_amount,
                    tax_amount,
                    tax_percent,
                    hsn_sac,
                    otherData.inter_state,
                    otherData.sales_type,
                    file_name_,
                  ],
                  (errIn1, resultIn1) => {
                    if (errIn1) console.log(errIn1);
                    else {
                      db.query(
                        "SELECT * FROM `myveda-db`.comp_cust_req_db WHERE cust_id = ?",
                        [cust_id],
                        async (err, result) => {
                          if (err) console.log(err);
                          else {
                            if (result.length === 0) {
                              const end_date = await checkEndDate(
                                mail,
                                cust_id
                              );

                              console.log(end_date, "end_date");
                              db.query(
                                "INSERT into `myveda-db`.comp_cust_req_db (cust_id,companyName,spocName,spocEmail,spocContact,country,status,user_limit_allowed,user_limit_remain,registered_user,end_date,design_value) values(?,?,?,?,?,?,?,?,?,?,?,?)",
                                [
                                  cust_id,
                                  name,
                                  name,
                                  mail,
                                  countryCode + "-" + number,
                                  country,
                                  "Active",
                                  "1",
                                  "1",
                                  "0",
                                  end_date?.end_date,
                                  1,
                                ],
                                (err1, result1) => {
                                  if (err1) console.log(err1);
                                  else {
                                    db.query(
                                      "SELECT * FROM `myveda-db`.user_course_map_table_la where uid = ? and cust_id = ?",
                                      [mail, cust_id],
                                      (errM, resultM) => {
                                        if (errM) console.log(errM);
                                        else {
                                          const data = resultM;
                                          db.query(
                                            "SELECT * FROM main_admin_db.myveda_indi_cust_ids where email = ?",
                                            [mail],
                                            async (errInv, resultInv) => {
                                              if (errInv) console.log(errInv);
                                              else {
                                                fs.writeFileSync(
                                                  `./invoices/${file_name_}`,
                                                  buffer
                                                );
                                                db.query(
                                                  "SELECT * FROM `myveda-db`.email_temp_payout_la",
                                                  (errPay, resultPay) => {
                                                    if (errPay)
                                                      console.log(errPay);
                                                    else {
                                                      // node mailer
                                                      const output = `

                                                          <h3>Dear ${name} </h3>
                                                          <p>${
                                                            resultPay[0].message
                                                          }.</p>

                                                          <p><b>Customer ID :</b> ${cust_id}</p>

                                                          <p><b>URL</b> : <a href='${
                                                            resultPay[0].url
                                                          }'>${
                                                        resultPay[0].url
                                                      }</a></p>

                                                          <p><b>Course IDs:</b></p>

                                                          ${
                                                            resultM[0]?.course
                                                              ? "1. " +
                                                                resultM[0]
                                                                  ?.iso_std +
                                                                "-" +
                                                                resultM[0]
                                                                  ?.course
                                                              : ""
                                                          }
                                                          <br/>
                                                          ${
                                                            resultM[1]?.course
                                                              ? "2. " +
                                                                resultM[1]
                                                                  ?.iso_std +
                                                                "-" +
                                                                resultM[1]
                                                                  ?.course
                                                              : ""
                                                          }
                                                          <br/>
                                                          ${
                                                            resultM[2]?.course
                                                              ? "3. " +
                                                                resultM[2]
                                                                  ?.iso_std +
                                                                "-" +
                                                                resultM[2]
                                                                  ?.course
                                                              : ""
                                                          }
                                                          <br/>
                                                          ${
                                                            resultM[3]?.course
                                                              ? "4. " +
                                                                resultM[3]
                                                                  ?.iso_std +
                                                                "-" +
                                                                resultM[3]
                                                                  ?.course
                                                              : ""
                                                          }
                                                          <br/>
                                                          ${
                                                            resultM[4]?.course
                                                              ? "5. " +
                                                                resultM[4]
                                                                  ?.iso_std +
                                                                "-" +
                                                                resultM[4]
                                                                  ?.course
                                                              : ""
                                                          }

                                                          <p>
                                                          Please find attached invoice for your records.</p>

                                                          <p>${
                                                            resultPay[0].caution
                                                          }.</p>

                                                          <p>Thanks & Best Regards</p>
                                                          <p>${
                                                            resultPay[0]
                                                              .signature
                                                          }</p>

                                                          `;

                                                      db.query(
                                                        "SELECT * FROM `myveda-db`.email_srv",
                                                        (err, result) => {
                                                          if (err) {
                                                            console.log(err);
                                                          } else {
                                                            console.log(result);
                                                            let host1 =
                                                              result[0]?.host;
                                                            let port1 =
                                                              result[0]?.port;
                                                            let user1 =
                                                              result[0]
                                                                ?.auth_uid;
                                                            let pass1 =
                                                              result[0]
                                                                ?.auth_pass;
                                                            let fromEmail =
                                                              result[0]
                                                                ?.from_email;
                                                            let bccEmail =
                                                              result[0]
                                                                ?.bcc_email;
                                                            let transporter =
                                                              nodemailer.createTransport(
                                                                {
                                                                  host: host1,
                                                                  port: port1,
                                                                  secure: true, // true for 465, false for other p orts
                                                                  auth: {
                                                                    user: user1, // generated ethereal user
                                                                    pass: pass1, // generated ethereal password
                                                                  },
                                                                }
                                                              );

                                                            // send mail with defined transport object
                                                            let info =
                                                              transporter
                                                                .sendMail({
                                                                  from: `"" ${fromEmail}`, // sender address
                                                                  to: mail, // list of receivers
                                                                  subject:
                                                                    resultPay[0]
                                                                      .subject, // Subject line
                                                                  bcc: bccEmail,
                                                                  html: output, // html body
                                                                  attachments: [
                                                                    {
                                                                      filename:
                                                                        "invoice.pdf",
                                                                      content:
                                                                        fs.createReadStream(
                                                                          `./invoices/${file_name_}`,
                                                                          buffer
                                                                        ),
                                                                    },
                                                                  ],
                                                                })
                                                                .then(() => {
                                                                  if (
                                                                    coupon_no ===
                                                                    "N/A"
                                                                  ) {
                                                                    res
                                                                      .status(
                                                                        200
                                                                      )
                                                                      .send({
                                                                        success: true,
                                                                      });
                                                                  } else {
                                                                    const couponInsert =
                                                                      {
                                                                        coupon_id:
                                                                          coupon_no,
                                                                        service_id: 1,
                                                                        cust_id:
                                                                          cust_id,
                                                                        order_id:
                                                                          order_id,
                                                                        service_name:
                                                                          "MyVeda E-Learning Courses",
                                                                        name: name,
                                                                        email:
                                                                          mail,
                                                                        phone:
                                                                          countryCode +
                                                                          "-" +
                                                                          number,
                                                                        used_date:
                                                                          trans_date,
                                                                        ccav_order_status:
                                                                          order_status,
                                                                      };

                                                                    db.query(
                                                                      "UPDATE main_admin_db.coupon_table SET status = ? where coupon_id = ?",
                                                                      [
                                                                        0,
                                                                        coupon_no,
                                                                      ],
                                                                      (
                                                                        errPP,
                                                                        resultPP
                                                                      ) => {
                                                                        if (
                                                                          errPP
                                                                        )
                                                                          console.log(
                                                                            errPP
                                                                          );
                                                                        else {
                                                                          db.query(
                                                                            `insert into main_admin_db.coupon_used_by set ?`,
                                                                            [
                                                                              couponInsert,
                                                                            ],
                                                                            (
                                                                              errC,
                                                                              resultC
                                                                            ) => {
                                                                              if (
                                                                                errC
                                                                              )
                                                                                console.log(
                                                                                  errC,
                                                                                  " : error while inserting coupon data in coupon used table."
                                                                                );
                                                                              else {
                                                                                db.query(
                                                                                  "SELECT * FROM main_admin_db.coupon_table where coupon_id = ?",
                                                                                  [
                                                                                    coupon_no,
                                                                                  ],
                                                                                  (
                                                                                    err2X,
                                                                                    result2X
                                                                                  ) => {
                                                                                    if (
                                                                                      err2X
                                                                                    )
                                                                                      console.log(
                                                                                        err2X
                                                                                      );
                                                                                    else {
                                                                                      let coupon_used =
                                                                                        result2X[0]
                                                                                          .coupon_used;

                                                                                      console.log(
                                                                                        coupon_used
                                                                                      );
                                                                                      let used =
                                                                                        coupon_used +
                                                                                        1;
                                                                                      db.query(
                                                                                        "UPDATE main_admin_db.coupon_table SET coupon_used = ? where coupon_id = ?",
                                                                                        [
                                                                                          used,
                                                                                          coupon_no,
                                                                                        ],
                                                                                        (
                                                                                          err3X,
                                                                                          result4
                                                                                        ) => {
                                                                                          if (
                                                                                            err3X
                                                                                          )
                                                                                            console.log(
                                                                                              err3X
                                                                                            );
                                                                                          else {
                                                                                            db.query(
                                                                                              "SELECT * FROM main_admin_db.coupon_table where coupon_id = ?",
                                                                                              [
                                                                                                coupon_no,
                                                                                              ],
                                                                                              (
                                                                                                err4,
                                                                                                result4X
                                                                                              ) => {
                                                                                                if (
                                                                                                  err4
                                                                                                )
                                                                                                  console.log(
                                                                                                    err4
                                                                                                  );
                                                                                                else {
                                                                                                  let uses =
                                                                                                    result4X[0]
                                                                                                      .uses;
                                                                                                  let used_coupon =
                                                                                                    result4X[0]
                                                                                                      .coupon_used;

                                                                                                  let remain =
                                                                                                    uses -
                                                                                                    used_coupon;
                                                                                                  db.query(
                                                                                                    "UPDATE main_admin_db.coupon_table SET uses_remain = ? where coupon_id = ?",
                                                                                                    [
                                                                                                      remain,
                                                                                                      coupon_no,
                                                                                                    ],
                                                                                                    (
                                                                                                      err5X,
                                                                                                      result5
                                                                                                    ) => {
                                                                                                      if (
                                                                                                        err5X
                                                                                                      )
                                                                                                        console.log(
                                                                                                          err5X
                                                                                                        );
                                                                                                      else {
                                                                                                        res
                                                                                                          .status(
                                                                                                            200
                                                                                                          )
                                                                                                          .send(
                                                                                                            {
                                                                                                              success: true,
                                                                                                            }
                                                                                                          );
                                                                                                      }
                                                                                                    }
                                                                                                  );
                                                                                                }
                                                                                              }
                                                                                            );
                                                                                          }
                                                                                        }
                                                                                      );
                                                                                    }
                                                                                  }
                                                                                );
                                                                              }
                                                                            }
                                                                          );
                                                                        }
                                                                      }
                                                                    );
                                                                  }
                                                                });
                                                          }
                                                        }
                                                      );
                                                    }
                                                  }
                                                );
                                              }
                                            }
                                          );
                                        }
                                      }
                                    );
                                  }
                                }
                              );
                            } else {
                              db.query(
                                "SELECT * FROM `myveda-db`.user_course_map_table_la as t1 left join `myveda-db`.add_courses as t2 on t1.course_id = t2.course_id where t1.uid = ? and t1.cust_id = ?",
                                [mail, cust_id],
                                (errM, resultMM) => {
                                  if (errM) console.log(errM);
                                  else {
                                    const data = resultMM;
                                    // Get the last row using data.length - 1 (zero-based indexing)
                                    const resultM = data[data.length - 1];
                                    console.log(resultM);
                                    const { duration } = resultM;

                                    var someDate = new Date(takeDate);

                                    var result1111 = new Date(
                                      someDate.setDate(
                                        someDate.getDate() + parseInt(duration)
                                      )
                                    );

                                    var exp_date = result1111
                                      .toISOString()
                                      .split("T")[0];
                                    db.query(
                                      "insert into `myveda-db`.indi_cust_course_ids(cust_id,course_id,start_date,end_date) values(?,?,?,?)",
                                      [
                                        cust_id,
                                        resultM?.course_id,
                                        takeDate,
                                        exp_date,
                                      ],
                                      (err22, result22) => {
                                        if (err22) console.log(err22);
                                        else {
                                          if (err22) {
                                            console.log(err22);
                                          } else {
                                            db.query(
                                              "SELECT * FROM main_admin_db.myveda_indi_cust_ids where email = ?",
                                              [mail],
                                              async (errInv, resultInv) => {
                                                if (errInv) console.log(errInv);
                                                else {
                                                  fs.writeFileSync(
                                                    `./invoices/${file_name_}`,
                                                    buffer
                                                  );
                                                  db.query(
                                                    "SELECT * FROM `myveda-db`.email_temp_course_buy_exist_learner",
                                                    (errPay, resultPay) => {
                                                      if (errPay)
                                                        console.log(errPay);
                                                      else {
                                                        // node mailer
                                                        const output = `
          
                                                              <h3>Dear ${name} </h3>
                                                              <p>${
                                                                resultPay[0]
                                                                  ?.message
                                                              }</p>
          
                                                              
          
                                                              <p><b>URL</b> : <a href='${
                                                                resultPay[0].url
                                                              }'>${
                                                          resultPay[0].url
                                                        }</a></p>
          
                                                              <p><b>Course IDs:</b></p>
          
                                                              ${
                                                                resultM?.course
                                                                  ? "1. " +
                                                                    resultM?.iso_std +
                                                                    "-" +
                                                                    resultM?.course
                                                                  : ""
                                                              }
                                                              <br/>
                                                             
          
                                                              <p>
                                                              Please find attached invoice for your records.</p>
          
                                                              <p>${
                                                                resultPay[0]
                                                                  .caution
                                                              }.</p>
          
                                                              <p>Thanks & Best Regards</p>
                                                              <p>${
                                                                resultPay[0]
                                                                  .signature
                                                              }</p>
          
                                                              `;

                                                        db.query(
                                                          "SELECT * FROM `myveda-db`.email_srv",
                                                          (err, result) => {
                                                            if (err) {
                                                              console.log(err);
                                                            } else {
                                                              console.log(
                                                                result
                                                              );
                                                              let host1 =
                                                                result[0]?.host;
                                                              let port1 =
                                                                result[0]?.port;
                                                              let user1 =
                                                                result[0]
                                                                  ?.auth_uid;
                                                              let pass1 =
                                                                result[0]
                                                                  ?.auth_pass;
                                                              let fromEmail =
                                                                result[0]
                                                                  ?.from_email;
                                                              let bccEmail =
                                                                result[0]
                                                                  ?.bcc_email;
                                                              let transporter =
                                                                nodemailer.createTransport(
                                                                  {
                                                                    host: host1,
                                                                    port: port1,
                                                                    secure: true, // true for 465, false for other p orts
                                                                    auth: {
                                                                      user: user1, // generated ethereal user
                                                                      pass: pass1, // generated ethereal password
                                                                    },
                                                                  }
                                                                );

                                                              // send mail with defined transport object
                                                              let info =
                                                                transporter
                                                                  .sendMail({
                                                                    from: `"" ${fromEmail}`, // sender address
                                                                    to: mail, // list of receivers
                                                                    subject:
                                                                      resultPay[0]
                                                                        .subject, // Subject line
                                                                    bcc: bccEmail,
                                                                    html: output, // html body
                                                                    attachments:
                                                                      [
                                                                        {
                                                                          filename:
                                                                            "invoice.pdf",
                                                                          content:
                                                                            fs.createReadStream(
                                                                              `./invoices/${file_name_}.pdf`,
                                                                              buffer
                                                                            ),
                                                                        },
                                                                      ],
                                                                  })
                                                                  .then(() => {
                                                                    if (
                                                                      coupon_no ===
                                                                      "N/A"
                                                                    ) {
                                                                      res
                                                                        .status(
                                                                          200
                                                                        )
                                                                        .send({
                                                                          success: true,
                                                                        });
                                                                    } else {
                                                                      const couponInsert =
                                                                        {
                                                                          coupon_id:
                                                                            coupon_no,
                                                                          service_id: 1,
                                                                          cust_id:
                                                                            cust_id,
                                                                          order_id:
                                                                            order_id,
                                                                          service_name:
                                                                            "MyVeda E-Learning Courses",
                                                                          name: name,
                                                                          email:
                                                                            mail,
                                                                          phone:
                                                                            countryCode +
                                                                            "-" +
                                                                            number,
                                                                          used_date:
                                                                            trans_date,
                                                                          ccav_order_status:
                                                                            order_status,
                                                                        };

                                                                      db.query(
                                                                        "UPDATE main_admin_db.coupon_table SET status = ? where coupon_id = ?",
                                                                        [
                                                                          0,
                                                                          coupon_no,
                                                                        ],
                                                                        (
                                                                          errPP,
                                                                          resultPP
                                                                        ) => {
                                                                          if (
                                                                            errPP
                                                                          )
                                                                            console.log(
                                                                              errPP
                                                                            );
                                                                          else {
                                                                            db.query(
                                                                              `insert into main_admin_db.coupon_used_by set ?`,
                                                                              [
                                                                                couponInsert,
                                                                              ],
                                                                              (
                                                                                errC,
                                                                                resultC
                                                                              ) => {
                                                                                if (
                                                                                  errC
                                                                                )
                                                                                  console.log(
                                                                                    errC,
                                                                                    " : error while inserting coupon data in coupon used table."
                                                                                  );
                                                                                else {
                                                                                  db.query(
                                                                                    "SELECT * FROM main_admin_db.coupon_table where coupon_id = ?",
                                                                                    [
                                                                                      coupon_no,
                                                                                    ],
                                                                                    (
                                                                                      err2X,
                                                                                      result2X
                                                                                    ) => {
                                                                                      if (
                                                                                        err2X
                                                                                      )
                                                                                        console.log(
                                                                                          err2X
                                                                                        );
                                                                                      else {
                                                                                        let coupon_used =
                                                                                          result2X[0]
                                                                                            .coupon_used;

                                                                                        console.log(
                                                                                          coupon_used
                                                                                        );
                                                                                        let used =
                                                                                          coupon_used +
                                                                                          1;
                                                                                        db.query(
                                                                                          "UPDATE main_admin_db.coupon_table SET coupon_used = ? where coupon_id = ?",
                                                                                          [
                                                                                            used,
                                                                                            coupon_no,
                                                                                          ],
                                                                                          (
                                                                                            err3X,
                                                                                            result4
                                                                                          ) => {
                                                                                            if (
                                                                                              err3X
                                                                                            )
                                                                                              console.log(
                                                                                                err3X
                                                                                              );
                                                                                            else {
                                                                                              db.query(
                                                                                                "SELECT * FROM main_admin_db.coupon_table where coupon_id = ?",
                                                                                                [
                                                                                                  coupon_no,
                                                                                                ],
                                                                                                (
                                                                                                  err4,
                                                                                                  result4X
                                                                                                ) => {
                                                                                                  if (
                                                                                                    err4
                                                                                                  )
                                                                                                    console.log(
                                                                                                      err4
                                                                                                    );
                                                                                                  else {
                                                                                                    let uses =
                                                                                                      result4X[0]
                                                                                                        .uses;
                                                                                                    let used_coupon =
                                                                                                      result4X[0]
                                                                                                        .coupon_used;

                                                                                                    let remain =
                                                                                                      uses -
                                                                                                      used_coupon;
                                                                                                    db.query(
                                                                                                      "UPDATE main_admin_db.coupon_table SET uses_remain = ? where coupon_id = ?",
                                                                                                      [
                                                                                                        remain,
                                                                                                        coupon_no,
                                                                                                      ],
                                                                                                      (
                                                                                                        err5X,
                                                                                                        result5
                                                                                                      ) => {
                                                                                                        if (
                                                                                                          err5X
                                                                                                        )
                                                                                                          console.log(
                                                                                                            err5X
                                                                                                          );
                                                                                                        else {
                                                                                                          res
                                                                                                            .status(
                                                                                                              200
                                                                                                            )
                                                                                                            .send(
                                                                                                              {
                                                                                                                success: true,
                                                                                                              }
                                                                                                            );
                                                                                                        }
                                                                                                      }
                                                                                                    );
                                                                                                  }
                                                                                                }
                                                                                              );
                                                                                            }
                                                                                          }
                                                                                        );
                                                                                      }
                                                                                    }
                                                                                  );
                                                                                }
                                                                              }
                                                                            );
                                                                          }
                                                                        }
                                                                      );
                                                                    }
                                                                  });
                                                            }
                                                          }
                                                        );
                                                      }
                                                    }
                                                  );
                                                }
                                              }
                                            );
                                          }
                                        }
                                      }
                                    );
                                  }
                                }
                              );
                            }
                          }
                        }
                      );
                    }
                  }
                );
              }
            }
          }
        );
      }
    }
  );
});
// invoice
app.put("/api/v1/send/offline/invoice/myveda", async function (req, res) {
  const {
    dataUri,
    mail,
    address,
    name,
    number,
    country,
    invoice_num,
    ip_address,
    formData,
    course_id,
    course_fee,
    service,
    hsn_code,
    appliedTax,
    taxAmount,
    data,
    amount,
    remain_amt,
    dis_per,
    pay_mode,
    final_amt,
    dis_value,
    amt_after_dis,
    order_id,
    inv_incl_tax_amt,
    serviceRow,
    tax_applicability,
  } = req.body;

  const mrp = course_fee;
  var date = new Date(); // Now
  date.setDate(date.getDate() + 30); // Set now + 30 days as the new date

  const buffer = Buffer.from(dataUri.split(",")[1], "base64");
  // var today = new Date();
  // var takeDate = today.setDate(today.getDate() + 30);
  var dd = String(date.getDate()).padStart(2, "0");
  var mm = String(date.getMonth()).padStart(2, "0"); //January is 0!
  var yyyy = date.getFullYear();

  const takeDate = yyyy + "-" + mm + "-" + dd;

  var myDate = new Date();
  var hours = myDate.getHours();
  var minutes = myDate.getMinutes();
  var ampm = hours >= 12 ? "pm" : "am";
  hours = hours % 12;
  hours = hours ? hours : 12; // the hour '0' should be '12'
  minutes = minutes < 10 ? "0" + minutes : minutes;
  var time1 = hours + ":" + minutes + " " + ampm;
  const file_name_ = formData.payment_type.toLowerCase().includes("part")
    ? `part_payment_${invoice_num.replace("/", "-")}_${name}.pdf`
    : `${mail}.pdf`;

  db.query(
    "SELECT * FROM main_admin_db.myveda_indi_cust_ids where email = ?",
    [mail],
    (err11, result11) => {
      if (err11) console.log(err11);
      else {
        let cust_id = result11[0].cust_id;

        db.query(
          "SELECT * FROM `main_admin_db`.tax_invoice_order_myvedait where invoice_no = ? and billing_email = ?",
          [invoice_num, mail],
          (errIn, resultIn) => {
            if (errIn) console.log(errIn);
            else {
              if (resultIn.length === 0) {
                db.query(
                  "select course_ttl,standard from `myveda-db`.add_courses where course_id = ?",
                  [course_id],
                  (errX1, resultX1) => {
                    if (errX1) console.log(errX1);
                    else {
                      const { course_ttl, standard } = resultX1[0];
                      db.query(
                        "update `myveda-db`.user_course_map_table_la set course = ?, iso_std = ?, course_id = ? where cust_id=?",
                        [course_ttl, standard, course_id, cust_id],
                        (errX2, resultX2) => {
                          if (errX2) console.log(errX2);
                          else {
                            db.query(
                              `insert into \`main_admin_db\`.tax_invoice_order_myvedait (
                                service_name,
                                service_id,
                                order_id,
                                order_date,
                                cust_id,
                                course_id,
                                invoice_no,
                                inv_date,
                                billing_name,
                                billing_tel,
                                billing_address,
                                billing_email,
                                services,
                                mrp_amount,
                                inv_amount,
                                inv_incl_tax_amount,
                                payment_status,
                                payment_date_time,
                                cust_gstin,
                                txn_details,
                                payment_remark,
                                payment_mode,
                                invoice_gen_type,
                                dis_percent,
                                dis_amount,
                                discounted_amount,
                                tax_amount,
                                tax_percent,
                                hsn_sac,
                                remain_amount,
                                ccav_trans_date,
                                bank_name,
                                ifsc_code,
                                cheque_no,
                                ccav_card_name,
                                ccav_tracking_id,
                                payment_type,
                                file_name,
                                tax_applicability
                              ) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`,
                              [
                                serviceRow.category_title,
                                serviceRow.id,
                                order_id,
                                takeDate,
                                cust_id,
                                course_id,
                                invoice_num,
                                takeDate,
                                name,
                                number,
                                address,
                                mail,
                                service,
                                mrp,
                                amount,
                                inv_incl_tax_amt,
                                formData.invoiceType,
                                takeDate,
                                data?.gstin,
                                "",
                                formData.payment_mode_remark,
                                pay_mode,
                                "Offline",
                                dis_per,
                                dis_value,
                                amt_after_dis,
                                taxAmount,
                                appliedTax,
                                hsn_code,
                                remain_amt,
                                formData.trans_date,
                                formData.bank_name,
                                formData.ifsc_code,
                                formData.cheque_no,
                                formData.payment_method,
                                formData.trans_id,
                                formData.payment_type + " Payment",
                                file_name_,
                                tax_applicability,
                              ],
                              (errIn1, resultIn1) => {
                                if (errIn1) console.log(errIn1);
                                else {
                                  db.query(
                                    "SELECT * FROM `myveda-db`.comp_cust_req_db WHERE cust_id = ?",
                                    [data.cust_id],
                                    (err, result) => {
                                      if (err) console.log(err);
                                      else {
                                        if (result.length === 0) {
                                          db.query(
                                            "INSERT into `myveda-db`.comp_cust_req_db (cust_id,companyName,spocName,spocEmail,spocContact,country,status,user_limit_allowed,user_limit_remain,registered_user,end_date,design_value) values(?,?,?,?,?,?,?,?,?,?,?,?)",
                                            [
                                              data.cust_id,
                                              name,
                                              name,
                                              mail,
                                              number,
                                              country,
                                              "Active",
                                              "1",
                                              "1",
                                              "0",
                                              takeDate,
                                              1,
                                            ],
                                            (err1, result1) => {
                                              if (err1) console.log(err1);
                                              else {
                                                db.query(
                                                  "SELECT * FROM `myveda-db`.user_course_map_table_la where uid = ? and cust_id = ?",
                                                  [mail, cust_id],
                                                  (errM, resultM) => {
                                                    if (errM) console.log(errM);
                                                    else {
                                                      db.query(
                                                        "SELECT * FROM main_admin_db.myveda_indi_cust_ids where email = ?",
                                                        [mail],
                                                        async (
                                                          errInv,
                                                          resultInv
                                                        ) => {
                                                          if (errInv)
                                                            console.log(errInv);
                                                          else {
                                                            fs.writeFileSync(
                                                              `./invoices/${file_name_}`,
                                                              buffer
                                                            );

                                                            // "insert into `main_admin_db`.tax_invoice_order_myvedait (invoice_no,bill_to,mobile,uid,services,amount,incl_tax_amount,payment_status,payment_date_time) values(?,?,?,?,?,?,?,?,?)",

                                                            db.query(
                                                              "SELECT * FROM `myveda-db`.email_temp_payout_la",
                                                              (
                                                                errPay,
                                                                resultPay
                                                              ) => {
                                                                if (errPay)
                                                                  console.log(
                                                                    errPay
                                                                  );
                                                                else {
                                                                  // node mailer
                                                                  const output = `
            
                                                                          <h3>Dear ${name} </h3>
                                                                          <p>${resultPay[0].message}.</p>
            
                                                                          <p><b>Customer ID :</b> ${data.cust_id}</p>
            
                                                                          <p><b>URL</b> : <a href='${resultPay[0].url}'>${resultPay[0].url}</a></p>
                                                                          <p>
                                                                          Please find attached invoice for your records.</p>
            
                                                                          <p>${resultPay[0].caution}.</p>
            
                                                                          <p>Thanks & Best Regards</p>
                                                                          <p>${resultPay[0].signature}</p>
            
                                                                          `;

                                                                  db.query(
                                                                    "SELECT * FROM `myveda-db`.email_srv",
                                                                    (
                                                                      err,
                                                                      result
                                                                    ) => {
                                                                      if (err) {
                                                                        console.log(
                                                                          err
                                                                        );
                                                                      } else {
                                                                        console.log(
                                                                          result
                                                                        );
                                                                        let host1 =
                                                                          result[0]
                                                                            ?.host;
                                                                        let port1 =
                                                                          result[0]
                                                                            ?.port;
                                                                        let user1 =
                                                                          result[0]
                                                                            ?.auth_uid;
                                                                        let pass1 =
                                                                          result[0]
                                                                            ?.auth_pass;
                                                                        let fromEmail =
                                                                          result[0]
                                                                            ?.from_email;
                                                                        let bccEmail =
                                                                          result[0]
                                                                            ?.bcc_email;
                                                                        let transporter =
                                                                          nodemailer.createTransport(
                                                                            {
                                                                              host: host1,
                                                                              port: port1,
                                                                              secure: true, // true for 465, false for other p orts
                                                                              auth: {
                                                                                user: user1, // generated ethereal user
                                                                                pass: pass1, // generated ethereal password
                                                                              },
                                                                            }
                                                                          );

                                                                        // send mail with defined transport object
                                                                        let info =
                                                                          transporter
                                                                            .sendMail(
                                                                              {
                                                                                from: `"" ${fromEmail}`, // sender address
                                                                                to: mail, // list of receivers
                                                                                subject:
                                                                                  resultPay[0]
                                                                                    .subject, // Subject line
                                                                                bcc: bccEmail,
                                                                                html: output, // html body
                                                                                attachments:
                                                                                  [
                                                                                    {
                                                                                      filename:
                                                                                        "invoice.pdf",
                                                                                      content:
                                                                                        fs.createReadStream(
                                                                                          `./invoices/${file_name_}`,
                                                                                          buffer
                                                                                        ),
                                                                                    },
                                                                                  ],
                                                                              }
                                                                            )
                                                                            .then(
                                                                              () => {
                                                                                res.send(
                                                                                  {
                                                                                    success: true,
                                                                                  }
                                                                                );
                                                                              }
                                                                            );
                                                                      }
                                                                    }
                                                                  );
                                                                }
                                                              }
                                                            );
                                                          }
                                                        }
                                                      );
                                                    }
                                                  }
                                                );
                                              }
                                            }
                                          );
                                        } else {
                                          db.query(
                                            "SELECT * FROM `myveda-db`.user_course_map_table_la where uid = ? and cust_id = ?",
                                            [mail, cust_id],
                                            (errM, resultM) => {
                                              if (errM) console.log(errM);
                                              else {
                                                db.query(
                                                  "SELECT * FROM main_admin_db.myveda_indi_cust_ids where email = ?",
                                                  [mail],
                                                  async (errInv, resultInv) => {
                                                    if (errInv)
                                                      console.log(errInv);
                                                    else {
                                                      fs.writeFileSync(
                                                        `./invoices/${file_name_}`,
                                                        buffer
                                                      );

                                                      // "insert into `main_admin_db`.tax_invoice_order_myvedait (invoice_no,bill_to,mobile,uid,services,amount,incl_tax_amount,payment_status,payment_date_time) values(?,?,?,?,?,?,?,?,?)",

                                                      db.query(
                                                        "SELECT * FROM `myveda-db`.email_temp_payout_la",
                                                        (errPay, resultPay) => {
                                                          if (errPay)
                                                            console.log(errPay);
                                                          else {
                                                            // node mailer
                                                            const output = `
            
                                                                    <h3>Dear ${name} </h3>
                                                                    <p>${resultPay[0].message}.</p>
            
                                                                    <p><b>Customer ID :</b> ${data.cust_id}</p>
            
                                                                    <p><b>URL</b> : <a href='${resultPay[0].url}'>${resultPay[0].url}</a></p>
                                                                    <p>
                                                                    Please find attached invoice for your records.</p>
            
                                                                    <p>${resultPay[0].caution}.</p>
            
                                                                    <p>Thanks & Best Regards</p>
                                                                    <p>${resultPay[0].signature}</p>
            
                                                                    `;

                                                            db.query(
                                                              "SELECT * FROM `myveda-db`.email_srv",
                                                              (err, result) => {
                                                                if (err) {
                                                                  console.log(
                                                                    err
                                                                  );
                                                                } else {
                                                                  console.log(
                                                                    result
                                                                  );
                                                                  let host1 =
                                                                    result[0]
                                                                      ?.host;
                                                                  let port1 =
                                                                    result[0]
                                                                      ?.port;
                                                                  let user1 =
                                                                    result[0]
                                                                      ?.auth_uid;
                                                                  let pass1 =
                                                                    result[0]
                                                                      ?.auth_pass;
                                                                  let fromEmail =
                                                                    result[0]
                                                                      ?.from_email;
                                                                  let bccEmail =
                                                                    result[0]
                                                                      ?.bcc_email;
                                                                  let transporter =
                                                                    nodemailer.createTransport(
                                                                      {
                                                                        host: host1,
                                                                        port: port1,
                                                                        secure: true, // true for 465, false for other p orts
                                                                        auth: {
                                                                          user: user1, // generated ethereal user
                                                                          pass: pass1, // generated ethereal password
                                                                        },
                                                                      }
                                                                    );

                                                                  // send mail with defined transport object
                                                                  let info =
                                                                    transporter
                                                                      .sendMail(
                                                                        {
                                                                          from: `"" ${fromEmail}`, // sender address
                                                                          to: mail, // list of receivers
                                                                          subject:
                                                                            resultPay[0]
                                                                              .subject, // Subject line
                                                                          bcc: bccEmail,
                                                                          html: output, // html body
                                                                          attachments:
                                                                            [
                                                                              {
                                                                                filename:
                                                                                  "invoice.pdf",
                                                                                content:
                                                                                  fs.createReadStream(
                                                                                    `./invoices/${file_name_}`,
                                                                                    buffer
                                                                                  ),
                                                                              },
                                                                            ],
                                                                        }
                                                                      )
                                                                      .then(
                                                                        () => {
                                                                          res.send(
                                                                            {
                                                                              success: true,
                                                                            }
                                                                          );
                                                                        }
                                                                      );
                                                                }
                                                              }
                                                            );
                                                          }
                                                        }
                                                      );
                                                    }
                                                  }
                                                );
                                              }
                                            }
                                          );
                                        }
                                      }
                                    }
                                  );
                                }
                              }
                            );
                          }
                        }
                      );
                    }
                  }
                );
              }
            }
          }
        );
      }
    }
  );
});
// myhrms
// invoice
app.put("/api/v1/send/offline/invoice/myhrms", async function (req, res) {
  const {
    dataUri,
    mail,
    address,
    name,
    number,
    country,
    invoice_num,
    ip_address,
    formData,
    course_id,
    course_fee,
    service,
    hsn_code,
    appliedTax,
    taxAmount,
    data,
    amount,
    remain_amt,
    dis_per,
    pay_mode,
    final_amt,
    dis_value,
    amt_after_dis,
    order_id,
    serviceRow,
    price,
    duration,
    expDate,
    inv_incl_tax_amt,
    tax_applicability,
  } = req.body;

  const mrp = price;
  var date = new Date(); // Now
  date.setDate(date.getDate() + 30); // Set now + 30 days as the new date

  const pdf = Buffer.from(dataUri.split(",")[1], "base64");
  const file_name_ = formData.payment_type.toLowerCase().includes("part")
    ? `part_payment_${invoice_num.replace("/", "-")}_${name}.pdf`
    : `${mail}_${name}.pdf`;

  fs.writeFileSync(`./myhrms_invoices/${file_name_}`, pdf);
  // var today = new Date();
  // var takeDate = today.setDate(today.getDate() + 30);
  var dd = String(date.getDate()).padStart(2, "0");
  var mm = String(date.getMonth()).padStart(2, "0"); //January is 0!
  var yyyy = date.getFullYear();

  const takeDate = yyyy + "-" + mm + "-" + dd;

  var myDate = new Date();
  var hours = myDate.getHours();
  var minutes = myDate.getMinutes();
  var ampm = hours >= 12 ? "pm" : "am";
  hours = hours % 12;
  hours = hours ? hours : 12; // the hour '0' should be '12'
  minutes = minutes < 10 ? "0" + minutes : minutes;
  var time1 = hours + ":" + minutes + " " + ampm;

  db.query(
    "SELECT * FROM main_admin_db.myhrms_indi_cust_ids where mail = ?",
    [mail],
    (err11, result11) => {
      if (err11) console.log(err11);
      else {
        db.query(
          "SELECT * FROM `main_admin_db`.tax_invoice_order_myvedait where invoice_no = ? and billing_email = ? and service_id = ?",
          [invoice_num, mail, serviceRow.id],
          (errIn, resultIn) => {
            if (errIn) console.log(errIn);
            else {
              db.query(
                `insert into \`main_admin_db\`.tax_invoice_order_myvedait (
                service_name,
                service_id,
                  order_id,
                  order_date,
                  cust_id,
                  invoice_no,
                  inv_date,
                  billing_name,
                  billing_tel,
                  billing_address,
                  billing_email,
                  services,
                  mrp_amount,
                  inv_amount,
                  inv_incl_tax_amount,
                  payment_status,
                  payment_date_time,
                  cust_gstin,
                  txn_details,
                  payment_remark,
                  payment_mode,
                  invoice_gen_type,
                  dis_percent,
                  dis_amount,
                  discounted_amount,
                  tax_amount,
                  tax_percent,
                  hsn_sac,
                  remain_amount,
                  ccav_trans_date,
                  bank_name,
                  ifsc_code,
                  cheque_no,
                  ccav_card_name,
                  ccav_tracking_id,
                  payment_type,
                  file_name,
                  due_date,
                  duration,
                  place_of_supply,
                  sales_type,
                  tax_applicability
                ) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`,
                [
                  serviceRow.category_title,
                  serviceRow.id,
                  order_id,
                  takeDate,
                  data?.cust_id,
                  invoice_num,
                  takeDate,
                  name,
                  number,
                  address,
                  mail,
                  service,
                  mrp,
                  amount,
                  inv_incl_tax_amt,
                  formData.invoiceType,
                  takeDate,
                  data?.gstin,
                  "",
                  formData.payment_mode_remark,
                  pay_mode,
                  "Offline",
                  dis_per,
                  dis_value,
                  amt_after_dis,
                  taxAmount,
                  appliedTax,
                  hsn_code,
                  remain_amt,
                  formData.trans_date,
                  formData.bank_name,
                  formData.ifsc_code,
                  formData.cheque_no,
                  formData.payment_method,
                  formData.trans_id,
                  formData.payment_type + " Payment",
                  file_name_,
                  expDate,
                  duration,
                  formData.place_of_supply,
                  formData.sales_type,
                  tax_applicability,
                ],
                (errIn1, resultIn1) => {
                  if (errIn1) console.log(errIn1);
                  else {
                    db.query(
                      "SELECT * FROM main_admin_db.myhrms_indi_cust_ids where ccav_order_status = ?",
                      ["Success"],
                      (errP, resultP) => {
                        if (errP) console.log(errP);
                        else {
                          let domain_id =
                            data?.cust_id.toLowerCase() + ".myhrms";

                          domain_id.toLowerCase();
                          db.query(
                            "SELECT * FROM main_admin_db.myhrms_indi_cust_ids where order_id  = ? and mail = ?",
                            [order_id, mail],
                            (err, result) => {
                              if (err) console.log(err);
                              else {
                                if (!result.length) {
                                  db.query(
                                    `insert into main_admin_db.myhrms_indi_cust_ids(cust_id,
                                mail,
                                country,
                                state,
                                city,
                                pincode,
                                address,
                                number,
                                start_date,
                                end_date,
                                name,
                                order_id,
                                ccav_order_status,duration,tax,hsn_hac,amount_incl_tax,tax_amount,amount,comp_name,domain_id)values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`,
                                    [
                                      data?.cust_id,
                                      mail,
                                      data?.county,
                                      data?.state,
                                      data?.city,
                                      data?.pincode,
                                      data?.address,
                                      data?.number,
                                      takeDate,
                                      expDate,
                                      name,
                                      order_id,
                                      "Success",
                                      duration,

                                      appliedTax,
                                      hsn_code,
                                      amount + taxAmount,
                                      taxAmount,
                                      amount,
                                      "",
                                      domain_id,
                                    ],

                                    (err2, result2) => {
                                      if (err2) console.log(err2);
                                      else {
                                        db.query(
                                          "SELECT * FROM main_admin_db.email_temp_myhrms_order_request",
                                          (errTemp, resTemp) => {
                                            if (errTemp) throw errTemp;
                                            else {
                                              const {
                                                subject,
                                                url,
                                                message,
                                                caution,
                                                signature,
                                              } = resTemp[0];
                                              const output = `
                                        <h3>Dear ${name} </h3>
                                        <p>${message}.</p>
                                        <p><b>URL</b> : <a href="${url}" target="_blank">${url}</a></p>
                                        <p><b>Customer ID :</b> ${data.cust_id}</p>
                                        <p>${caution}</p>
                                        <p>${signature}</p>
                                       `;
                                              db.query(
                                                "SELECT * FROM `myveda-db`.email_srv",
                                                (err, result) => {
                                                  if (err) {
                                                    console.log(err);
                                                  } else {
                                                    console.log(result);
                                                    let host1 = result[0]?.host;
                                                    let port1 = result[0]?.port;
                                                    let user1 =
                                                      result[0]?.auth_uid;
                                                    let pass1 =
                                                      result[0]?.auth_pass;
                                                    let fromEmail =
                                                      result[0]?.from_email;
                                                    let bccEmail =
                                                      result[0]?.bcc_email;
                                                    let transporter =
                                                      nodemailer.createTransport(
                                                        {
                                                          host: host1,
                                                          port: port1,
                                                          secure: true, // true for 465, false for other p orts
                                                          auth: {
                                                            user: user1, // generated ethereal user
                                                            pass: pass1, // generated ethereal password
                                                          },
                                                        }
                                                      );

                                                    // send mail with defined transport object
                                                    let info = transporter
                                                      .sendMail({
                                                        from: `"" ${fromEmail}`, // sender address
                                                        to: mail, // list of receivers
                                                        subject: subject, // Subject line
                                                        bcc: bccEmail,
                                                        html: output, // html body
                                                        attachments: [
                                                          {
                                                            filename:
                                                              "invoice.pdf",
                                                            content:
                                                              fs.createReadStream(
                                                                `./myhrms_invoices/${file_name_}`,
                                                                pdf
                                                              ),
                                                          },
                                                        ],
                                                      })
                                                      .then(() => {
                                                        res.status(200).json({
                                                          success: true,
                                                        });
                                                      });
                                                  }
                                                }
                                              );
                                            }
                                          }
                                        );
                                      }
                                    }
                                  );
                                }
                              }
                            }
                          );
                        }
                      }
                    );
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});
// myshop
app.put("/api/v1/send/offline/invoice/myshop", async function (req, res) {
  const {
    dataUri,
    mail,
    address,
    name,
    number,
    country,
    invoice_num,
    ip_address,
    formData,
    course_id,
    course_fee,
    service,
    hsn_code,
    appliedTax,
    taxAmount,
    data,
    amount,
    remain_amt,
    dis_per,
    pay_mode,
    final_amt,
    dis_value,
    amt_after_dis,
    order_id,
    serviceRow,
    price,
    duration,
    expDate,
    inv_incl_tax_amt,
    tax_applicability,
  } = req.body;

  const mrp = price;
  var date = new Date(); // Now
  date.setDate(date.getDate() + 30); // Set now + 30 days as the new date

  const pdf = Buffer.from(dataUri.split(",")[1], "base64");
  const file_name_ = formData.payment_type.toLowerCase().includes("part")
    ? `part_payment_${invoice_num.replace("/", "-")}_${name}.pdf`
    : `${mail}_${name}.pdf`;

  fs.writeFileSync(`./myshop_invoices/${file_name_}`, pdf);

  // var today = new Date();
  // var takeDate = today.setDate(today.getDate() + 30);
  var dd = String(date.getDate()).padStart(2, "0");
  var mm = String(date.getMonth()).padStart(2, "0"); //January is 0!
  var yyyy = date.getFullYear();

  const takeDate = yyyy + "-" + mm + "-" + dd;

  var myDate = new Date();
  var hours = myDate.getHours();
  var minutes = myDate.getMinutes();
  var ampm = hours >= 12 ? "pm" : "am";
  hours = hours % 12;
  hours = hours ? hours : 12; // the hour '0' should be '12'
  minutes = minutes < 10 ? "0" + minutes : minutes;
  var time1 = hours + ":" + minutes + " " + ampm;

  db.query(
    "SELECT * FROM main_admin_db.myshop_indi_cust_ids where mail = ?",
    [mail],
    (err11, result11) => {
      if (err11) console.log(err11);
      else {
        db.query(
          "SELECT * FROM `main_admin_db`.tax_invoice_order_myvedait where invoice_no = ? and billing_email = ? and service_id = ?",
          [invoice_num, mail, serviceRow.id],
          (errIn, resultIn) => {
            if (errIn) console.log(errIn);
            else {
              db.query(
                `insert into \`main_admin_db\`.tax_invoice_order_myvedait (
                service_name,
                service_id,
                  order_id,
                  order_date,
                  cust_id,
                  invoice_no,
                  inv_date,
                  billing_name,
                  billing_tel,
                  billing_address,
                  billing_email,
                  services,
                  mrp_amount,
                  inv_amount,
                  inv_incl_tax_amount,
                  payment_status,
                  payment_date_time,
                  cust_gstin,
                  txn_details,
                  payment_remark,
                  payment_mode,
                  invoice_gen_type,
                  dis_percent,
                  dis_amount,
                  discounted_amount,
                  tax_amount,
                  tax_percent,
                  hsn_sac,
                  remain_amount,
                  ccav_trans_date,
                  bank_name,
                  ifsc_code,
                  cheque_no,
                  ccav_card_name,
                  ccav_tracking_id,
                  payment_type,
                  file_name,
                  due_date,
                  duration,
                  place_of_supply,
                  sales_type,
                  tax_applicability
                ) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`,
                [
                  serviceRow.category_title,
                  serviceRow.id,
                  order_id,
                  takeDate,
                  data?.cust_id,
                  invoice_num,
                  takeDate,
                  name,
                  number,
                  address,
                  mail,
                  service,
                  mrp,
                  amount,
                  inv_incl_tax_amt,
                  formData.invoiceType,
                  takeDate,
                  data?.gstin,
                  "",
                  formData.payment_mode_remark,
                  pay_mode,
                  "Offline",
                  dis_per,
                  dis_value,
                  amt_after_dis,
                  taxAmount,
                  appliedTax,
                  hsn_code,
                  remain_amt,
                  formData.trans_date,
                  formData.bank_name,
                  formData.ifsc_code,
                  formData.cheque_no,
                  formData.payment_method,
                  formData.trans_id,
                  formData.payment_type + " Payment",
                  file_name_,
                  expDate,
                  duration,
                  formData.place_of_supply,
                  formData.sales_type,
                  tax_applicability,
                ],
                (errIn1, resultIn1) => {
                  if (errIn1) console.log(errIn1);
                  else {
                    db.query(
                      "SELECT * FROM main_admin_db.myshop_indi_cust_ids where ccav_order_status = ?",
                      ["Success"],
                      (errP, resultP) => {
                        let domain_id = data?.cust_id.toLowerCase() + ".myshop";

                        domain_id.toLowerCase();
                        db.query(
                          "SELECT * FROM main_admin_db.myshop_indi_cust_ids where mail = ? and cust_id = ?",
                          [mail, data?.cust_id],
                          (err, result) => {
                            if (err) console.log(err);
                            else {
                              if (result.length) {
                                const insData = {
                                  cust_id: data?.cust_id,
                                  mail,
                                  country: data?.country,
                                  state: data?.state,
                                  city: data?.city,
                                  pincode: data?.pincode,
                                  address: data?.address,
                                  number: data?.number,
                                  start_date: takeDate,
                                  end_date: expDate,
                                  name,
                                  order_id,
                                  ccav_order_status: "Success",
                                  duration,
                                  tax: appliedTax,
                                  hsn_hac: hsn_code,
                                  amount_incl_tax: amount + taxAmount,
                                  tax_amount: taxAmount,
                                  amount,
                                  domain_id,
                                };
                                db.query(
                                  `update main_admin_db.myshop_indi_cust_ids set ? where mail = ? and cust_id = ? `,
                                  [insData, mail, data?.cust_id],

                                  (err2, result2) => {
                                    if (err2) console.log(err2);
                                    else {
                                      db.query(
                                        "SELECT * FROM main_admin_db.email_temp_myshop_order_request",
                                        (errTemp, resTemp) => {
                                          if (errTemp) throw errTemp;
                                          else {
                                            const {
                                              subject,
                                              url,
                                              message,
                                              caution,
                                              signature,
                                            } = resTemp[0];
                                            const output = `
                                      <h3>Dear ${name} </h3>
                                      <p>${message}.</p>
                                      <p><b>URL</b> : <a href="${url}" target="_blank">${url}</a></p>
                                      <p><b>Customer ID :</b> ${data.cust_id}</p>
                                      <p>${caution}</p>
                                      <p>${signature}</p>
                                     `;
                                            db.query(
                                              "SELECT * FROM `myveda-db`.email_srv",
                                              (err, result) => {
                                                if (err) {
                                                  console.log(err);
                                                } else {
                                                  console.log(result);
                                                  let host1 = result[0]?.host;
                                                  let port1 = result[0]?.port;
                                                  let user1 =
                                                    result[0]?.auth_uid;
                                                  let pass1 =
                                                    result[0]?.auth_pass;
                                                  let fromEmail =
                                                    result[0]?.from_email;
                                                  let bccEmail =
                                                    result[0]?.bcc_email;
                                                  let transporter =
                                                    nodemailer.createTransport({
                                                      host: host1,
                                                      port: port1,
                                                      secure: true, // true for 465, false for other p orts
                                                      auth: {
                                                        user: user1, // generated ethereal user
                                                        pass: pass1, // generated ethereal password
                                                      },
                                                    });

                                                  // send mail with defined transport object
                                                  let info = transporter
                                                    .sendMail({
                                                      from: `"" ${fromEmail}`, // sender address
                                                      to: mail, // list of receivers
                                                      subject: subject, // Subject line
                                                      bcc: bccEmail,
                                                      html: output, // html body
                                                      attachments: [
                                                        {
                                                          filename:
                                                            "invoice.pdf",
                                                          content:
                                                            fs.createReadStream(
                                                              `./myshop_invoices/${file_name_}`,
                                                              pdf
                                                            ),
                                                        },
                                                      ],
                                                    })
                                                    .then(() => {
                                                      res.status(200).json({
                                                        success: true,
                                                      });
                                                    });
                                                }
                                              }
                                            );
                                          }
                                        }
                                      );
                                    }
                                  }
                                );
                              }
                            }
                          }
                        );
                      }
                    );
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});
// praxis
app.put("/api/v1/send/offline/invoice/praxis", async function (req, res) {
  const {
    dataUri,
    mail,
    address,
    name,
    number,
    country,
    invoice_num,
    ip_address,
    formData,
    course_id,
    course_fee,
    service,
    hsn_code,
    appliedTax,
    taxAmount,
    data,
    amount,
    remain_amt,
    dis_per,
    pay_mode,
    final_amt,
    dis_value,
    amt_after_dis,
    order_id,
    serviceRow,
    price,
    duration,
    expDate,
    inv_incl_tax_amt,
    tax_applicability,
  } = req.body;

  const mrp = price;
  var date = new Date(); // Now
  date.setDate(date.getDate() + 30); // Set now + 30 days as the new date

  const pdf = Buffer.from(dataUri.split(",")[1], "base64");
  const file_name_ = formData.payment_type.toLowerCase().includes("part")
    ? `part_payment_${invoice_num.replace("/", "-")}_${name}.pdf`
    : `${mail}_${name}.pdf`;

  fs.writeFileSync(`./praxis_invoices/${file_name_}`, pdf);
  // var today = new Date();
  // var takeDate = today.setDate(today.getDate() + 30);
  var dd = String(date.getDate()).padStart(2, "0");
  var mm = String(date.getMonth()).padStart(2, "0"); //January is 0!
  var yyyy = date.getFullYear();

  const takeDate = yyyy + "-" + mm + "-" + dd;

  var myDate = new Date();
  var hours = myDate.getHours();
  var minutes = myDate.getMinutes();
  var ampm = hours >= 12 ? "pm" : "am";
  hours = hours % 12;
  hours = hours ? hours : 12; // the hour '0' should be '12'
  minutes = minutes < 10 ? "0" + minutes : minutes;
  var time1 = hours + ":" + minutes + " " + ampm;

  db.query(
    "SELECT * FROM main_admin_db.praxis_indi_cust_ids where mail = ?",
    [mail],
    (err11, result11) => {
      if (err11) console.log(err11);
      else {
        db.query(
          "SELECT * FROM `main_admin_db`.tax_invoice_order_myvedait where invoice_no = ? and billing_email = ? and service_id = ?",
          [invoice_num, mail, serviceRow.id],
          (errIn, resultIn) => {
            if (errIn) console.log(errIn);
            else {
              db.query(
                `insert into \`main_admin_db\`.tax_invoice_order_myvedait (
                service_name,
                service_id,
                  order_id,
                  order_date,
                  cust_id,
                  invoice_no,
                  inv_date,
                  billing_name,
                  billing_tel,
                  billing_address,
                  billing_email,
                  services,
                  mrp_amount,
                  inv_amount,
                  inv_incl_tax_amount,
                  payment_status,
                  payment_date_time,
                  cust_gstin,
                  txn_details,
                  payment_remark,
                  payment_mode,
                  invoice_gen_type,
                  dis_percent,
                  dis_amount,
                  discounted_amount,
                  tax_amount,
                  tax_percent,
                  hsn_sac,
                  remain_amount,
                  ccav_trans_date,
                  bank_name,
                  ifsc_code,
                  cheque_no,
                  ccav_card_name,
                  ccav_tracking_id,
                  payment_type,
                  file_name,
                  due_date,
                  duration,
                  place_of_supply,
                  sales_type,
                  tax_applicability
                ) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`,
                [
                  serviceRow.category_title,
                  serviceRow.id,
                  order_id,
                  takeDate,
                  data?.cust_id,
                  invoice_num,
                  takeDate,
                  name,
                  number,
                  address,
                  mail,
                  service,
                  mrp,
                  amount,
                  inv_incl_tax_amt,
                  formData.invoiceType,
                  takeDate,
                  data?.gstin,
                  "",
                  formData.payment_mode_remark,
                  pay_mode,
                  "Offline",
                  dis_per,
                  dis_value,
                  amt_after_dis,
                  taxAmount,
                  appliedTax,
                  hsn_code,
                  remain_amt,
                  formData.trans_date,
                  formData.bank_name,
                  formData.ifsc_code,
                  formData.cheque_no,
                  formData.payment_method,
                  formData.trans_id,
                  formData.payment_type + " Payment",
                  file_name_,
                  expDate,
                  duration,
                  formData.place_of_supply,
                  formData.sales_type,
                  tax_applicability,
                ],
                (errIn1, resultIn1) => {
                  if (errIn1) console.log(errIn1);
                  else {
                    db.query(
                      `insert into main_admin_db.praxis_indi_cust_ids(cust_id,
                  mail,
                  country,
                  state,
                  city,
                  pincode,
                  address,
                  number,
                  start_date,
                  end_date,
                  name,
                  order_id,
                  ccav_order_status,duration,amount,amount_incl_tax,tax,hsn_hac)values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`,
                      [
                        data?.cust_id,
                        mail,
                        data?.country,
                        data?.state,
                        data?.city,
                        data?.pincode,
                        data?.address,
                        data?.number,
                        takeDate,
                        expDate,
                        name,
                        order_id,
                        "Success",
                        duration,
                        price,
                        amount + taxAmount,
                        appliedTax,
                        hsn_code,
                      ],
                      (err2, result2) => {
                        if (err2) console.log(err2);
                        else {
                          db.query(
                            "SELECT * FROM main_admin_db.email_temp_praxis_indi_cust_reg",
                            (errTemp, resTemp) => {
                              if (errTemp) throw errTemp;
                              else {
                                const {
                                  subject,
                                  url,
                                  message,
                                  caution,
                                  signature,
                                } = resTemp[0];
                                const output = `
                          <h3>Dear ${name} </h3>
                          <p>${message}.</p>
                          <p><b>URL</b> : <a href="${url}" target="_blank">${url}</a></p>
                          <p><b>Customer ID :</b> ${data.cust_id}</p>
                          <p>${caution}</p>
                          <p>${signature}</p>
                         `;
                                db.query(
                                  "SELECT * FROM `myveda-db`.email_srv",
                                  (err, result) => {
                                    if (err) {
                                      console.log(err);
                                    } else {
                                      console.log(result);
                                      let host1 = result[0]?.host;
                                      let port1 = result[0]?.port;
                                      let user1 = result[0]?.auth_uid;
                                      let pass1 = result[0]?.auth_pass;
                                      let fromEmail = result[0]?.from_email;
                                      let bccEmail = result[0]?.bcc_email;
                                      let transporter =
                                        nodemailer.createTransport({
                                          host: host1,
                                          port: port1,
                                          secure: true, // true for 465, false for other p orts
                                          auth: {
                                            user: user1, // generated ethereal user
                                            pass: pass1, // generated ethereal password
                                          },
                                        });

                                      // send mail with defined transport object
                                      let info = transporter
                                        .sendMail({
                                          from: `"" ${fromEmail}`, // sender address
                                          to: mail, // list of receivers
                                          subject: subject, // Subject line
                                          bcc: bccEmail,
                                          html: output, // html body
                                          attachments: [
                                            {
                                              filename: "invoice.pdf",
                                              content: fs.createReadStream(
                                                `./praxis_invoices/${file_name_}`,
                                                pdf
                                              ),
                                            },
                                          ],
                                        })
                                        .then(() => {
                                          res
                                            .status(200)
                                            .json({ success: true });
                                        });
                                    }
                                  }
                                );
                              }
                            }
                          );
                        }
                      }
                    );
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});

// other
app.put("/api/v1/send/offline/invoice/other", async function (req, res) {
  const {
    dataUri,
    mail,
    address,
    name,
    number,
    country,
    invoice_num,
    ip_address,
    formData,
    course_id,
    course_fee,
    service,
    hsn_code,
    appliedTax,
    taxAmount,
    data,
    amount,
    remain_amt,
    dis_per,
    pay_mode,
    final_amt,
    dis_value,
    amt_after_dis,
    order_id,
    serviceRow,
    price,
    duration,
    expDate,
    inv_incl_tax_amt,
    tax_applicability,
  } = req.body;

  const mrp = price;
  var date = new Date(); // Now
  date.setDate(date.getDate() + 30); // Set now + 30 days as the new date

  const pdf = Buffer.from(dataUri.split(",")[1], "base64");
  const file_name_ = formData.payment_type.toLowerCase().includes("part")
    ? `part_payment_${invoice_num.replace("/", "-")}_${name}.pdf`
    : `${mail}_${name}.pdf`;
  // if () {
  //   fs.writeFileSync(
  //     `./other_invoices/part_payment_${invoice_num.replace("/", "-")}_${
  //       serviceRow.id
  //     }.pdf`,
  //     pdf
  //   );
  // } else {
  //   fs.writeFileSync(`./other_invoices/${mail}_${serviceRow.id}.pdf`, pdf);
  // }

  // var today = new Date();
  // var takeDate = today.setDate(today.getDate() + 30);
  fs.writeFileSync(`./other_invoices/${file_name_}`, pdf);
  var dd = String(date.getDate()).padStart(2, "0");
  var mm = String(date.getMonth()).padStart(2, "0"); //January is 0!
  var yyyy = date.getFullYear();

  const takeDate = yyyy + "-" + mm + "-" + dd;

  var myDate = new Date();
  var hours = myDate.getHours();
  var minutes = myDate.getMinutes();
  var ampm = hours >= 12 ? "pm" : "am";
  hours = hours % 12;
  hours = hours ? hours : 12; // the hour '0' should be '12'
  minutes = minutes < 10 ? "0" + minutes : minutes;
  var time1 = hours + ":" + minutes + " " + ampm;

  db.query(
    "SELECT * FROM main_admin_db.offline_cust_reg_indi where email = ?",
    [mail],
    (err11, result11) => {
      if (err11) console.log(err11);
      else {
        db.query(
          "SELECT * FROM `main_admin_db`.tax_invoice_order_myvedait where invoice_no = ? and billing_email = ? and service_id = ?",
          [invoice_num, mail, serviceRow.id],
          (errIn, resultIn) => {
            if (errIn) console.log(errIn);
            else {
              db.query(
                `insert into \`main_admin_db\`.tax_invoice_order_myvedait (
                service_name,
                service_id,
                  order_id,
                  order_date,
                  cust_id,
                  invoice_no,
                  inv_date,
                  billing_name,
                  billing_tel,
                  billing_address,
                  billing_email,
                  services,
                  mrp_amount,
                  inv_amount,
                  inv_incl_tax_amount,
                  payment_status,
                  payment_date_time,
                  cust_gstin,
                  txn_details,
                  payment_remark,
                  payment_mode,
                  invoice_gen_type,
                  dis_percent,
                  dis_amount,
                  discounted_amount,
                  tax_amount,
                  tax_percent,
                  hsn_sac,
                  remain_amount,
                  ccav_trans_date,
                  bank_name,
                  ifsc_code,
                  cheque_no,
                  ccav_card_name,
                  ccav_tracking_id,
                  payment_type,
                  file_name,
                  place_of_supply,
                  sales_type,
                  tax_applicability
                ) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`,
                [
                  serviceRow.category_title,
                  serviceRow.id,
                  order_id,
                  takeDate,
                  data?.cust_id,
                  invoice_num,
                  takeDate,
                  name,
                  number,
                  address,
                  mail,
                  service,
                  mrp,
                  amount,
                  inv_incl_tax_amt,
                  formData.invoiceType,
                  takeDate,
                  data?.gstin,
                  "",
                  formData.payment_mode_remark,
                  pay_mode,
                  "Offline",
                  dis_per,
                  dis_value,
                  amt_after_dis,
                  taxAmount,
                  appliedTax,
                  hsn_code,
                  remain_amt,
                  formData.trans_date,
                  formData.bank_name,
                  formData.ifsc_code,
                  formData.cheque_no,
                  formData.payment_method,
                  formData.trans_id,
                  formData.payment_type + " Payment",
                  file_name_,
                  formData.place_of_supply,
                  formData.sales_type,
                  tax_applicability,
                ],
                (errIn1, resultIn1) => {
                  if (errIn1) console.log(errIn1, " : error in 21420");
                  else {
                    db.query(
                      "SELECT * FROM main_admin_db.email_temp_offline_cust_reg_indi where service_id = ?",
                      [serviceRow.id],
                      (errTemp, resTemp) => {
                        if (errTemp) throw errTemp;
                        else {
                          const { subject, url, message, caution, signature } =
                            resTemp[0];
                          const output = `
                    <h3>Dear ${name} </h3>
                    <p>${message}.</p>
                    <p><b>URL</b> : <a href="${url}" target="_blank">${url}</a></p>
                    <p><b>Customer ID :</b> ${data.cust_id}</p>
                    <p>${caution}</p>
                    <p>${signature}</p>
                   `;
                          db.query(
                            "SELECT * FROM `myveda-db`.email_srv",
                            (err, result) => {
                              if (err) {
                                console.log(err);
                              } else {
                                console.log(result);
                                let host1 = result[0]?.host;
                                let port1 = result[0]?.port;
                                let user1 = result[0]?.auth_uid;
                                let pass1 = result[0]?.auth_pass;
                                let fromEmail = result[0]?.from_email;
                                let bccEmail = result[0]?.bcc_email;
                                let transporter = nodemailer.createTransport({
                                  host: host1,
                                  port: port1,
                                  secure: true, // true for 465, false for other p orts
                                  auth: {
                                    user: user1, // generated ethereal user
                                    pass: pass1, // generated ethereal password
                                  },
                                });

                                // send mail with defined transport object
                                let info = transporter
                                  .sendMail({
                                    from: `"" ${fromEmail}`, // sender address
                                    to: mail, // list of receivers
                                    subject: subject, // Subject line
                                    bcc: bccEmail,
                                    html: output, // html body
                                    attachments: [
                                      {
                                        filename: "invoice.pdf",
                                        content: fs.createReadStream(
                                          `./other_invoices/${file_name_}`,
                                          pdf
                                        ),
                                      },
                                    ],
                                  })
                                  .then(() => {
                                    res.status(200).json({ success: true });
                                  });
                              }
                            }
                          );
                        }
                      }
                    );
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});

// part payment invoice
app.post("/api/v1/send/offline/part/invoice", async function (req, res) {
  const {
    dataUri,
    mail,
    address,
    name,
    number,
    country,
    invoice_num,
    ip_address,
    formData,
    course_id,
    course_fee,
    service,
    hsn_code,
    appliedTax,
    taxAmount,
    data,
    amount,
    remain_amt,
    dis_per,
    pay_mode,
    final_amt,
    dis_value,
    amt_after_dis,
    order_id,
    serviceRow,
    inv_incl_tax_amt,
    order_date,
  } = req.body;

  const mrp = course_fee;
  var date = new Date(); // Now
  date.setDate(date.getDate() + 30); // Set now + 30 days as the new date

  const buffer = Buffer.from(dataUri.split(",")[1], "base64");
  // var today = new Date();
  // var takeDate = today.setDate(today.getDate() + 30);
  var dd = String(date.getDate()).padStart(2, "0");
  var mm = String(date.getMonth()).padStart(2, "0"); //January is 0!
  var yyyy = date.getFullYear();

  const takeDate = yyyy + "-" + mm + "-" + dd;

  var myDate = new Date();
  var hours = myDate.getHours();
  var minutes = myDate.getMinutes();
  var ampm = hours >= 12 ? "pm" : "am";
  hours = hours % 12;
  hours = hours ? hours : 12; // the hour '0' should be '12'
  minutes = minutes < 10 ? "0" + minutes : minutes;
  var time1 = hours + ":" + minutes + " " + ampm;
  const file_name_ = `part_payment_${invoice_num
    .replace("/", "-")
    .replace("/", "-")}_${name}.pdf`;
  db.query(
    "SELECT * FROM `main_admin_db`.tax_invoice_order_myvedait where invoice_no = ? and billing_email = ?",
    [invoice_num, mail],
    (errIn, resultIn) => {
      if (errIn) console.log(errIn);
      else {
        db.query(
          `insert into \`main_admin_db\`.tax_invoice_order_myvedait (
            service_name,
            service_id,
            order_id,
            order_date,

            cust_id,
            course_id,
            invoice_no,
            inv_date,
            billing_name,
            billing_tel,
            billing_address,
            billing_email,
            services,
            mrp_amount,
            inv_amount,
            inv_incl_tax_amount,
            payment_status,
            payment_date_time,
            cust_gstin,
            txn_details,
            payment_remark,
            payment_mode,
            invoice_gen_type,
          
            tax_amount,
            tax_percent,
            hsn_sac,
            remain_amount,
            ccav_trans_date,
            bank_name,
            ifsc_code,
            cheque_no,
            ccav_card_name,
            ccav_tracking_id,
            payment_type,
            file_name,
            place_of_supply,
            sales_type
          ) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`,
          [
            serviceRow.category_title,
            serviceRow.id,
            order_id,
            order_date,
            data?.cust_id,
            course_id,
            invoice_num,
            takeDate,
            name,
            number,
            address,
            mail,
            service,
            mrp,
            amount,
            inv_incl_tax_amt,
            formData.invoiceType,
            takeDate,
            data?.gstin,
            "",
            formData.payment_mode_remark,
            pay_mode,
            "Offline",

            taxAmount,
            appliedTax,
            hsn_code,
            remain_amt,
            formData.trans_date,
            formData.bank_name,
            formData.ifsc_code,
            formData.cheque_no,
            formData.payment_method,
            formData.trans_id,
            formData.payment_type + " Payment",
            file_name_,
            formData.place_of_supply,
            formData.sales_type,
          ],
          (errIn1, resultIn1) => {
            if (errIn1) console.log(errIn1);
            else {
              db.query(
                "SELECT * FROM `myveda-db`.comp_cust_req_db WHERE cust_id = ?",
                [data.cust_id],
                (err, result) => {
                  if (err) console.log(err);
                  else {
                    db.query(
                      "SELECT * FROM `myveda-db`.user_course_map_table_la where uid = ? and cust_id = ?",
                      [mail, data?.cust_id],
                      (errM, resultM) => {
                        if (errM) console.log(errM);
                        else {
                          db.query(
                            "SELECT * FROM main_admin_db.myveda_indi_cust_ids where email = ?",
                            [mail],
                            async (errInv, resultInv) => {
                              if (errInv) console.log(errInv);
                              else {
                                fs.writeFileSync(
                                  `./invoices/${file_name_}`,
                                  buffer
                                );

                                // "insert into `main_admin_db`.tax_invoice_order_myvedait (invoice_no,bill_to,mobile,uid,services,amount,incl_tax_amount,payment_status,payment_date_time) values(?,?,?,?,?,?,?,?,?)",

                                db.query(
                                  "SELECT * FROM `myveda-db`.email_temp_payout_la",
                                  (errPay, resultPay) => {
                                    if (errPay) console.log(errPay);
                                    else {
                                      // node mailer
                                      const output = `

                                              <h3>Dear ${name} </h3>
                                              <p>${resultPay[0].message}.</p>

                                              <p><b>Customer ID :</b> ${data.cust_id}</p>

                                              <p><b>URL</b> : <a href='${resultPay[0].url}'>${resultPay[0].url}</a></p>
                                              <p>
                                              Please find attached invoice for your records.</p>

                                              <p>${resultPay[0].caution}.</p>

                                              <p>Thanks & Best Regards</p>
                                              <p>${resultPay[0].signature}</p>

                                              `;

                                      db.query(
                                        "SELECT * FROM `myveda-db`.email_srv",
                                        (err, result) => {
                                          if (err) {
                                            console.log(err);
                                          } else {
                                            console.log(result);
                                            let host1 = result[0]?.host;
                                            let port1 = result[0]?.port;
                                            let user1 = result[0]?.auth_uid;
                                            let pass1 = result[0]?.auth_pass;
                                            let fromEmail =
                                              result[0]?.from_email;
                                            let bccEmail = result[0]?.bcc_email;
                                            let transporter =
                                              nodemailer.createTransport({
                                                host: host1,
                                                port: port1,
                                                secure: true, // true for 465, false for other p orts
                                                auth: {
                                                  user: user1, // generated ethereal user
                                                  pass: pass1, // generated ethereal password
                                                },
                                              });

                                            // send mail with defined transport object
                                            let info = transporter
                                              .sendMail({
                                                from: `"" ${fromEmail}`, // sender address
                                                to: mail, // list of receivers
                                                subject: resultPay[0].subject, // Subject line
                                                bcc: bccEmail,
                                                html: output, // html body
                                                attachments: [
                                                  {
                                                    filename: "invoice.pdf",
                                                    content:
                                                      fs.createReadStream(
                                                        `./invoices/${file_name_}`,
                                                        buffer
                                                      ),
                                                  },
                                                ],
                                              })
                                              .then(() => {
                                                res.send({
                                                  success: true,
                                                });
                                              });
                                          }
                                        }
                                      );
                                    }
                                  }
                                );
                              }
                            }
                          );
                        }
                      }
                    );
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});
// other
app.post("/api/v1/send/offline/other/part/invoice", async function (req, res) {
  const {
    dataUri,
    mail,
    address,
    name,
    number,
    country,
    invoice_num,
    ip_address,
    formData,
    course_id,
    course_fee,
    service,
    hsn_code,
    appliedTax,
    taxAmount,
    data,
    amount,
    remain_amt,
    dis_per,
    pay_mode,
    final_amt,
    dis_value,
    amt_after_dis,
    order_id,
    serviceRow,
    inv_incl_tax_amt,
    order_date,
  } = req.body;

  const mrp = course_fee;
  var date = new Date(); // Now
  date.setDate(date.getDate() + 30); // Set now + 30 days as the new date

  const buffer = Buffer.from(dataUri.split(",")[1], "base64");
  // var today = new Date();
  // var takeDate = today.setDate(today.getDate() + 30);
  var dd = String(date.getDate()).padStart(2, "0");
  var mm = String(date.getMonth()).padStart(2, "0"); //January is 0!
  var yyyy = date.getFullYear();

  const takeDate = yyyy + "-" + mm + "-" + dd;

  var myDate = new Date();
  var hours = myDate.getHours();

  var minutes = myDate.getMinutes();
  var ampm = hours >= 12 ? "pm" : "am";
  hours = hours % 12;
  hours = hours ? hours : 12; // the hour '0' should be '12'
  minutes = minutes < 10 ? "0" + minutes : minutes;
  var time1 = hours + ":" + minutes + " " + ampm;
  const file_name_ = `part_payment_${invoice_num
    .replace("/", "-")
    .replace("/", "-")}_${name}.pdf`;
  db.query(
    "SELECT * FROM `main_admin_db`.tax_invoice_order_myvedait where invoice_no = ? and billing_email = ?",
    [invoice_num, mail],
    (errIn, resultIn) => {
      if (errIn) console.log(errIn);
      else {
        db.query(
          `insert into \`main_admin_db\`.tax_invoice_order_myvedait (
            service_name,
            service_id,
            order_id,
            order_date,

            cust_id,
          
            invoice_no,
            inv_date,
            billing_name,
            billing_tel,
            billing_address,
            billing_email,
            services,
            mrp_amount,
            inv_amount,
            inv_incl_tax_amount,
            payment_status,
            payment_date_time,
            cust_gstin,
            txn_details,
            payment_remark,
            payment_mode,
            invoice_gen_type,
          
            tax_amount,
            tax_percent,
            hsn_sac,
            remain_amount,
            ccav_trans_date,
            bank_name,
            ifsc_code,
            cheque_no,
            ccav_card_name,
            ccav_tracking_id,
            payment_type,
            file_name,
            place_of_supply,
            sales_type
          ) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`,
          [
            serviceRow.category_title,
            serviceRow.id,
            order_id,
            order_date,
            data?.cust_id,

            invoice_num,
            takeDate,
            name,
            number,
            address,
            mail,
            service,
            mrp,
            amount,
            inv_incl_tax_amt,
            formData.invoiceType,
            takeDate,
            data?.gstin,
            "",
            formData.payment_mode_remark,
            pay_mode,
            "Offline",

            taxAmount,
            appliedTax,
            hsn_code,
            remain_amt,
            formData.trans_date,
            formData.bank_name,
            formData.ifsc_code,
            formData.cheque_no,
            formData.payment_method,
            formData.trans_id,
            formData.payment_type + " Payment",
            file_name_,
            formData.place_of_supply,
            formData.sales_type,
          ],
          (errIn1, resultIn1) => {
            if (errIn1) console.log(errIn1);
            else {
              db.query(
                "SELECT * FROM main_admin_db.offline_cust_reg_indi where email = ?",
                [mail],
                async (errInv, resultInv) => {
                  if (errInv) console.log(errInv);
                  else {
                    fs.writeFileSync(`./other_invoices/${file_name_}`, buffer);

                    // "insert into `main_admin_db`.tax_invoice_order_myvedait (invoice_no,bill_to,mobile,uid,services,amount,incl_tax_amount,payment_status,payment_date_time) values(?,?,?,?,?,?,?,?,?)",

                    db.query(
                      "SELECT * FROM main_admin_db.email_temp_offline_cust_reg_indi where service_id = ?",
                      [serviceRow.id],
                      (errPay, resultPay) => {
                        if (errPay) console.log(errPay);
                        else {
                          // node mailer
                          const output = `

                                  <h3>Dear ${name} </h3>
                                  <p>${resultPay[0].message}.</p>

                                  <p><b>Customer ID :</b> ${data.cust_id}</p>

                                  <p><b>URL</b> : <a href='${resultPay[0].url}'>${resultPay[0].url}</a></p>
                                  <p>
                                  Please find attached invoice for your records.</p>

                                  <p>${resultPay[0].caution}.</p>

                                  <p>Thanks & Best Regards</p>
                                  <p>${resultPay[0].signature}</p>

                                  `;

                          db.query(
                            "SELECT * FROM `myveda-db`.email_srv",
                            (err, result) => {
                              if (err) {
                                console.log(err);
                              } else {
                                console.log(result);
                                let host1 = result[0]?.host;
                                let port1 = result[0]?.port;
                                let user1 = result[0]?.auth_uid;
                                let pass1 = result[0]?.auth_pass;
                                let fromEmail = result[0]?.from_email;
                                let bccEmail = result[0]?.bcc_email;
                                let transporter = nodemailer.createTransport({
                                  host: host1,
                                  port: port1,
                                  secure: true, // true for 465, false for other p orts
                                  auth: {
                                    user: user1, // generated ethereal user
                                    pass: pass1, // generated ethereal password
                                  },
                                });

                                // send mail with defined transport object
                                let info = transporter
                                  .sendMail({
                                    from: `"" ${fromEmail}`, // sender address
                                    to: mail, // list of receivers
                                    subject: resultPay[0].subject, // Subject line
                                    bcc: bccEmail,
                                    html: output, // html body
                                    attachments: [
                                      {
                                        filename: "invoice.pdf",
                                        content: fs.createReadStream(
                                          `./other_invoices/${file_name_}`,
                                          buffer
                                        ),
                                      },
                                    ],
                                  })
                                  .then(() => {
                                    res.send({
                                      success: true,
                                    });
                                  });
                              }
                            }
                          );
                        }
                      }
                    );
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});
// other
app.post("/api/v1/send/offline/myshop/part/invoice", async function (req, res) {
  const {
    dataUri,
    mail,
    address,
    name,
    number,
    country,
    invoice_num,
    ip_address,
    formData,
    course_id,
    course_fee,
    service,
    hsn_code,
    appliedTax,
    taxAmount,
    data,
    amount,
    remain_amt,
    dis_per,
    pay_mode,
    final_amt,
    dis_value,
    amt_after_dis,
    order_id,
    serviceRow,
    inv_incl_tax_amt,
    order_date,
  } = req.body;

  const mrp = course_fee;
  var date = new Date(); // Now
  date.setDate(date.getDate() + 30); // Set now + 30 days as the new date

  const buffer = Buffer.from(dataUri.split(",")[1], "base64");
  const file_name_ = `part_payment_${invoice_num
    .replace("/", "-")
    .replace("/", "-")}_${name}.pdf`;
  // var today = new Date();
  // var takeDate = today.setDate(today.getDate() + 30);
  var dd = String(date.getDate()).padStart(2, "0");
  var mm = String(date.getMonth() + 1).padStart(2, "0"); //January is 0!
  var yyyy = date.getFullYear();

  const takeDate = yyyy + "-" + mm + "-" + dd;

  var myDate = new Date();
  var hours = myDate.getHours();
  var minutes = myDate.getMinutes();
  var ampm = hours >= 12 ? "pm" : "am";
  hours = hours % 12;
  hours = hours ? hours : 12; // the hour '0' should be '12'
  minutes = minutes < 10 ? "0" + minutes : minutes;
  var time1 = hours + ":" + minutes + " " + ampm;
  db.query(
    "SELECT * FROM `main_admin_db`.tax_invoice_order_myvedait where invoice_no = ? and billing_email = ?",
    [invoice_num, mail],
    (errIn, resultIn) => {
      if (errIn) console.log(errIn);
      else {
        db.query(
          `insert into \`main_admin_db\`.tax_invoice_order_myvedait (
            service_name,
            service_id,
            order_id,
            order_date,

            cust_id,
          
            invoice_no,
            inv_date,
            billing_name,
            billing_tel,
            billing_address,
            billing_email,
            services,
            mrp_amount,
            inv_amount,
            inv_incl_tax_amount,
            payment_status,
            payment_date_time,
            cust_gstin,
            txn_details,
            payment_remark,
            payment_mode,
            invoice_gen_type,
          
            tax_amount,
            tax_percent,
            hsn_sac,
            remain_amount,
            ccav_trans_date,
            bank_name,
            ifsc_code,
            cheque_no,
            ccav_card_name,
            ccav_tracking_id,
            payment_type,
            file_name,
            place_of_supply,
            sales_type
          ) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`,
          [
            serviceRow.category_title,
            serviceRow.id,
            order_id,
            order_date,
            data?.cust_id,

            invoice_num,
            takeDate,
            name,
            number,
            address,
            mail,
            service,
            mrp,
            amount,
            inv_incl_tax_amt,
            formData.invoiceType,
            takeDate,
            data?.gstin,
            "",
            formData.payment_mode_remark,
            pay_mode,
            "Offline",

            taxAmount,
            appliedTax,
            hsn_code,
            remain_amt,
            formData.trans_date,
            formData.bank_name,
            formData.ifsc_code,
            formData.cheque_no,
            formData.payment_method,
            formData.trans_id,
            formData.payment_type + " Payment",
            file_name_,
            formData.place_of_supply,
            formData.sales_type,
          ],
          (errIn1, resultIn1) => {
            if (errIn1) console.log(errIn1);
            else {
              db.query(
                "SELECT * FROM main_admin_db.offline_cust_reg_indi where email = ?",
                [mail],
                async (errInv, resultInv) => {
                  if (errInv) console.log(errInv);
                  else {
                    fs.writeFileSync(`./myshop_invoices/${file_name_}`, buffer);

                    // "insert into `main_admin_db`.tax_invoice_order_myvedait (invoice_no,bill_to,mobile,uid,services,amount,incl_tax_amount,payment_status,payment_date_time) values(?,?,?,?,?,?,?,?,?)",

                    db.query(
                      "SELECT * FROM main_admin_db.email_temp_myshop_order_request",
                      (errPay, resultPay) => {
                        if (errPay) console.log(errPay);
                        else {
                          // node mailer
                          const output = `

                                  <h3>Dear ${name} </h3>
                                  <p>${resultPay[0]?.message}.</p>

                                  <p><b>Customer ID :</b> ${data.cust_id}</p>

                                  <p><b>URL</b> : <a href='${resultPay[0]?.url}'>${resultPay[0]?.url}</a></p>
                                  <p>
                                  Please find attached invoice for your records.</p>

                                  <p>${resultPay[0]?.caution}.</p>

                                  <p>Thanks & Best Regards</p>
                                  <p>${resultPay[0]?.signature}</p>

                                  `;

                          db.query(
                            "SELECT * FROM `myveda-db`.email_srv",
                            (err, result) => {
                              if (err) {
                                console.log(err);
                              } else {
                                console.log(result);
                                let host1 = result[0]?.host;
                                let port1 = result[0]?.port;
                                let user1 = result[0]?.auth_uid;
                                let pass1 = result[0]?.auth_pass;
                                let fromEmail = result[0]?.from_email;
                                let bccEmail = result[0]?.bcc_email;
                                let transporter = nodemailer.createTransport({
                                  host: host1,
                                  port: port1,
                                  secure: true, // true for 465, false for other p orts
                                  auth: {
                                    user: user1, // generated ethereal user
                                    pass: pass1, // generated ethereal password
                                  },
                                });

                                // send mail with defined transport object
                                let info = transporter
                                  .sendMail({
                                    from: `"" ${fromEmail}`, // sender address
                                    to: mail, // list of receivers
                                    subject: resultPay[0].subject, // Subject line
                                    bcc: bccEmail,
                                    html: output, // html body
                                    attachments: [
                                      {
                                        filename: "invoice.pdf",
                                        content: fs.createReadStream(
                                          `./myshop_invoices/${file_name_}`,
                                          buffer
                                        ),
                                      },
                                    ],
                                  })
                                  .then(() => {
                                    res.send({
                                      success: true,
                                    });
                                  });
                              }
                            }
                          );
                        }
                      }
                    );
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});
// other
app.post("/api/v1/send/offline/myhrms/part/invoice", async function (req, res) {
  const {
    dataUri,
    mail,
    address,
    name,
    number,
    country,
    invoice_num,
    ip_address,
    formData,
    course_id,
    course_fee,
    service,
    hsn_code,
    appliedTax,
    taxAmount,
    data,
    amount,
    remain_amt,
    dis_per,
    pay_mode,
    final_amt,
    dis_value,
    amt_after_dis,
    order_id,
    serviceRow,
    inv_incl_tax_amt,
    order_date,
  } = req.body;

  const mrp = course_fee;
  var date = new Date(); // Now
  date.setDate(date.getDate() + 30); // Set now + 30 days as the new date

  const buffer = Buffer.from(dataUri.split(",")[1], "base64");
  const file_name_ = `part_payment_${invoice_num
    .replace("/", "-")
    .replace("/", "-")}_${name}.pdf`;
  // var today = new Date();
  // var takeDate = today.setDate(today.getDate() + 30);
  var dd = String(date.getDate()).padStart(2, "0");
  var mm = String(date.getMonth() + 1).padStart(2, "0"); //January is 0!
  var yyyy = date.getFullYear();

  const takeDate = yyyy + "-" + mm + "-" + dd;

  var myDate = new Date();
  var hours = myDate.getHours();
  var minutes = myDate.getMinutes();
  var ampm = hours >= 12 ? "pm" : "am";
  hours = hours % 12;
  hours = hours ? hours : 12; // the hour '0' should be '12'
  minutes = minutes < 10 ? "0" + minutes : minutes;
  var time1 = hours + ":" + minutes + " " + ampm;
  db.query(
    "SELECT * FROM `main_admin_db`.tax_invoice_order_myvedait where invoice_no = ? and billing_email = ?",
    [invoice_num, mail],
    (errIn, resultIn) => {
      if (errIn) console.log(errIn);
      else {
        db.query(
          `insert into \`main_admin_db\`.tax_invoice_order_myvedait (
            service_name,
            service_id,
            order_id,
            order_date,

            cust_id,
          
            invoice_no,
            inv_date,
            billing_name,
            billing_tel,
            billing_address,
            billing_email,
            services,
            mrp_amount,
            inv_amount,
            inv_incl_tax_amount,
            payment_status,
            payment_date_time,
            cust_gstin,
            txn_details,
            payment_remark,
            payment_mode,
            invoice_gen_type,
          
            tax_amount,
            tax_percent,
            hsn_sac,
            remain_amount,
            ccav_trans_date,
            bank_name,
            ifsc_code,
            cheque_no,
            ccav_card_name,
            ccav_tracking_id,
            payment_type,
            file_name,
            place_of_supply,
            sales_type
          ) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`,
          [
            serviceRow.category_title,
            serviceRow.id,
            order_id,
            order_date,
            data?.cust_id,

            invoice_num,
            takeDate,
            name,
            number,
            address,
            mail,
            service,
            mrp,
            amount,
            inv_incl_tax_amt,
            formData.invoiceType,
            takeDate,
            data?.gstin,
            "",
            formData.payment_mode_remark,
            pay_mode,
            "Offline",

            taxAmount,
            appliedTax,
            hsn_code,
            remain_amt,
            formData.trans_date,
            formData.bank_name,
            formData.ifsc_code,
            formData.cheque_no,
            formData.payment_method,
            formData.trans_id,
            formData.payment_type + " Payment",
            file_name_,
            formData.place_of_supply,
            formData.sales_type,
          ],
          (errIn1, resultIn1) => {
            if (errIn1) console.log(errIn1);
            else {
              db.query(
                "SELECT * FROM main_admin_db.offline_cust_reg_indi where email = ?",
                [mail],
                async (errInv, resultInv) => {
                  if (errInv) console.log(errInv);
                  else {
                    fs.writeFileSync(`./myhrms_invoices/${file_name_}`, buffer);

                    // "insert into `main_admin_db`.tax_invoice_order_myvedait (invoice_no,bill_to,mobile,uid,services,amount,incl_tax_amount,payment_status,payment_date_time) values(?,?,?,?,?,?,?,?,?)",

                    db.query(
                      "SELECT * FROM main_admin_db.email_temp_myhrms_order_request",
                      (errPay, resultPay) => {
                        if (errPay) console.log(errPay);
                        else {
                          // node mailer
                          const output = `

                                  <h3>Dear ${name} </h3>
                                  <p>${resultPay[0]?.message}.</p>

                                  <p><b>Customer ID :</b> ${data.cust_id}</p>

                                  <p><b>URL</b> : <a href='${resultPay[0]?.url}'>${resultPay[0]?.url}</a></p>
                                  <p>
                                  Please find attached invoice for your records.</p>

                                  <p>${resultPay[0]?.caution}.</p>

                                  <p>Thanks & Best Regards</p>
                                  <p>${resultPay[0]?.signature}</p>

                                  `;

                          db.query(
                            "SELECT * FROM `myveda-db`.email_srv",
                            (err, result) => {
                              if (err) {
                                console.log(err);
                              } else {
                                console.log(result);
                                let host1 = result[0]?.host;
                                let port1 = result[0]?.port;
                                let user1 = result[0]?.auth_uid;
                                let pass1 = result[0]?.auth_pass;
                                let fromEmail = result[0]?.from_email;
                                let bccEmail = result[0]?.bcc_email;
                                let transporter = nodemailer.createTransport({
                                  host: host1,
                                  port: port1,
                                  secure: true, // true for 465, false for other p orts
                                  auth: {
                                    user: user1, // generated ethereal user
                                    pass: pass1, // generated ethereal password
                                  },
                                });

                                // send mail with defined transport object
                                let info = transporter
                                  .sendMail({
                                    from: `"" ${fromEmail}`, // sender address
                                    to: mail, // list of receivers
                                    subject: resultPay[0].subject, // Subject line
                                    bcc: bccEmail,
                                    html: output, // html body
                                    attachments: [
                                      {
                                        filename: "invoice.pdf",
                                        content: fs.createReadStream(
                                          `./myhrms_invoices/${file_name_}`,
                                          buffer
                                        ),
                                      },
                                    ],
                                  })
                                  .then(() => {
                                    res.send({
                                      success: true,
                                    });
                                  });
                              }
                            }
                          );
                        }
                      }
                    );
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});
// other
app.post("/api/v1/send/offline/praxis/part/invoice", async function (req, res) {
  const {
    dataUri,
    mail,
    address,
    name,
    number,
    country,
    invoice_num,
    ip_address,
    formData,
    course_id,
    course_fee,
    service,
    hsn_code,
    appliedTax,
    taxAmount,
    data,
    amount,
    remain_amt,
    dis_per,
    pay_mode,
    final_amt,
    dis_value,
    amt_after_dis,
    order_id,
    serviceRow,
    inv_incl_tax_amt,
    order_date,
  } = req.body;

  const mrp = course_fee;
  var date = new Date(); // Now
  date.setDate(date.getDate() + 30); // Set now + 30 days as the new date

  const buffer = Buffer.from(dataUri.split(",")[1], "base64");
  const file_name_ = `part_payment_${invoice_num
    .replace("/", "-")
    .replace("/", "-")}_${name}.pdf`;
  // var today = new Date();
  // var takeDate = today.setDate(today.getDate() + 30);
  var dd = String(date.getDate()).padStart(2, "0");
  var mm = String(date.getMonth() + 1).padStart(2, "0"); //January is 0!
  var yyyy = date.getFullYear();

  const takeDate = yyyy + "-" + mm + "-" + dd;

  var myDate = new Date();
  var hours = myDate.getHours();
  var minutes = myDate.getMinutes();
  var ampm = hours >= 12 ? "pm" : "am";
  hours = hours % 12;
  hours = hours ? hours : 12; // the hour '0' should be '12'
  minutes = minutes < 10 ? "0" + minutes : minutes;
  var time1 = hours + ":" + minutes + " " + ampm;
  db.query(
    "SELECT * FROM `main_admin_db`.tax_invoice_order_myvedait where invoice_no = ? and billing_email = ?",
    [invoice_num, mail],
    (errIn, resultIn) => {
      if (errIn) console.log(errIn);
      else {
        db.query(
          `insert into \`main_admin_db\`.tax_invoice_order_myvedait (
            service_name,
            service_id,
            order_id,
            order_date,

            cust_id,
          
            invoice_no,
            inv_date,
            billing_name,
            billing_tel,
            billing_address,
            billing_email,
            services,
            mrp_amount,
            inv_amount,
            inv_incl_tax_amount,
            payment_status,
            payment_date_time,
            cust_gstin,
            txn_details,
            payment_remark,
            payment_mode,
            invoice_gen_type,
          
            tax_amount,
            tax_percent,
            hsn_sac,
            remain_amount,
            ccav_trans_date,
            bank_name,
            ifsc_code,
            cheque_no,
            ccav_card_name,
            ccav_tracking_id,
            payment_type,
            file_name,
            place_of_supply,
            sales_type
          ) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`,
          [
            serviceRow.category_title,
            serviceRow.id,
            order_id,
            order_date,
            data?.cust_id,

            invoice_num,
            takeDate,
            name,
            number,
            address,
            mail,
            service,
            mrp,
            amount,
            inv_incl_tax_amt,
            formData.invoiceType,
            takeDate,
            data?.gstin,
            "",
            formData.payment_mode_remark,
            pay_mode,
            "Offline",

            taxAmount,
            appliedTax,
            hsn_code,
            remain_amt,
            formData.trans_date,
            formData.bank_name,
            formData.ifsc_code,
            formData.cheque_no,
            formData.payment_method,
            formData.trans_id,
            formData.payment_type + " Payment",
            file_name_,
            formData.place_of_supply,
            formData.sales_type,
          ],
          (errIn1, resultIn1) => {
            if (errIn1) console.log(errIn1);
            else {
              db.query(
                "SELECT * FROM main_admin_db.offline_cust_reg_indi where email = ?",
                [mail],
                async (errInv, resultInv) => {
                  if (errInv) console.log(errInv);
                  else {
                    fs.writeFileSync(`./praxis_invoices/${file_name_}`, buffer);

                    // "insert into `main_admin_db`.tax_invoice_order_myvedait (invoice_no,bill_to,mobile,uid,services,amount,incl_tax_amount,payment_status,payment_date_time) values(?,?,?,?,?,?,?,?,?)",

                    db.query(
                      "SELECT * FROM main_admin_db.email_temp_praxis_indi_cust_reg",
                      (errPay, resultPay) => {
                        if (errPay) console.log(errPay);
                        else {
                          // node mailer
                          const output = `

                                  <h3>Dear ${name} </h3>
                                  <p>${resultPay[0]?.message}.</p>

                                  <p><b>Customer ID :</b> ${data.cust_id}</p>

                                  <p><b>URL</b> : <a href='${resultPay[0]?.url}'>${resultPay[0]?.url}</a></p>
                                  <p>
                                  Please find attached invoice for your records.</p>

                                  <p>${resultPay[0]?.caution}.</p>

                                  <p>Thanks & Best Regards</p>
                                  <p>${resultPay[0]?.signature}</p>

                                  `;

                          db.query(
                            "SELECT * FROM `myveda-db`.email_srv",
                            (err, result) => {
                              if (err) {
                                console.log(err);
                              } else {
                                console.log(result);
                                let host1 = result[0]?.host;
                                let port1 = result[0]?.port;
                                let user1 = result[0]?.auth_uid;
                                let pass1 = result[0]?.auth_pass;
                                let fromEmail = result[0]?.from_email;
                                let bccEmail = result[0]?.bcc_email;
                                let transporter = nodemailer.createTransport({
                                  host: host1,
                                  port: port1,
                                  secure: true, // true for 465, false for other p orts
                                  auth: {
                                    user: user1, // generated ethereal user
                                    pass: pass1, // generated ethereal password
                                  },
                                });

                                // send mail with defined transport object
                                let info = transporter
                                  .sendMail({
                                    from: `"" ${fromEmail}`, // sender address
                                    to: mail, // list of receivers
                                    subject: resultPay[0].subject, // Subject line
                                    bcc: bccEmail,
                                    html: output, // html body
                                    attachments: [
                                      {
                                        filename: "invoice.pdf",
                                        content: fs.createReadStream(
                                          `./praxis_invoices/${file_name_}`,
                                          buffer
                                        ),
                                      },
                                    ],
                                  })
                                  .then(() => {
                                    res.send({
                                      success: true,
                                    });
                                  });
                              }
                            }
                          );
                        }
                      }
                    );
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});
//
app.post("/upload/pdf", (req, res) => {
  const buffer = Buffer.from(req.body.dataUri.split(",")[1], "base64");

  // const buffer = Buffer.from(req.body.dataUri, "base64");

  console.log(buffer);
  fs.writeFile("output1.pdf", buffer, (err) => {
    if (err) {
      console.error("Error saving PDF:", err);
    } else {
      console.log("PDF saved successfully!");
    }
  });
});
// ticket log invoice
app.post("/send/invoice/ticket/log", async function (req, res) {
  const {
    mail,
    name,
    invoice_num,
    order_id,
    gst,
    dataUri,

    amount_incl_tax,
    ticket_id,
    ipAddress,
  } = req.body;

  const {
    tracking_id,
    bank_ref_no,
    order_status,
    failure_msg,
    payment_mode,
    card_name,
    status_code,
    status_message,
    retry,
    trans_date,
    response_code,
    amount,
  } = req.body.ccavResDetails;

  var date = new Date(); // Now
  date.setDate(date.getDate() + 30);

  // var today = new Date();
  // var takeDate = today.setDate(today.getDate() + 30);
  var dd = String(date.getDate()).padStart(2, "0");
  var mm = String(date.getMonth() + 1).padStart(2, "0"); //January is 0!
  var yyyy = date.getFullYear();

  const pdfBuffer = Buffer.from(dataUri.split(",")[1], "base64");

  console.log(req.body, "data");

  const takeDate = yyyy + "-" + mm + "-" + dd;
  db.query(
    "update main_admin_db.myit_all_ticket_customers set date = ? where mail = ? and ticket_id = ?",
    [takeDate, mail, ticket_id],
    async (err, result) => {
      if (err) console.log(err);
      else {
        db.query(
          "select * from main_admin_db.myit_all_ticket_customers where mail = ? and ticket_id = ?",
          [mail, ticket_id],
          (errInvoice, resultInvoice) => {
            if (errInvoice) console.log(errInvoice);
            else {
              const resultInvoice1 = resultInvoice[0];
              console.log(resultInvoice1);
              db.query(
                "select * from main_admin_db.invoice_order_myit_ft where order_id = ? and billing_email = ?",
                [order_id, mail],
                (errNN, resultNN) => {
                  if (errNN) console.log(errNN);
                  else {
                    if (!resultNN.length) {
                      db.query(
                        `insert into main_admin_db.invoice_order_myit_ft(order_id,order_date,amount_incl_tax,billing_name,invoice_no,gst,billing_address,billing_email,billing_tel,service,problem_remark,billing_ip,
                          payment_mode,
                          mer_amount,
                          ccav_tracking_id,
                          ccav_bank_ref_no,
                          ccav_order_status,
                          ccav_failure_msg,
                          ccav_payment_mode,
                          ccav_card_name,
                          ccav_status_code,
                          ccav_status_message,
                          ccav_retry,
                          ccav_trans_date,
                          ccav_response_code) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`,
                        [
                          order_id,
                          takeDate,
                          amount_incl_tax,
                          resultInvoice1.name,
                          invoice_num,
                          gst ? gst : 18,
                          resultInvoice1.address,
                          resultInvoice1.mail,
                          resultInvoice1.phone,
                          resultInvoice1.problem_type,
                          resultInvoice1.msg,
                          ipAddress,
                          payment_mode,
                          amount,
                          tracking_id,
                          bank_ref_no,
                          order_status,
                          failure_msg,
                          payment_mode,
                          card_name,
                          status_code,
                          status_message,
                          retry,
                          trans_date,
                          response_code,
                        ],
                        (err22, result22) => {
                          if (err22) console.log(err22);
                          else {
                            fs.writeFileSync(
                              `./ticket_log/${mail}_${name}.pdf`,
                              pdfBuffer
                            );
                            db.query(
                              "SELECT * FROM main_admin_db.email_temp_ticket_reg",
                              (errPay, resultPay) => {
                                if (errPay) console.log(errPay);
                                else {
                                  // node mailer
                                  const output = `
      
                      <h3>Dear ${name} </h3>
                      <p>${resultPay[0].message}.</p>
      
                      <p><b>MyIT FT-ID :</b> ${ticket_id}</p>

                      <p><b>URL :</b> <a href=${resultPay[0]?.url}>${resultPay[0]?.url}</a></p> </p>
      
                      Please find attached invoice for your records.</p>
      
                      <p>${resultPay[0].caution}.</p>
      
                      <p>Thanks & Best Regards</p>
                      <p>${resultPay[0].signature}</p>
      
                      `;

                                  db.query(
                                    "SELECT * FROM `myveda-db`.email_srv",
                                    (err, result) => {
                                      if (err) {
                                        console.log(err);
                                      } else {
                                        console.log(result);
                                        let host1 = result[0]?.host;
                                        let port1 = result[0]?.port;
                                        let user1 = result[0]?.auth_uid;
                                        let pass1 = result[0]?.auth_pass;
                                        let fromEmail = result[0]?.from_email;
                                        let bccEmail = result[0]?.bcc_email;
                                        let transporter =
                                          nodemailer.createTransport({
                                            host: host1,
                                            port: port1,
                                            secure: true, // true for 465, false for other p orts
                                            auth: {
                                              user: user1, // generated ethereal user
                                              pass: pass1, // generated ethereal password
                                            },
                                          });

                                        // send mail with defined transport object
                                        let info = transporter.sendMail({
                                          from: `"" ${fromEmail}`, // sender address
                                          to: mail, // list of receivers
                                          subject: resultPay[0].subject, // Subject line
                                          bcc: bccEmail,
                                          html: output, // html body
                                          attachments: [
                                            {
                                              filename: "invoice.pdf",
                                              content: fs.createReadStream(
                                                `./ticket_log/${mail}_${name}.pdf`,
                                                pdfBuffer
                                              ),
                                            },
                                          ],
                                        });
                                      }
                                    }
                                  );
                                }
                              }
                            );
                          }
                        }
                      );
                    }
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});

// offline customer invoice
app.post("/api/v1/send/offline/invoice/log", (req, res) => {
  const {
    dataUri,
    invoiceType,
    cust_id,
    uid,
    contact,
    address,
    amount,
    service,
    remark,
    incl_tax_amount,
    name,
    invoice_num,
    gstin,
    po_number,
    tax,
    order_id,
    hsn_code,
  } = req.body;

  // console.log(dataUri);
  const buffer = Buffer.from(dataUri.split(",")[1], "base64");
  console.log(buffer);

  var date = new Date(); // Now
  date.setDate(date.getDate() + 30);

  var dd = String(date.getDate()).padStart(2, "0");
  var mm = String(date.getMonth() + 1).padStart(2, "0"); // January is 0!
  var yyyy = date.getFullYear();

  const takeDate = yyyy + "-" + mm + "-" + dd;
  db.query(
    `INSERT INTO \`main_admin_db\`.offline_myvedait_invoices_corp_cust(invoice_no, bill_to, mobile, address, uid, services, amount, incl_tax_amount,
    payment_status, payment_date_time, cust_gstin, service_remark, product_order_num, service_des, cust_id, invoice_type, tax,hsn_code)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)`,
    [
      invoice_num,
      name,
      contact,
      address,
      uid,
      service,
      amount,
      incl_tax_amount,
      "Pending",
      takeDate,
      gstin,
      remark,
      po_number,
      remark,
      cust_id,
      invoiceType,
      tax,
      hsn_code,
    ],
    async (err, result) => {
      if (err) {
        console.log(err);
      } else {
        db.query(
          "SELECT * FROM main_admin_db.payment_order_myvedait WHERE order_id = ? AND invoice_no = ?",
          [order_id, invoice_num],
          (errP, resultP) => {
            if (errP) {
              console.log(errP);
            } else {
              console.log(resultP.length);
              if (resultP.length === 0) {
                db.query(
                  "INSERT INTO main_admin_db.payment_order_myvedait(order_id, order_date, amount_incl_tax, payer_name, invoice_no, gst, payer_address, payer_email, payer_no, service, service_remark, po_number,hsn_code) VALUES (?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                  [
                    order_id,
                    takeDate,
                    incl_tax_amount,
                    name,
                    invoice_num,
                    tax,
                    address,
                    uid,
                    contact,
                    service,
                    remark,
                    po_number,
                    hsn_code,
                  ],
                  (errInc, resultInc) => {
                    if (errInc) {
                      console.log(errInc);
                    } else {
                      fs.writeFile(
                        `./offline_invoices/${invoice_num}.pdf`,
                        buffer,
                        (err) => {
                          if (err) {
                            console.error("Error saving PDF:", err);
                          } else {
                            console.log("Invoice Received");
                          }
                        }
                      );
                    }
                  }
                );
              } else {
                // Handle the case when the resultP.length is not 0
              }
            }
          }
        );
      }
    }
  );
});

// paid invoice
// ticket log invoice
app.put("/api/v1/paid/send/offline/invoice/log", (req, res) => {
  const { dataUri, invoice_num } = req.body;

  const buffer = Buffer.from(dataUri.split(",")[1], "base64");

  fs.writeFileSync(`./offline_invoices/${invoice_num}.pdf`, buffer);
  console.log("Invoice Recieved");
});

// get offline data for tables
app.get("/api/v1/table/get/offline/invoice/data", (req, res) => {
  try {
    db.query(
      "SELECT * FROM `main_admin_db`.offline_myvedait_invoices_corp_cust",
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {
    console.log(error);
  }
});

// get offline data for tables
app.get("/api/v1/table/get/offline/individual/invoice/data", (req, res) => {
  try {
    db.query(
      "SELECT * FROM `main_admin_db`.offline_myveda_course_invoices",
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {
    console.log(error);
  }
});
// footer data
app.get("/footer/data", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.cert_info;", (err, result) => {
    if (err) console.log(err);
    else res.send(result);
  });
});

// footer data services
app.get("/footer/data/services", (req, res) => {
  db.query("SELECT * FROM main_admin_db.footer_service_home", (err, result) => {
    if (err) console.log(err);
    else res.send(result);
  });
});
//get all user of coupon
app.get("/get/table/data/coupon/users/:id", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.coupon_used_by where coupon_id = ?",
    [req.params.id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//coupon id status
app.put("/update/coupon/status", (req, res) => {
  const { uid, coupon } = req.body;
  //

  db.query(
    "UPDATE main_admin_db.coupon_table SET status = ? where coupon_id = ?",
    [0, coupon],
    (err, result) => {
      if (err) console.log(err);
      else {
        db.query(
          "INSERT INTO main_admin_db.coupon_used_by(uid,coupon_id) values(?,?)",
          [uid, coupon],
          (err1, result1) => {
            if (err1) console.log(err1);
            else {
              db.query(
                "SELECT * FROM main_admin_db.coupon_table where coupon_id = ?",
                [coupon],
                (err2, result2) => {
                  if (err2) console.log(err2);
                  else {
                    let coupon_used = result2[0].coupon_used;

                    console.log(coupon_used);
                    let used = coupon_used + 1;
                    db.query(
                      "UPDATE main_admin_db.coupon_table SET coupon_used = ? where coupon_id = ?",
                      [used, coupon],
                      (err3, result4) => {
                        if (err3) console.log(err3);
                        else {
                          db.query(
                            "SELECT * FROM main_admin_db.coupon_table where coupon_id = ?",
                            [coupon],
                            (err4, result4) => {
                              if (err4) console.log(err4);
                              else {
                                let uses = result4[0].uses;
                                let used_coupon = result4[0].coupon_used;

                                let remain = uses - used_coupon;
                                db.query(
                                  "UPDATE main_admin_db.coupon_table SET uses_remain = ? where coupon_id = ?",
                                  [remain, coupon],
                                  (err5, result5) => {
                                    if (err5) console.log(err5);
                                    else {
                                      res.send(result5);
                                    }
                                  }
                                );
                              }
                            }
                          );
                        }
                      }
                    );
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});
//get add course id
app.get("/get/course/id/:course/:iso", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.add_courses where course_ttl = ? AND standard= ?",
    [req.params.course, req.params.iso],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
app.get("/service/data/:id", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.product_cat where id = ?",
    [parseInt(req.params.id)],
    (err, result) => {
      if (err) console.log(err);
      else {
        res.send(result);
      }
    }
  );
});
// get category details of selected category pages
app.get("/get/product/service/data/:id", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.product_cat where route_name = ?",
    [req.params.id],
    (err, result) => {
      if (err) console.log(err);
      else {
        const category = result[0]?.category_title;
        db.query(
          "SELECT * FROM main_admin_db.product_services where product_cat = ?",
          [category],
          (err2, result2) => {
            if (err2) console.log(err2);
            else {
              res.send({
                result1: result,
                result2: result2,
              });
            }
          }
        );
      }
    }
  );
});
app.get("/infra/get/product/service/data", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.product_cat where id = ?",
    [4],
    (err, result) => {
      if (err) console.log(err);
      else {
        const category = result[0]?.category_title;
        db.query(
          "SELECT * FROM main_admin_db.product_services where product_cat = ?",
          [category],
          (err2, result2) => {
            if (err2) console.log(err2);
            else {
              res.send({
                result1: result,
                result2: result2,
              });
            }
          }
        );
      }
    }
  );
});
app.get("/myitshop/get/product/service/data", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.product_cat where id = ?",
    [3],
    (err, result) => {
      if (err) console.log(err);
      else {
        const category = result[0]?.category_title;
        db.query(
          "SELECT * FROM main_admin_db.product_services where product_cat = ?",
          [category],
          (err2, result2) => {
            if (err2) console.log(err2);
            else {
              res.send({
                result1: result,
                result2: result2,
              });
            }
          }
        );
      }
    }
  );
});
app.get("/myveda/lms/get/product/service/data", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.product_cat where id = ?",
    [7],
    (err, result) => {
      if (err) console.log(err);
      else {
        const category = result[0]?.category_title;
        db.query(
          "SELECT * FROM main_admin_db.product_services where product_cat = ?",
          [category],
          (err2, result2) => {
            if (err2) console.log(err2);
            else {
              res.send({
                result1: result,
                result2: result2,
              });
            }
          }
        );
      }
    }
  );
});
app.get("/webdev/get/product/service/data", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.product_cat where id = ?",
    [5],
    (err, result) => {
      if (err) console.log(err);
      else {
        const category = result[0]?.category_title;
        db.query(
          "SELECT * FROM main_admin_db.product_services where product_cat = ?",
          [category],
          (err2, result2) => {
            if (err2) console.log(err2);
            else {
              res.send({
                result1: result,
                result2: result2,
              });
            }
          }
        );
      }
    }
  );
});
app.get("/compliance/get/product/service/data", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.product_cat where id = ?",
    [6],
    (err, result) => {
      if (err) console.log(err);
      else {
        const category = result[0]?.category_title;
        db.query(
          "SELECT * FROM main_admin_db.product_services where product_cat = ?",
          [category],
          (err2, result2) => {
            if (err2) console.log(err2);
            else {
              res.send({
                result1: result,
                result2: result2,
              });
            }
          }
        );
      }
    }
  );
});

app.get("/praxis/get/product/service/data", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.product_cat where id = ?",
    [8],
    (err, result) => {
      if (err) console.log(err);
      else {
        res.send(result);
      }
    }
  );
});
app.get("/myshop/get/product/service/data", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.product_cat where id = ?",
    [9],
    (err, result) => {
      if (err) console.log(err);
      else {
        res.send(result);
      }
    }
  );
});
app.get("/myhrms/get/product/service/data", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.product_cat where id = ?",
    [10],
    (err, result) => {
      if (err) console.log(err);
      else {
        res.send(result);
      }
    }
  );
});

//  get data for testinomial
app.get("/api/v1/get/data/user/pass/testinomials", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.add_courses", (err, result) => {
    if (err) console.log(err);
    else {
      const allData = result;
      const sendArrayData = [];
      allData.forEach((item, index, arr) => {
        const take_id = item.course_id;
        const course_id = take_id.toLowerCase().replace("-", "_");

        db.query(
          `SELECT t3.course_ttl,t2.img,t2.firstName,t2.lastName
          FROM \`myveda-db\`.?? AS t1
          INNER JOIN \`myveda-db\`.customer_reg AS t2 ON t1.uid = t2.businessMail
          INNER JOIN \`myveda-db\`.add_courses AS t3 on t1.course_id = t3.course_id
          WHERE t1.stats_apt1 = 'PASS' OR t1.stats_apt2 = 'PASS' OR t1.stats_apt3 = 'PASS' ORDER BY RAND() LIMIT 10;
          `,
          [course_id],
          (err2, result2) => {
            if (err2) console.log(err2);
            else {
              sendArrayData.push(result2);

              if (Object.is(arr.length - 1, index)) {
                // execute last item logic
                res.send(sendArrayData);
              }
            }
          }
        );
      });
    }
  });
});
// get category details of selected category pages
app.get("/api/v1/get/sub/servce/data/:id", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.product_services where id = ?",
    [req.params.id],
    (err, result) => {
      if (err) console.log(err);
      else {
        const category = result[0]?.product_cat;
        db.query(
          "SELECT * FROM main_admin_db.product_cat where category_title = ?",
          [category],
          (err2, result2) => {
            if (err2) console.log(err2);
            else {
              res.send({
                result1: result,
                result2: result2,
              });
            }
          }
        );
      }
    }
  );
});
// get all card data for it soution
app.get("/get/all/data/solutions/it", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.myit_services where cat_name = ?",
    ["MyIT Support Fault Tickets"],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// send data for ticket log for soltuibs
app.post("/service/ticket/log", (req, res) => {
  var today = new Date();
  var dd = String(today.getDate()).padStart(2, "0");
  var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
  var yyyy = today.getFullYear();

  today = yyyy + mm + dd;
  today1 = yyyy + "-" + mm + "-" + dd;

  const { name, mail, city, number, message, address } = req.body.formData;

  function formatAMPM(date) {
    var hours = date.getHours();
    var minutes = date.getMinutes();
    var ampm = hours >= 12 ? "pm" : "am";
    hours = hours % 12;
    hours = hours ? hours : 12; // the hour '0' should be '12'
    minutes = minutes < 10 ? "0" + minutes : minutes;
    var strTime = hours + ":" + minutes + " " + ampm;
    return strTime;
  }

  var time = formatAMPM(new Date());
  const { hsnHacData } = req.body;

  db.query(
    "insert into main_admin_db.myit_all_ticket_customers(order_id,name,mail,phone,problem_type,city,address,msg,ticket_id,status,first_visit_charges,gst_tax,ccav_order_status,hsn_hac) value (?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
    [
      req.body.order_id,
      name,
      mail,
      number,
      req.body.id,
      city,
      address,
      message,
      req.body.ticket_id,
      0,
      req.body.amount,
      req.body.gst,
      "Pending",
      hsnHacData.hsn_code,
    ],
    (err, result) => {
      if (err) console.log(err);
      else {
        res.send({ message: true });
      }
    }
  );
});
// get data for invoice in ticket registration
app.get("/get/ticket/user/data/:uid", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.myit_all_ticket_customers where mail = ?",
    [req.params.uid],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// get service logo
app.get("/take/logo/service/:id", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.myit_services where sub_cat = ?",
    [req.params.id],
    (err, result) => {
      if (err) console.log(err);
      else {
        db.query(
          "SELECT * FROM main_admin_db.product_services where service_ttl = ?",
          [result[0]?.cat_name],
          (err2, result2) => {
            if (err2) console.log(err2);
            else {
              res.send(result2);
            }
          }
        );
      }
    }
  );
});
// get all service details data
app.get("/get/data/details/service/product/:id", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.product_services where id = ?",
    [req.params.id],
    (err, result) => {
      if (err) console.log(err);
      else {
        const product_cat = result[0]?.product_cat;
        db.query(
          "SELECT * FROM main_admin_db.product_cat where category_title = ?",
          [product_cat],
          (err2, result2) => {
            if (err2) console.log(err2);
            else
              res.send({
                result1: result,
                result2: result2,
              });
          }
        );
      }
    }
  );
});

//send email on contact
app.post("/contactus/message", (req, res) => {
  const { name, mail, country, number, message, selectCourse } =
    req.body.formData;
  const { category } = req.body;

  // node mailer
  const output = `

    <h3>Dear ${name} </h3>
    <p>Thanks For Showing Your Interest in MYVEDAIT Products / Serivces .</p>

    <p>Our support Team will shortly connect to you for addressing your query. Details are as follows:</p>


    ${
      req.body.service
        ? `<p>
          <b>Service :</b> ${req.body.service}
        </p>`
        : ""
    }

   ${
     category
       ? `<p>
         <b>Category :</b> ${category}
       </p>`
       : ""
   }

   ${
     selectCourse
       ? `
       <p>
         <b>Course :</b> ${selectCourse}
       </p>
     `
       : ""
   }


    <p><b>Query Remark :</b> ${message}</p>

    <p><b>Country :</b> ${country}</p>

    <p><b>Mobile :</b> ${number}</p>

    <p><b>E-mail ID :</b> ${mail}</p>

    

    


    <p>!!! This is an automatically system generated email ? please do not reply to it.</p>

    <p>Thanks & Best Regards</p>
    <p>MYVEDAIT TEAM</p>

    `;

  db.query("SELECT * FROM `myveda-db`.email_srv", (err, result) => {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
      let host1 = result[0]?.host;
      let port1 = result[0]?.port;
      let user1 = result[0]?.auth_uid;
      let pass1 = result[0]?.auth_pass;
      let fromEmail = result[0]?.from_email;
      let bccEmail = result[0]?.bcc_email;
      let transporter = nodemailer.createTransport({
        host: host1,
        port: port1,
        secure: true, // true for 465, false for other p orts
        auth: {
          user: user1, // generated ethereal user
          pass: pass1, // generated ethereal password
        },
      });

      // send mail with defined transport object
      let info = transporter
        .sendMail({
          from: `"" ${fromEmail}`, // sender address
          to: mail, // list of receivers
          subject: name + " Contact Message", // Subject line
          bcc: bccEmail,
          html: output, // html body
        })
        .then(() => {
          res.send(req.body);
        });
    }
  });
});
//trainer la all complaints
app.get("/usr/compaint/trainer/la", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.usr_reg_tcm_la", (err, result) => {
    if (err) console.log(err);
    else res.send(result);
  });
});
//get current complaint for trainer via user
app.get("/complaint/no/:uidTake", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.usr_reg_tcm_la where id = ?",
    [req.params.uidTake],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//

// register user api for state
app.get("/api/v1/learner/reg/select/state/data", (req, res) => {
  db.query("SELECT * FROM `myveda-db`.ind_state_data", (err, result) => {
    if (err) console.log(err);
    else {
      res.send(result);
    }
  });
});
// register user api for city
app.get("/api/v1/learner/reg/select/city/data/:city", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.state_district_data where state_c_name = ?",
    [req.params.city],
    (err, result) => {
      if (err) console.log(err);
      else {
        res.send(result);
      }
    }
  );
});
// register user api for city
app.get("/api/v1/learner/reg/select/sub/city/data/:id", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.state_city_sub_city_data where city_c_name = ?",
    [req.params.id],
    (err, result) => {
      if (err) console.log(err);
      else {
        res.send(result);
      }
    }
  );
});
// register  fault ticket form city
app.get("/api/v1/myit/fault/ticket/select/city/data", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.state_city_sub_city_data",
    [req.params.id],
    (err, result) => {
      if (err) console.log(err);
      else {
        res.send(result);
      }
    }
  );
});
//update complaint no.
app.put("/update/complaint/no", (req, res) => {
  db.query(
    "UPDATE `myveda-db`.usr_reg_tcm_la SET rca_remark = ?, action_remark = ?, status = ?, act_date = ?,act_time = ? where id = ? ",
    [
      req.body.rcaRm,
      req.body.acRm,
      2,
      req.body.date,
      req.body.time,
      req.body.id,
    ],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

// get data invoice for all courses on user
app.get("/api/v1/get/courses/invoice/data/online", (req, res) => {
  try {
    db.query(
      "SELECT * FROM `main_admin_db`.tax_invoice_order_myvedait",
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {
    console.log(error);
  }
});

app.get("/api/v1/get/myit/invoice/data/online", (req, res) => {
  try {
    db.query(
      "SELECT * FROM main_admin_db.myit_all_ticket_customers",
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {
    console.log(error);
  }
});

//test query
app.get("/tc/qeury", (req, res) => {
  let iso_code = "Q-LA";
  console.log(iso_code);
  const date = new Date();
  const today =
    (date.getMonth() + 1 < 10
      ? "0" + (date.getMonth() + 1)
      : date.getMonth() + 1) +
    "-" +
    +(date.getDate() < 10 ? "0" + date.getDate() : date.getDate()) +
    "-" +
    date.getFullYear();
  const batch_code = iso_code + "-" + today;
  db.query(
    "SELECT * FROM `myveda-db`.trainer_reg_table_la where batch_code = ?",
    [batch_code],
    (errTrain, resultTrain) => {
      if (errTrain) console.log(errTrain);
      else {
        let batch_code1 = resultTrain[0]?.batch_code;
        if (batch_code1 === batch_code) {
          console.log("false");
        } else {
          db.query(
            "SELECT * FROM `myveda-db`.trainer_reg_table_la WHERE batch_code = ? AND course_delivery_exp = ? LIMIT 1;",
            ["0", "TC-1"],
            (err, result) => {
              if (result.length === 0) {
                db.query(
                  "SELECT * FROM `myveda-db`.trainer_reg_table_la WHERE batch_code = ? AND course_delivery_exp = ? LIMIT 1;",
                  ["0", "TC-2"],
                  (err4, result4) => {
                    if (err4) console.log(err4);
                    else {
                      if (result4.length === 0) {
                        db.query(
                          "SELECT * FROM `myveda-db`.trainer_reg_table_la WHERE batch_code = ? AND course_delivery_exp = ? LIMIT 1;",
                          ["0", "TC-3"],
                          (err2, result2) => {
                            if (err2) console.log(err2);
                            else {
                              let email1 = result2[0]?.uid;
                              let email2 = result2[0]?.sec_uid;

                              db.query(
                                "UPDATE `myveda-db`.trainer_reg_table_la SET batch_code = ? where uid = ? and sec_uid = ? ",
                                [batch_code, email1, email2],
                                (err3, result3) => {
                                  if (err3) console.log(err3);
                                  else res.send(result3);
                                }
                              );
                            }
                          }
                        );
                      } else {
                        db.query(
                          "SELECT * FROM `myveda-db`.trainer_reg_table_la WHERE batch_code = ? AND course_delivery_exp = ? LIMIT 1;",
                          ["0", "TC-2"],
                          (err2, result2) => {
                            if (err2) console.log(err2);
                            else {
                              let email1 = result2[0].uid;
                              let email2 = result2[0].sec_uid;

                              db.query(
                                "UPDATE `myveda-db`.trainer_reg_table_la SET batch_code = ? where uid = ? and sec_uid = ? ",
                                [batch_code, email1, email2],
                                (err3, result3) => {
                                  if (err3) console.log(err3);
                                  else res.send(result3);
                                }
                              );
                            }
                          }
                        );
                      }
                    }
                  }
                );
              } else {
                db.query(
                  "SELECT * FROM `myveda-db`.trainer_reg_table_la WHERE batch_code = ? AND course_delivery_exp = ? LIMIT 1;",
                  ["0", "TC-1"],
                  (err2, result2) => {
                    if (err2) console.log(err2);
                    else {
                      let email1 = result2[0].uid;
                      let email2 = result2[0].sec_uid;

                      db.query(
                        "UPDATE `myveda-db`.trainer_reg_table_la SET batch_code = ? where uid = ? and sec_uid = ? ",
                        [batch_code, email1, email2],
                        (err3, result3) => {
                          if (err3) console.log(err3);
                          else res.send(result3);
                        }
                      );
                    }
                  }
                );
              }
            }
          );
        }
      }
    }
  );
});
// referal Program Api's
app.post("/api/v1/post/ref/program/data", (req, res) => {
  try {
    const { name, email, number, service } = req.body;
    function generateAlphaNumericCode() {
      var characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
      var code = "";

      for (var i = 0; i < 10; i++) {
        var randomIndex = Math.floor(Math.random() * characters.length);
        code += characters.charAt(randomIndex);
      }

      return code;
    }

    // Example usage:
    var randomCode = generateAlphaNumericCode();

    db.query(
      "insert into main_admin_db.referral_program(referral_no,referral_to_name,referral_to_email,referral_to_no,status,service) values(?,?,?,?,?,?)",
      [randomCode, name, email, number, "Pending", service],
      (err, result) => {
        if (err) console.log(err);
        else
          res.send({
            result: result,
            ref_code: randomCode,
          });
      }
    );
  } catch (error) {
    console.log(error);
  }
});
// update referal Program Api's
app.put("/api/v1/update/ref/program/data", (req, res) => {
  try {
    const { name, email, number, aadhar, ref_no } = req.body;
    db.query(
      "update main_admin_db.referral_program set referral_from_name = ?, referral_from_email = ?, referral_from_no = ?, referral_from_aadhar = ? where referral_no = ?",
      [name, email, number, aadhar, ref_no],
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {
    console.log(error);
  }
});
// finish referral Program
app.get("/api/v1/get/ref/program/data/:id", (req, res) => {
  try {
    db.query(
      "select * from main_admin_db.referral_program where referral_no = ?",
      [req.params.id],
      (err, result) => {
        if (err) console.log(err);
        else {
          db.query(
            "SELECT * FROM `myveda-db`.email_temp_referral_program",
            (err2, result2) => {
              if (err2) console.log(err2);
              else {
                const subject = result2[0].subject;
                const msg = result2[0].message;
                const caution = result2[0].caution;
                const sign = result2[0].signature;

                const output = `
  
    <h3>Dear ${result[0]?.referral_to_name} </h3>
    <p> ${msg}
    </p>

    <h3>Referee Details :</h3>

    <p><b>Name : ${result[0]?.referral_to_name}</b></p>

    <p><b>E-mail ID : ${result[0]?.referral_to_email}</b></p>

    <p><b>Phone : ${result[0]?.referral_to_no}</b></p>


    <h3>Referrer Details :</h3>

    <p><b>Name : ${result[0]?.referral_from_name}</b></p>

    <p><b>E-mail ID : ${result[0]?.referral_from_email}</b></p>

    <p><b>Phone : ${result[0]?.referral_from_no}</b></p>

    <p><b>Aadhar ID : ${result[0]?.referral_from_aadhar}</b></p>



   

   <p>${caution}</p>

    <p>Thanks &#38; Best Regards </p>

    <p>${sign}</p>


    `;

                db.query(
                  "SELECT * FROM `myveda-db`.email_srv",
                  (err, result) => {
                    if (err) {
                      console.log(err);
                    } else {
                      console.log(result);
                      let host1 = result[0]?.host;
                      let port1 = result[0]?.port;
                      let user1 = result[0]?.auth_uid;
                      let pass1 = result[0]?.auth_pass;
                      let fromEmail = result[0]?.from_email;
                      let bccEmail = "sales@myvedait.com";
                      let transporter = nodemailer.createTransport({
                        host: host1,
                        port: port1,
                        secure: true, // true for 465, false for other p orts
                        auth: {
                          user: user1, // generated ethereal user
                          pass: pass1, // generated ethereal password
                        },
                      });

                      // send mail with defined transport object
                      let info = transporter.sendMail({
                        from: `"" ${fromEmail}`, // sender address
                        // list of receivers
                        subject: subject, // Subject line
                        to: result[0].referral_from_email,
                        bcc: `${bccEmail}, ${result[0].referral_to_email}`,
                        html: output, // html body
                      });
                    }
                  }
                );
              }
            }
          );
        }
      }
    );
  } catch (error) {
    console.log(error);
  }
});

// 22-06-23

app.get("/api/v1/get/price/my/it/ft/ticket", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.product_cat where id = 2",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//

//remain user
app.get("/forevaluateuserexam/:course_id", (req, res) => {
  const { course_id } = req.params;

  const tableName = course_id.toLowerCase().replace("-", "_");
  // let cust_id = getCurrentCr.toUpperCase() + number_slice + "IND0";
  db.query(
    "SELECT * FROM `myveda-db`.?? where ( tfq_sc_apt1 != '' and scq_sc_apt1 !='' and ques_1_apt1 != '' and ans_1_apt1 != '' and (stats_apt1 = 'Pending' OR stats_apt1 = 'FAIL')  and (stats_apt2 = '' OR stats_apt2='FAIL') and stats_apt3='')",
    [tableName],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//
app.get("/api/v1/get/leaner/reg/data/course/reg/table/:id", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.myveda_indi_cust_ids where cust_id = ?",
    [req.params.id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

// referral programs

app.get("/api/v1/referral/get/data/users/:id", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.referral_program where status = ?",
    [req.params.id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
app.put("/api/v1/referral/update/status", (req, res) => {
  const { ref_id, status, answer, pay_remark } = req.body;

  db.query(
    "update main_admin_db.referral_program set status = ?, referral_remark = ?,payment_remark = ? where referral_no = ?",
    [status, answer, pay_remark, ref_id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//Send Career data of user
app.post("/api/v1/post/career/data/send", (req, res) => {
  const { name, phone, email, exp, role } = req.body;

  var today = new Date();
  var dd = String(today.getDate()).padStart(2, "0");
  var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
  var yyyy = today.getFullYear();

  today = yyyy + "-" + mm + "-" + dd;

  const { file } = req.files;
  if (file) {
    fs.writeFileSync(`./career_resume/${email}.pdf`, file?.data);
    db.query(
      "insert into main_admin_db.career_resumes_table(name,email,number,experience,resume_name,role,apply_date,hiring_status) values(?,?,?,?,?,?,?,?)",
      [name, email, phone, exp, email + ".pdf", role, today, 0],
      (err, result) => {
        if (err) console.log(err);
        else {
          db.query(
            "SELECT * FROM main_admin_db.email_temp_career_form",
            (err1, result1) => {
              if (err1) console.log(err1);
              else {
                const subject = result1[0].subject;
                const msg = result1[0].message;
                const caution = result1[0].caution;
                const sign = result1[0].signature;

                const output = `
    
      <h3>Dear ${name} </h3>
      <p> ${msg}
      </p>
      <p><b>Post Applied : ${role}</b></p>
  
      <p><b>Applicant Name : ${name}</b></p>
  
      <p><b>E-mail ID : ${email}</b></p>
  
      <p><b>Phone : ${phone}</b></p>
  
      <p><b>Experience : ${exp}</b></p>

  
      <p><u><b>Caution : ${caution}</b></u></p>
  
     
  
      <p>Thanks &#38; Best Regards </p>
  
      <p>${sign}</p>
  
  
      `;

                db.query(
                  "SELECT * FROM `myveda-db`.email_srv",
                  (err, result) => {
                    if (err) {
                      console.log(err);
                    } else {
                      console.log(result);
                      let host1 = result[0]?.host;
                      let port1 = result[0]?.port;
                      let user1 = result[0]?.auth_uid;
                      let pass1 = result[0]?.auth_pass;
                      let fromEmail = result[0]?.from_email;
                      let bccEmail = result[0]?.bcc_email;
                      let transporter = nodemailer.createTransport({
                        host: host1,
                        port: port1,
                        secure: true, // true for 465, false for other p orts
                        auth: {
                          user: user1, // generated ethereal user
                          pass: pass1, // generated ethereal password
                        },
                      });

                      // send mail with defined transport object
                      let info = transporter
                        .sendMail({
                          from: `"" ${fromEmail}`, // sender address
                          // list of receivers
                          to: email,
                          subject: subject, // Subject line
                          bcc: "hr@myvedait.com",
                          html: output, // html body
                        })
                        .then(() => {
                          res.send(result);
                        });
                    }
                  }
                );
              }
            }
          );
        }
      }
    );
  } else {
    console.log("err");
  }
});
// getCareer data for admin view
app.get("/api/v1/career/resume/data", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.career_resumes_table",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//HSN SAC Data table code
app.get("/api/v1/get/hsn/sac/data/code", (req, res) => {
  db.query("SELECT * FROM main_admin_db.hsn_sac_table", (err, result) => {
    if (err) console.log(err);
    else res.send(result);
  });
});

// Update Career form email Template admin

app.put("/api/v1/career/email/temp/subject", (req, res) => {
  const subject = req.body.subject1;
  db.query(
    "UPDATE `main_admin_db`.email_temp_career_form SET subject =?  WHERE id = 1",
    [subject],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

app.put("/api/v1/career/email/temp/url", (req, res) => {
  const url = req.body.url;
  db.query(
    "UPDATE `main_admin_db`.email_temp_career_form SET url =?  WHERE id = 1",
    [url],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

app.put("/api/v1/career/email/temp/msg", (req, res) => {
  const message = req.body.message;
  db.query(
    "UPDATE `main_admin_db`.email_temp_career_form SET message =?  WHERE id = 1",
    [message],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

app.put("/api/v1/career/email/temp/caution", (req, res) => {
  const caution = req.body.caution;
  db.query(
    "UPDATE `main_admin_db`.email_temp_career_form SET caution =?  WHERE id = 1",
    [caution],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

app.put("/api/v1/career/email/temp/sign", (req, res) => {
  const sign = req.body.sign;
  db.query(
    "UPDATE `main_admin_db`.email_temp_career_form SET signature =?  WHERE id = 1",
    [sign],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

app.get("/api/v1/get/data/career/email/temp", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.email_temp_career_form",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

// myitshop exceptation form details data for admin
app.post("/api/v1/post/myit/shop/form/data", (req, res) => {
  const {
    name,
    mail,
    city,
    number,
    address,
    oth_product_remark,
    product,
    purpose,
    printer_page,
  } = req.body;
  db.query(
    "SELECT * FROM main_admin_db.myitshop_except_details_form where email = ? and product_name = ?",
    [mail, product],
    (err, result) => {
      if (err) console.log(err);
      else {
        if (result.length === 0) {
          db.query(
            "insert into main_admin_db.myitshop_except_details_form (product_name,product_purpose,other_product_remark,full_name,email,number,city,address,printer_avg_per_day_page) values(?,?,?,?,?,?,?,?,?)",
            [
              product,
              purpose,

              oth_product_remark ? oth_product_remark : "",
              name,
              mail,
              number,
              city,
              address,
              printer_page,
            ],
            (err2, result2) => {
              if (err2) console.log(err);
              else {
                db.query(
                  "SELECT * FROM main_admin_db.email_temp_myitshop_except_form",
                  (err1, result1) => {
                    if (err1) console.log(err1);
                    else {
                      const subject = result1[0].subject;
                      const msg = result1[0].message;
                      const caution = result1[0].caution;
                      const sign = result1[0].signature;

                      const output = `
          
            <h3>Dear ${name} </h3>
            <p> ${msg}
            </p>
        
            <p><b>Name : ${name}</b></p>
        
            <p><b>E-mail ID : ${mail}</b></p>
        
            <p><b>Phone : ${number}</b></p>
      
            <p><b>Product : ${product}</b></p>
        
            <p><b>Purpose : ${purpose}</b></p>

            <p><b>Address : ${address}</b></p>

                
            <p>Thanks &#38; Best Regards </p>
        
            <p>${sign}</p>
        
        
            `;

                      db.query(
                        "SELECT * FROM `myveda-db`.email_srv",
                        (err, result) => {
                          if (err) {
                            console.log(err);
                          } else {
                            res.send(result2);
                            let host1 = result[0]?.host;
                            let port1 = result[0]?.port;
                            let user1 = result[0]?.auth_uid;
                            let pass1 = result[0]?.auth_pass;
                            let fromEmail = result[0]?.from_email;
                            let bccEmail = result[0]?.bcc_email;
                            let transporter = nodemailer.createTransport({
                              host: host1,
                              port: port1,
                              secure: true, // true for 465, false for other p orts
                              auth: {
                                user: user1, // generated ethereal user
                                pass: pass1, // generated ethereal password
                              },
                            });

                            // send mail with defined transport object
                            let info = transporter.sendMail({
                              from: `"" ${fromEmail}`, // sender address
                              // list of receivers
                              to: mail,
                              subject: subject, // Subject line
                              bcc: ["hr@myvedait.com", bccEmail],
                              html: output, // html body
                            });
                          }
                        }
                      );
                    }
                  }
                );
              }
            }
          );
        } else {
          // res.status(120).send();
          res.json({
            err: "data is there",
          });
        }
      }
    }
  );
});
// admin : get all rows data in admin from exceptation detailss form
app.get("/api/v1/get/data/myit/shop/except/form", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.myitshop_except_details_form order by id desc",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

// email template of Exceptation form
//  email config subject
app.put("/api/v1/update/email/temp/except/form/subject", (req, res) => {
  const subject = req.body.subject1;
  db.query(
    "UPDATE `main_admin_db`.email_temp_myitshop_except_form SET subject =?  WHERE id = 1",
    [subject],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//update url of
app.put("/api/v1/update/email/temp/except/form/url", (req, res) => {
  const url = req.body.url;
  db.query(
    "UPDATE `main_admin_db`.email_temp_myitshop_except_form SET url =?  WHERE id = 1",
    [url],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update message of
app.put("/api/v1/update/email/temp/except/form/msg", (req, res) => {
  const message = req.body.message;
  db.query(
    "UPDATE `main_admin_db`.email_temp_myitshop_except_form SET message =?  WHERE id = 1",
    [message],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update caution of
app.put("/api/v1/update/email/temp/except/form/caution", (req, res) => {
  const caution = req.body.caution;
  db.query(
    "UPDATE `main_admin_db`.email_temp_myitshop_except_form SET caution =?  WHERE id = 1",
    [caution],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update sign of
app.put("/api/v1/update/email/temp/except/form/sign", (req, res) => {
  const sign = req.body.sign;
  db.query(
    "UPDATE `main_admin_db`.email_temp_myitshop_except_form SET signature =?  WHERE id = 1",
    [sign],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
// get all data of rows from db exceptation email templae
app.get("/api/v1/get/data/myitshop/expectation/form", (req, res) => {
  db.query(
    "select * from `main_admin_db`.email_temp_myitshop_except_form",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

// get all country code
app.get("/api/v1/get/all/countries/code", (req, res) => {
  db.query("SELECT * FROM main_admin_db.country_code_list", (err, result) => {
    if (err) console.log(err);
    else res.send(result);
  });
});

app.get("/get/temp/eval/exam/info", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.email_temp_exam_eval_staus",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//eval exam temp email config subject
app.put("/api/v1/eval/pending/temp/subject", (req, res) => {
  const subject = req.body.subject1;
  db.query(
    "UPDATE `myveda-db`.email_temp_exam_eval_staus SET subject =?  WHERE id = 1",
    [subject],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//eval exam temp url
app.put("/api/v1/eval/pending/temp/url", (req, res) => {
  const url = req.body.url;
  db.query(
    "UPDATE `myveda-db`.email_temp_exam_eval_staus SET url =?  WHERE id = 1",
    [url],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//eval exam temp message o
app.put("/api/v1/eval/pending/temp/msg", (req, res) => {
  const message = req.body.message;
  db.query(
    "UPDATE `myveda-db`.email_temp_exam_eval_staus SET message =?  WHERE id = 1",
    [message],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//eval exam temp caution
app.put("/api/v1/eval/pending/temp/caution", (req, res) => {
  const caution = req.body.caution;
  db.query(
    "UPDATE `myveda-db`.email_temp_exam_eval_staus SET caution =?  WHERE id = 1",
    [caution],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//eval exam temp sign
app.put("/api/v1/eval/pending/temp/sign", (req, res) => {
  const sign = req.body.sign;
  db.query(
    "UPDATE `myveda-db`.email_temp_exam_eval_staus SET signature =?  WHERE id = 1",
    [sign],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//update course id
app.put("/api/v1/update/course/id/admin", (req, res) => {
  const { course_id, new_course_id } = req.body;

  const table = course_id.replace("-", "_").toLowerCase();
  const newTable = new_course_id.replace("-", "_").toLowerCase();
  try {
    db.query(
      "RENAME TABLE `myveda-db`.?? TO `myveda-db`.??",
      [table, newTable],
      (err1, result1) => {
        if (err1) console.log(err1);
        else {
          db.query(
            "update `myveda-db`.add_courses set course_id = ? where course_id = ?",
            [new_course_id, course_id],
            (err, result) => {
              if (err) console.log(err);
              else {
                console.log(result);
                res.send(result);
              }
            }
          );
        }
      }
    );
  } catch (error) {
    console.log(error);
  }
});

app.put("/api/v1/update/course/title/admin", (req, res) => {
  const { course_id, course_title } = req.body;
  try {
    db.query(
      "update `myveda-db`.add_courses set course_ttl = ? where course_id = ?",
      [course_title, course_id],
      (err, result) => {
        if (err) console.log(err);
        else {
          res.send(result);
        }
      }
    );
  } catch (error) {}
});
app.put("/api/v1/update/course/type/admin", (req, res) => {
  const { course_id, course_type } = req.body;
  try {
    db.query(
      "update `myveda-db`.add_courses set course_category = ? where course_id = ?",
      [course_type, course_id],
      (err, result) => {
        if (err) console.log(err);
        else {
          res.send(result);
        }
      }
    );
  } catch (error) {}
});
app.put("/api/v1/update/course/qb/id/admin", (req, res) => {
  const { new_qb_id, course_id } = req.body;
  try {
    db.query(
      "update `myveda-db`.add_courses set qb_id = ? where course_id = ?",
      [new_qb_id, course_id],
      (err, result) => {
        if (err) console.log(err);
        else {
          res.send(result);
        }
      }
    );
  } catch (error) {}
});
app.put("/api/v1/update/course/pqb/id/admin", (req, res) => {
  const { new_pqb_id, course_id } = req.body;
  try {
    db.query(
      "update `myveda-db`.add_courses set p_qb_id = ? where course_id = ?",
      [new_pqb_id, course_id],
      (err, result) => {
        if (err) console.log(err);
        else {
          res.send(result);
        }
      }
    );
  } catch (error) {}
});
app.put("/api/v1/update/course/std/admin", (req, res) => {
  const { new_standard, course_id } = req.body;
  try {
    db.query(
      "update `myveda-db`.add_courses set standard = ? where course_id = ?",
      [new_standard, course_id],
      (err, result) => {
        if (err) console.log(err);
        else {
          res.send(result);
        }
      }
    );
  } catch (error) {}
});

// get course attribute table
app.get("/api/v1/get/get/courses/attribute/data/:value", (req, res) => {
  const { value } = req.params;
  try {
    db.query(
      "SELECT * FROM `myveda-db`.course_attrb where l_mode = ?",
      [value],
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {
    console.log(error);
  }
});
// get data from table by id or name
app.get("/api/v1/get/course/attr/data/:course_title/:l_mode", (req, res) => {
  const { course_title, l_mode } = req.params;
  try {
    db.query(
      "SELECT * FROM `myveda-db`.course_attrb where course_title = ? and l_mode = ?",
      [course_title, l_mode],
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {}
});

app.put("/api/v1/update/learn/mode/course", (req, res) => {
  const { lModeText, id } = req.body;
  try {
    db.query(
      "update `myveda-db`.course_attrb set l_mode_title = ?, l_mode = ? where id= ?",
      [
        lModeText === "1" ? "Self Learning Only" : "Self Learning With Trainer",
        lModeText,
        id,
      ],
      (err, result) => {
        if (err) console.log(err);
        else {
          res.send(result);
        }
      }
    );
  } catch (error) {}
});

app.put("/api/v1/update/price/inr/course", (req, res) => {
  const { price, id } = req.body;
  try {
    db.query(
      "update `myveda-db`.course_attrb set price_inr = ? where id= ?",
      [price, id],
      (err, result) => {
        if (err) console.log(err);
        else {
          res.send(result);
        }
      }
    );
  } catch (error) {}
});
app.put("/api/v1/update/price/oth/course", (req, res) => {
  const { price, id } = req.body;
  try {
    db.query(
      "update `myveda-db`.course_attrb set price_oth = ? where id= ?",
      [price, id],
      (err, result) => {
        if (err) console.log(err);
        else {
          res.send(result);
        }
      }
    );
  } catch (error) {}
});

app.put("/api/v1/update/duration/course/attrib", (req, res) => {
  const { duration, id } = req.body;
  try {
    db.query(
      "update `myveda-db`.course_attrb set duration = ? where id= ?",
      [duration, id],
      (err, result) => {
        if (err) console.log(err);
        else {
          res.send(result);
        }
      }
    );
  } catch (error) {}
});
app.put("/api/v1/update/min/time/course/attrib", (req, res) => {
  const { time, id } = req.body;
  try {
    db.query(
      "update `myveda-db`.course_attrb set min_hours = ? where id= ?",
      [time, id],
      (err, result) => {
        if (err) console.log(err);
        else {
          res.send(result);
        }
      }
    );
  } catch (error) {}
});
app.put("/api/v1/update/content/course/attrib", (req, res) => {
  const { content, id } = req.body;
  try {
    db.query(
      "update `myveda-db`.course_attrb set course_content = ? where id= ?",
      [content, id],
      (err, result) => {
        if (err) console.log(err);
        else {
          res.send(result);
        }
      }
    );
  } catch (error) {}
});
// map demo cust_id

app.put("/api/v1/update/demo/cust/id", (req, res) => {
  const { cust_id } = req.body;
  try {
    db.query(
      "UPDATE `myveda-db`.comp_cust_req_db SET demo = 0",
      (err, result) => {
        if (err) {
          // Handle the error
          console.error(err);
        } else {
          // Now update the target row
          db.query(
            "UPDATE `myveda-db`.comp_cust_req_db SET demo = 1 WHERE cust_id = ?",
            [cust_id],
            (err, result) => {
              if (err) {
                // Handle the error
                console.error(err);
              } else {
                // Return the success response
                res.status(200).json({ message: "Row updated successfully" });
              }
            }
          );
        }
      }
    );
  } catch (error) {
    // Handle any other errors that might occur during the try block
    console.error(error);
    res.status(500).json({ message: "Internal Server Error" });
  }
});

// get individual learner reg
app.get("/api/v1/get/learner/reg/data/:id", (req, res) => {
  console.log(req.params.id);
  const { id } = req.params;
  if (id === "IND0") {
    db.query(
      "SELECT uid, cust_id, iso_std, course_id, batch_code, reg_date, GROUP_CONCAT(course) as course FROM `myveda-db`.user_course_map_table_la where cust_id LIKE '%IND0%' GROUP BY uid, cust_id, iso_std, course_id, batch_code, reg_date",
      (err, result) => {
        if (err) console.error(err);
        else res.send(result);
      }
    );
  } else {
    db.query(
      "SELECT uid, cust_id, iso_std, course_id, batch_code, reg_date, GROUP_CONCAT(course) as course FROM `myveda-db`.user_course_map_table_la WHERE cust_id NOT LIKE '%IND0%' GROUP BY uid, cust_id, iso_std, course_id, batch_code, reg_date",
      (err, result) => {
        if (err) console.error(err);
        else res.send(result);
      }
    );
  }
});

// update feedback when action has taken by admin
app.put("/api/v1/update/feedback/action/taken", (req, res) => {
  const { action, id } = req.body;
  try {
    db.query(
      "update `myveda-db`.usr_feedbck set action_taken = ? where id = ?",
      [action, id],
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {
    console.error(error);
  }
});

app.get("/api/v1/get/count/data/feedback", (req, res) => {
  try {
    db.query(
      `SELECT *,
    rating_point_q1 + rating_point_q2 + rating_point_q3 AS total_points
  FROM
    \`myveda-db\`.usr_feedbck
  having
    total_points >= 6`,
      (err, result) => {
        if (err) console.log(err);
        else {
          db.query(
            `SELECT *,
    rating_point_q1 + rating_point_q2 + rating_point_q3 AS total_points
  FROM
    \`myveda-db\`.usr_feedbck
  having
    total_points < 5`,
            (err2, result2) => {
              if (err2) console.log(err2);
              else {
                res.send([
                  {
                    value: "CSAT SCORE < 6",
                    "CSAT SCORE < 6": result2.length,
                  },
                  {
                    value: "CSAT SCORE > 6",
                    "CSAT SCORE > 6": result.length,
                  },
                ]);
              }
            }
          );
        }
      }
    );
  } catch (error) {}
});
// get course id table exam data

app.get("/api/v1/get/all/user/course/:value", (req, res) => {
  const { value } = req.params;
  const tableName = value.toLowerCase().replace("-", "_");
  try {
    db.query("select * from `myveda-db`.??", [tableName], (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    });
  } catch (error) {}
});

// learner Helpdesk
app.get("/api/v1/get/learner/helpdesk/data", (req, res) => {
  try {
    db.query(
      `SELECT * FROM \`myveda-db\`.usr_hlpdsk where status = ?`,
      ["In-Progress"],
      (err, result) => {
        if (err) console.log(err);
        else {
          db.query(
            `SELECT * FROM \`myveda-db\`.usr_hlpdsk where status = ?`,
            ["Resolved"],
            (err2, result2) => {
              if (err2) console.log(err2);
              else {
                res.send([
                  {
                    value: "Resolved",
                    Resolved: result2.length,
                  },
                  {
                    value: "In-Progress",
                    "In-Progress": result.length,
                  },
                ]);
              }
            }
          );
        }
      }
    );
  } catch (error) {}
});

// learner Helpdesk
app.get("/api/v1/get/trainer/helpdesk/data", (req, res) => {
  try {
    db.query(
      `SELECT * FROM \`myveda-db\`.usr_reg_tcm_la where status = ?`,
      [0],
      (err, result) => {
        if (err) console.log(err);
        else {
          db.query(
            `SELECT * FROM \`myveda-db\`.usr_reg_tcm_la where status = ?`,
            [1],
            (err2, result2) => {
              if (err2) console.log(err2);
              else {
                db.query(
                  `SELECT * FROM \`myveda-db\`.usr_reg_tcm_la where status = ?`,
                  [2],
                  (err3, result3) => {
                    if (err3) console.log(err3);
                    else {
                      res.send([
                        {
                          value: "TR_REM_Pending",
                          TR_REM_Pending: result.length,
                        },
                        {
                          value: "ADM_REV_Pending",
                          ADM_REV_Pending: result2.length,
                        },
                        {
                          value: "Resolved",
                          Resolved: result3.length,
                        },
                      ]);
                    }
                  }
                );
              }
            }
          );
        }
      }
    );
  } catch (error) {}
});
// map course id to customer id in corp_cust_course_ids
app.put("/api/v1/update/course/id/cust", (req, res) => {
  try {
    console.log(req.body);
    const { cust_id, course_ids } = req.body;

    // Assuming you're using a Promise-based approach for the db.query method

    const insertPromises = [];

    course_ids.forEach((element) => {
      console.log(element);

      const promise = new Promise((resolve, reject) => {
        db.query(
          "SELECT * FROM `myveda-db`.corp_cust_course_ids where cust_id = ? and course_id = ?",
          [cust_id, element],
          (err, result) => {
            if (err) {
              console.log(err);
              reject(err);
            } else {
              if (!result.length) {
                db.query(
                  "insert into  `myveda-db`.corp_cust_course_ids(cust_id,course_id) value(?,?)",
                  [cust_id, element],
                  (err2, result2) => {
                    if (err2) {
                      console.log("error in corp_cust_course_ids : " + err2);
                      reject(err2);
                    } else {
                      console.log(result2);
                      resolve(result2);
                    }
                  }
                );
              } else {
                console.log("Course Id already Exist : " + element); // Already exists, resolve with the result
              }
            }
          }
        );
      });

      insertPromises.push(promise);
    });

    // Wait for all promises to complete
    Promise.all(insertPromises)
      .then((results) => {
        res.send({ success: true });
        // Send your response here
      })
      .catch((error) => {
        console.log("Error in insert operations:", error);
        // Handle error and send an appropriate response
      });
  } catch (error) {}
});

app.delete("/api/v1/unmap/course/id/cust/:course_id/:cust_id", (req, res) => {
  try {
    const { course_id, cust_id } = req.params;
    db.query(
      "DELETE FROM `myveda-db`.corp_cust_course_ids WHERE cust_id = ? and course_id = ?",
      [cust_id, course_id],
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {}
});
//
// evelutaor registration
app.post("/evelutaordata", (req, res) => {
  const firstName = req.body.firstName;
  const lastName = req.body.lastName;
  const email = req.body.email;
  const mobile = req.body.mobile;

  var password = generator.generate({
    length: 6,
    numbers: true,
    uppercase: true,
    lowercase: false,
  });

  db.query(
    "select * from `myveda-db`.eval_auth where eval_auth = ?",
    [email],
    (errEval, resultEval) => {
      if (errEval) console.log(errEval);
      else {
        if (resultEval.length === 0) {
          db.query(
            "INSERT INTO `myveda-db`.evalutaor_rg (f_name,l_name,email,phone) values(?,?,?,?)",
            [firstName, lastName, email, mobile],
            (err, result) => {
              if (err) {
                console.log(err);
              } else {
                db.query(
                  "INSERT INTO `myveda-db`.eval_auth (eval_auth,passcode) values (?,?)",
                  [email, password],
                  (err, result) => {
                    if (err) {
                      console.log(err);
                    } else {
                      db.query(
                        "SELECT * FROM `myveda-db`.eval_email_config",
                        (err, result) => {
                          if (err) {
                            console.log(err);
                          } else {
                            const subject = result[0].subject;
                            const url = result[0].url;
                            const msg = result[0].message;
                            const caution = result[0].caution;
                            const sign = result[0].signature;
                            console.log(subject);
                            console.log(url);

                            const output = `
                
                  <h3>Dear ${req.body.firstName} ${req.body.lastName}</h3>
          
                  <p>${msg}</p>
                  <br />
                  
                  <p>Evaluator ID: ${email}</p>
          
                  <p> Passcode : ${password}</p>
                  
                  <p> URL : ${url}</p>
                  
                  <p><b><i>Caution : ${caution}</i></b></p>
                
                  <p><b></b>!!! This is an automatically system generated email ? please do not reply to it.</b></p>
                  <br />
                  <p>Thanks & Regards</p>
          
                  <p>${sign}</p>
                         `;

                            db.query(
                              "SELECT * FROM `myveda-db`.email_srv",
                              (err, result) => {
                                if (err) {
                                  console.log(err);
                                } else {
                                  res.json({ success: true });

                                  let host1 = result[0]?.host;
                                  let port1 = result[0]?.port;
                                  let user1 = result[0]?.auth_uid;
                                  let pass1 = result[0]?.auth_pass;
                                  let fromEmail = result[0]?.from_email;
                                  let bccEmail = result[0]?.bcc_email;
                                  let transporter = nodemailer.createTransport({
                                    host: host1,
                                    port: port1,
                                    secure: true, // true for 465, false for other p orts
                                    auth: {
                                      user: user1, // generated ethereal user
                                      pass: pass1, // generated ethereal password
                                    },
                                  });

                                  // send mail with defined transport object
                                  let info = transporter.sendMail({
                                    from: `"" ${fromEmail}`, // sender address
                                    to: email, // list of receivers
                                    subject: subject, // Subject line
                                    bcc: bccEmail,
                                    html: output, // html body
                                  });

                                  console.log(
                                    "Message sent: %s",
                                    info.messageId
                                  );
                                  console.log(
                                    "Preview URL: %s",
                                    nodemailer.getTestMessageUrl(info)
                                  );
                                }
                              }
                            );
                          }
                        }
                      );
                    }
                  }
                );
              }
            }
          );
        } else {
          res.send({ success: false });
        }
      }
    }
  );
});

// learner fault ticket email template
app.get("/api/v1/get/email/template/data", (req, res) => {
  try {
    db.query(
      "SELECT * FROM `myveda-db`.email_temp_learner_ft",
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {}
});
//
//update batch email template subject
app.put("/api/v1/update/learner/ft/email/temp/subject", (req, res) => {
  const subject = req.body.subject1;
  db.query(
    "UPDATE `myveda-db`.email_temp_learner_ft SET subject =?  WHERE id = 1",
    [subject],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//uupdate batch email template url
app.put("/api/v1/update/learner/ft/email/temp/url", (req, res) => {
  const url = req.body.url;
  db.query(
    "UPDATE `myveda-db`.email_temp_learner_ft SET url =?  WHERE id = 1",
    [url],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update batch email template message
app.put("/api/v1/update/learner/ft/email/temp/msg", (req, res) => {
  const message = req.body.message;
  db.query(
    "UPDATE `myveda-db`.email_temp_learner_ft SET message =?  WHERE id = 1",
    [message],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update batch email template caution
app.put("/api/v1/update/learner/ft/email/temp/caution", (req, res) => {
  const caution = req.body.caution;
  db.query(
    "UPDATE `myveda-db`.email_temp_learner_ft SET caution =?  WHERE id = 1",
    [caution],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update batch email template signature
app.put("/api/v1/update/learner/ft/email/temp/sign", (req, res) => {
  const sign = req.body.sign;
  db.query(
    "UPDATE `myveda-db`.email_temp_learner_ft SET signature =?  WHERE id = 1",
    [sign],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

app.post("/demo/api", (req, res) => {
  console.log(req.body);
});
// export data of registered user individual
//
app.get("/export/csv/data/indi", (req, res) => {
  console.log("good");
  const query =
    "SELECT firstName,lastName,businessMail,contactNumber,city,address,country,cust_id,req_date,reg_type,reg_status FROM `myveda-db`.customer_reg where cust_id like '%IND0%'";
  const folderPath = path.join(__dirname, "export_csv");

  fs.mkdirSync(folderPath, { recursive: true }); // Create the folder if it doesn't exist

  db.query(query, (err, results) => {
    if (err) {
      console.error(err);
      res.status(500).json({ error: "Error fetching data" });
    } else {
      const columnNames = Object.keys(results[0]); // Get column names from the first row
      const csvData = [
        columnNames.join(","),
        ...results.map((row) => Object.values(row).join(",")),
      ];
      const csvContent = csvData.join("\n");
      const csvFilePath = path.join(folderPath, "individual_learner_data.csv"); // Specify the filename within the folder

      fs.writeFile(csvFilePath, csvContent, (err) => {
        if (err) {
          console.error(err);
          res.status(500).json({ error: "Error writing CSV file" });
        } else {
          res.download(csvFilePath, "individual_learner_data.csv", (err) => {
            if (err) {
              console.error(err);
            }
            fs.unlinkSync(csvFilePath); // Delete the temporary file
          });
        }
      });
    }
  });
});
// export data of company learner
app.get("/export/csv/data/cust", (req, res) => {
  console.log("good");
  const query =
    "SELECT firstName,lastName,businessMail,contactNumber,city,address,country,cust_id,req_date,reg_type,reg_status FROM `myveda-db`.customer_reg where cust_id not like '%IND0%'";
  const folderPath = path.join(__dirname, "export_csv");

  fs.mkdirSync(folderPath, { recursive: true }); // Create the folder if it doesn't exist

  db.query(query, (err, results) => {
    if (err) {
      console.error(err);
      res.status(500).json({ error: "Error fetching data" });
    } else {
      const columnNames = Object.keys(results[0]); // Get column names from the first row
      const csvData = [
        columnNames.join(","),
        ...results.map((row) => Object.values(row).join(",")),
      ];
      const csvContent = csvData.join("\n");
      const csvFilePath = path.join(folderPath, "company_learner_data.csv"); // Specify the filename within the folder

      fs.writeFile(csvFilePath, csvContent, (err) => {
        if (err) {
          console.error(err);
          res.status(500).json({ error: "Error writing CSV file" });
        } else {
          res.download(csvFilePath, "company_learner_data.csv", (err) => {
            if (err) {
              console.error(err);
            }
            fs.unlinkSync(csvFilePath); // Delete the temporary file
          });
        }
      });
    }
  });
});
// attempt 3 email temp data
app.get("/api/v1/get/attempt/3/email/temp/data", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.user_fail_email_attempt_3",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
//update batch email template subject
app.put("/api/v1/update/attempt/3/email/temp/subject", (req, res) => {
  const subject = req.body.subject1;
  db.query(
    "UPDATE `myveda-db`.user_fail_email_attempt_3 SET subject =?  WHERE id = 1",
    [subject],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//uupdate batch email template url
app.put("/api/v1/update/attempt/3/email/temp/url", (req, res) => {
  const url = req.body.url;
  db.query(
    "UPDATE `myveda-db`.user_fail_email_attempt_3 SET url =?  WHERE id = 1",
    [url],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update batch email template message
app.put("/api/v1/update/attempt/3/email/temp/msg", (req, res) => {
  const message = req.body.message;
  db.query(
    "UPDATE `myveda-db`.user_fail_email_attempt_3 SET message =?  WHERE id = 1",
    [message],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update batch email template caution
app.put("/api/v1/update/attempt/3/email/temp/caution", (req, res) => {
  const caution = req.body.caution;
  db.query(
    "UPDATE `myveda-db`.user_fail_email_attempt_3 SET caution =?  WHERE id = 1",
    [caution],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update batch email template signature
app.put("/api/v1/update/attempt/3/email/temp/sign", (req, res) => {
  const sign = req.body.sign;
  db.query(
    "UPDATE `myveda-db`.user_fail_email_attempt_3 SET signature =?  WHERE id = 1",
    [sign],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
// get demo customer id
app.get("/api/v1/get/demo/cust/id/reg", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.comp_cust_req_db where demo  = '1'",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

// batch id graph data
app.get("/api/v1/get/batch/id/data", (req, res) => {
  try {
    db.query("SELECT * FROM `myveda-db`.batch_ids_la", (err, result) => {
      if (err) {
        console.log(err);
        res.status(500).json({ error: "Error fetching data" });
        return; // Return early in case of an error
      }

      const arr = result;
      const updatePromises = [];

      arr.forEach((element) => {
        const promise = new Promise((resolve, reject) => {
          db.query(
            "SELECT * FROM `myveda-db`.user_course_map_table_la where batch_code = ?",
            [element.batch_ids],
            (err1, result1) => {
              if (err1) {
                reject(err1);
              } else {
                const learnersCount = result1.length;

                // Extract course_id values from the result1 array
                const courseIds = result1.map((row) =>
                  row.course_id.split(",")
                );

                console.log(result1);
                if (learnersCount > 0) {
                  db.query(
                    "UPDATE `myveda-db`.batch_ids_la SET learners = ?, course_id = ? WHERE batch_ids = ?",
                    [learnersCount, courseIds[0], element.batch_ids],
                    (err2, result2) => {
                      if (err2) {
                        reject(err2);
                      } else {
                        resolve(result2);
                      }
                    }
                  );
                } else resolve(null);
              }
            }
          );
        });

        updatePromises.push(promise);
      });

      // Wait for all promises to complete
      Promise.all(updatePromises)
        .then((results) => {
          db.query(
            "SELECT * FROM `myveda-db`.batch_ids_la",
            (errM, resultM) => {
              if (errM) console.log(errM);
              else {
                res.send(resultM);
              }
            }
          );
        })
        .catch((error) => {
          console.log("Error in update operations:", error);
          res.status(500).json({ error: "Error updating learners count" });
        });
    });
  } catch (error) {}
});
//
app.get("/api/v1/get/unmap/trainers", (req, res) => {
  try {
    db.query(
      "SELECT * FROM `myveda-db`.trainer_reg_table_la",
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {}
});
//

app.get("/api/v1/get/course/exam/type/:course_id", (req, res) => {
  try {
    db.query(
      "SELECT * FROM `myveda-db`.add_courses where course_id = ?",
      [req.params.course_id],
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {}
});
//
app.post("/api/v1/learner/tfqs/data/exam", (req, res) => {
  const data = req.body.allQuestions;
  var today = new Date();
  var dd = String(today.getDate()).padStart(2, "0");
  var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
  var yyyy = today.getFullYear();

  today = yyyy + "-" + mm + "-" + dd;
  data.forEach((item, index, myarr) => {
    const {
      question,
      correct_answer,
      learner_answer,
      result,
      course_id,
      attempt,
      uid,
    } = item;
    db.query(
      "insert into `myveda-db`.learner_tfqs_exam_summary_data(uid,course_id,question,learner_ans,correct_ans,result,attempt,date) values(?,?,?,?,?,?,?,?)",
      [
        uid,
        course_id,
        question,
        learner_answer,
        correct_answer,
        result,
        attempt,
        today,
      ],
      (err, result) => {
        if (err) console.log(err);
        else {
          if (Object.is(myarr.length - 1, index)) {
            res.send(result);
          }
        }
      }
    );
  });
});

app.post("/api/v1/learner/scqs/data/exam", (req, res) => {
  const data = req.body.allQuestions;
  var today = new Date();
  var dd = String(today.getDate()).padStart(2, "0");
  var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
  var yyyy = today.getFullYear();

  today = yyyy + "-" + mm + "-" + dd;
  data.forEach((item, index, myarr) => {
    const {
      question,
      correct_answer,
      learner_answer,
      result,
      course_id,
      attempt,
      uid,
    } = item;
    db.query(
      "insert into `myveda-db`.learner_scqs_exam_summary_data(uid,course_id,question,learner_ans,correct_ans,result,attempt,date) values(?,?,?,?,?,?,?,?)",
      [
        uid,
        course_id,
        question,
        learner_answer,
        correct_answer,
        result,
        attempt,
        today,
      ],
      (err, result) => {
        if (err) console.log(err);
        else {
          if (Object.is(myarr.length - 1, index)) {
            res.send(result);
          }
        }
      }
    );
  });
});

//
app.get("/api/v1/get/exam/log/data/tfqs/scqs/:id", (req, res) => {
  try {
    const { id } = req.params;
    if (id === "scqs") {
      db.query(
        "SELECT * FROM `myveda-db`.learner_scqs_exam_summary_data",
        (err, result) => {
          if (err) console.log(err);
          else res.send(result);
        }
      );
    } else {
      db.query(
        "SELECT * FROM `myveda-db`.learner_tfqs_exam_summary_data",
        (err, result) => {
          if (err) console.log(err);
          else res.send(result);
        }
      );
    }
  } catch (error) {}
});
//
app.get(
  "/api/v1/send/all/number/content/course/all/content",
  async (req, res) => {
    try {
      const updateCourses = async () => {
        const courses = await new Promise((resolve, reject) => {
          db.query("select * from `myveda-db`.add_courses", (err, result) => {
            if (err) reject(err);
            else resolve(result);
          });
        });

        const updatePDFs = courses.map((course) => {
          return new Promise((resolveQuery, rejectQuery) => {
            db.query(
              "select * from `myveda-db`.pdf_mat where course_id = ?",
              [course.course_id],
              (err1, result1) => {
                if (err1) rejectQuery(err1);
                else {
                  db.query(
                    "update `myveda-db`.add_courses set tot_pdfs = ? where course_id = ?",
                    [result1.length, course.course_id],
                    (err2, result2) => {
                      if (err2) rejectQuery(err2);
                      else resolveQuery();
                    }
                  );
                }
              }
            );
          });
        });

        const updateVideos = courses.map((course) => {
          return new Promise((resolveQuery, rejectQuery) => {
            db.query(
              "select * from `myveda-db`.vdo_mat where course_id = ?",
              [course.course_id],
              (err1, result1) => {
                if (err1) rejectQuery(err1);
                else {
                  db.query(
                    "update `myveda-db`.add_courses set tot_videos = ? where course_id = ?",
                    [result1.length, course.course_id],
                    (err2, result2) => {
                      if (err2) rejectQuery(err2);
                      else resolveQuery();
                    }
                  );
                }
              }
            );
          });
        });

        const updatePPTs = courses.map((course) => {
          return new Promise((resolveQuery, rejectQuery) => {
            db.query(
              "select * from `myveda-db`.ppt_mat where course_id = ?",
              [course.course_id],
              (err1, result1) => {
                if (err1) rejectQuery(err1);
                else {
                  db.query(
                    "update `myveda-db`.add_courses set tot_ppts = ? where course_id = ?",
                    [result1.length, course.course_id],
                    (err2, result2) => {
                      if (err2) rejectQuery(err2);
                      else resolveQuery();
                    }
                  );
                }
              }
            );
          });
        });

        await Promise.all([...updatePDFs, ...updateVideos, ...updatePPTs]);
      };

      await updateCourses();

      res
        .status(200)
        .json({ success: true, message: "Updates completed successfully" });
    } catch (error) {
      console.log(error);
      res
        .status(500)
        .json({ success: false, message: "Error occurred during updates" });
    }
  }
);

//get all description for all services
app.get("/api/v1/get/des/all/services", (req, res) => {
  db.query("SELECT * FROM main_admin_db.product_cat", (err, result) => {
    if (err) console.log(err);
    else res.send(result);
  });
});
// get all cust id for individual for offline invoices
app.get("/api/v1/get/all/cust/id", (req, res) => {
  try {
    db.query(
      "SELECT t1.cust_id,t1.uid,t2.full_name,t2.surname FROM `myveda-db`.user_course_map_table_la as t1 left join main_admin_db.myveda_indi_cust_ids as t2 on t1.uid = t2.email where t1.course is null and t1.invoice_type = ? ",
      ["Offline"],
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {}
});

//
app.get("/api/v1/get/user/info/invoice/:id/:serv_id", (req, res) => {
  try {
    const { serv_id, id } = req.params;
    console.log(serv_id);

    if (serv_id == 10) {
      db.query(
        "SELECT * FROM main_admin_db.myhrms_indi_cust_ids where cust_id = ?",
        [id],
        (err2, result2) => {
          if (err2) console.log(err2);
          else {
            res.send(result2);
            console.log(result2, "resllll");
          }
        }
      );
    } else if (serv_id == 9) {
      db.query(
        "SELECT * FROM main_admin_db.myshop_indi_cust_ids where cust_id = ?",
        [id],
        (err2, result2) => {
          if (err2) console.log(err2);
          else {
            console.log(id);
            res.send(result2);
            console.log(result2, "resllll");
          }
        }
      );
    } else if (serv_id == 8) {
      db.query(
        "SELECT * FROM main_admin_db.praxis_indi_cust_ids where cust_id = ?",
        [id],
        (err2, result2) => {
          if (err2) console.log(err2);
          else {
            console.log(id);
            res.send(result2);
            console.log(result2, "resllll");
          }
        }
      );
    } else if (serv_id == 1) {
      db.query(
        "SELECT * FROM `myveda-db`.user_course_map_table_la where cust_id = ?",
        [req.params.id],
        (err, result) => {
          if (err) console.log(err);
          else {
            const { uid } = result[0];
            db.query(
              "SELECT * FROM main_admin_db.myveda_indi_cust_ids where email = ?",
              [uid],
              (err2, result2) => {
                if (err2) console.log(err2);
                else res.send(result2);
              }
            );
          }
        }
      );
    } else {
      db.query(
        "SELECT *,spocName as name, contact as number FROM main_admin_db.offline_cust_reg_indi where cust_id = ?",
        [id],
        (err2, result2) => {
          if (err2) console.log(err2);
          else {
            res.send(result2);
          }
        }
      );
    }
  } catch (error) {
    console.log(error);
  }
});
//check remain payment
app.get("/api/v1/get/all/order/invoices/:cust_id/:order_id", (req, res) => {
  const { cust_id, order_id } = req.params;
  try {
    db.query(
      "SELECT * FROM main_admin_db.tax_invoice_order_myvedait where cust_id = ? and order_id = ?",
      [cust_id, order_id],
      (err, result) => {
        if (err)
          console.log(err, " : error while getting all invoices data of order");
        else
          res.status(200).send({
            success: true,
            data: result,
          });
      }
    );
  } catch (error) {}
});
//
app.get("/api/v1/get/all/part/pay/order/id/:cust_id/:id", (req, res) => {
  try {
    db.query(
      "SELECT t1.* FROM main_admin_db.tax_invoice_order_myvedait t1 where t1.cust_id = ? and t1.service_id = ? and t1.remain_amount > 0 and t1.order_id is not null and not exists (select 1 from main_admin_db.tax_invoice_order_myvedait as t2 where t1.order_id = t2.order_id and remain_amount = 0) group by t1.order_id; ",
      [req.params.cust_id, parseInt(req.params.id)],
      (err, result) => {
        if (err) console.log(err);
        else {
          if (!result.length) {
            res.status(200).send({
              success: false,
            });
          } else {
            res.status(200).send({ success: true, data: result });
          }
        }
      }
    );
  } catch (error) {}
});

// app.get("/api/v1/get/all/part/pay/order/id/:cust_id/:id", (req, res) => {
//   console.log(req.parmas);
//   try {
//     db.query(
//       "SELECT t1.* FROM main_admin_db.tax_invoice_order_myvedait t1 where t1.cust_id = ? and t1.service_id = ? and t1.remain_amount > 0 and t1.order_id is not null and not exists (select 1 from main_admin_db.tax_invoice_order_myvedait as t2 where t1.order_id = t2.order_id and remain_amount = 0) group by t1.order_id; ",
//       [req.params.cust_id, req.params.id],
//       (err, result) => {
//         if (err) console.log(err);
//         else {
//           if (!result.length) {
//             res.status(200).send({
//               success: false,
//             });
//           } else {
//             console.log(result);
//             res.status(200).send({ success: true, data: result });
//           }
//         }
//       }
//     );
//   } catch (error) {}
// });

app.post("/my/demo", (req, res) => {
  const state = [
    {
      name: "akjshay",
    },
    {
      name: "akshay",
    },
  ];

  console.log(state.for);

  // const {file} = req.files

  //  fs.writeFileSync(`assets/${file?.name}`, file?.data);
});
// get individudal course-ids where course is not mapped for offline learners
app.get("/api/v1/get/offline/user/data/map/course", (req, res) => {
  try {
    db.query(
      "SELECT * FROM `myveda-db`.user_course_map_table_la WHERE cust_id LIKE '%IND0%' and invoice_type = ? ",
      ["Offline"],
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {}
});

app.get("/api/v1/get/all/map/course/indi/:id", (req, res) => {
  try {
    console.log(req.params.id);
    db.query(
      "SELECT * FROM `myveda-db`.user_course_map_table_la WHERE cust_id = ? and course_id is not null",
      [req.params.id],
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {}
});

// map course id to user where course id null for that user or custoemrid
app.put("/api/v1/map/course/offline/user", (req, res) => {
  try {
    const { course_id, cust_id } = req.body;
    db.query(
      "select course_ttl,standard from `myveda-db`.add_courses where course_id = ?",
      [course_id],
      (err, result) => {
        if (err) console.log(err);
        else {
          const { course_ttl, standard } = result[0];
          db.query(
            "update `myveda-db`.user_course_map_table_la set course = ?, iso_std = ?, course_id = ? where cust_id=?",
            [course_ttl, standard, course_id, cust_id],
            (err2, result2) => {
              if (err2) console.log(err2);
              else res.send(result2);
            }
          );
        }
      }
    );
  } catch (error) {}
});
// map course id to individual id in corp_cust_course_ids
app.put("/api/v1/map/indi/course/id/user", (req, res) => {
  try {
    const { uid, cust_id, course_ids } = req.body;

    // Assuming you're using a Promise-based approach for the db.query method

    const insertPromises = [];

    course_ids.forEach((element, index) => {
      const promise = new Promise((resolve, reject) => {
        // Your database queries...
        // ...

        db.query(
          "SELECT * FROM `myveda-db`.user_course_map_table_la where cust_id = ? and course_id = ?",
          [cust_id, element],
          (err, result) => {
            if (err) {
              console.log(err);
              reject(err);
            } else {
              if (!result.length) {
                db.query(
                  "select course_ttl,standard,duration from `myveda-db`.add_courses where course_id = ?",
                  [element],
                  (err, result) => {
                    if (err) console.log(err);
                    else {
                      const { course_ttl, standard, duration } = result[0];
                      db.query(
                        "insert into `myveda-db`.user_course_map_table_la(uid,course,iso_std,course_id,cust_id) values(?,?,?,?,?)",
                        [uid, course_ttl, standard, element, cust_id],
                        (err2, result2) => {
                          if (err2) console.log(err2);
                          else {
                            if (err2) {
                              console.log(
                                "error in corp_cust_course_ids : " + err2
                              );
                              reject(err2);
                            } else {
                              var today = new Date();
                              var dd = String(today.getDate()).padStart(2, "0");
                              var mm = String(today.getMonth() + 1).padStart(
                                2,
                                "0"
                              ); //January is 0!
                              var yyyy = today.getFullYear();

                              today = yyyy + "-" + mm + "-" + dd;
                              var someDate = new Date(today);

                              var result1 = new Date(
                                someDate.setDate(
                                  someDate.getDate() + parseInt(duration)
                                )
                              );

                              var exp_date = result1
                                .toISOString()
                                .split("T")[0];
                              db.query(
                                "insert into `myveda-db`.indi_cust_course_ids(cust_id,course_id,start_date,end_date) values(?,?,?,?)",
                                [cust_id, element, today, exp_date],
                                (errP, resultP) => {
                                  if (errP) console.log(errP);
                                  else resolve(result2);
                                }
                              );
                            }
                          }
                        }
                      );
                    }
                  }
                );
              } else {
                console.log("Course Id already Exist : " + element);
                resolve(result); // Resolve with the existing result
              }
            }
          }
        );
      });

      insertPromises.push(promise);
    });

    // Wait for all promises to complete
    Promise.all(insertPromises)
      .then((results) => {
        res.send({ success: true });
        // Send your response here
      })
      .catch((error) => {
        console.log("Error in insert operations:", error);
        // Handle error and send an appropriate response
      });
  } catch (error) {}
});
// get all details about certificate with certificate id
app.get("/api/v1/get/all/details/cert/:id", (req, res) => {
  try {
    db.query(
      `SELECT t1.cust_id,t1.issue_date,t2.firstName,t2.lastName,t2.img,t3.course_ttl FROM \`myveda-db\`.usr_exam_cert as t1 
    left join \`myveda-db\`.customer_reg as t2 on t1.uid = t2.businessMail
    left join \`myveda-db\`.add_courses as t3 on t1.course_id = t3.course_id
    where t1.cert_id = ?`,
      [req.params.id],
      (err, result) => {
        if (err) console.log(err);
        else {
          res.send(result);
        }
      }
    );
  } catch (error) {}
});

//
app.get("/api/v1/check/email/change/pass/:id", (req, res) => {
  try {
    db.query(
      "SELECT * FROM `myveda-db`.auth_tb where uid = ?",
      [req.params.id],
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {}
});

// get all course id of customer id
app.get("/api/v1/get/all/course/id/cust/:id", (req, res) => {
  try {
    db.query(
      "select * from `myveda-db`.corp_cust_course_ids where cust_id = ?",
      [req.params.id],
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {
    console.log(error);
  }
});
app.put("/api/v1/update/course/expire/corp", (req, res) => {
  try {
    const { cust_id, course_id, startDate, endDate } = req.body;
    db.query(
      "update `myveda-db`.corp_cust_course_ids set start_date = ?, end_date  = ? where cust_id =? and course_id = ?",
      [startDate, endDate, cust_id, course_id],
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {}
});
// get all course id of customer id individual
app.get("/api/v1/indi/get/all/course/id/cust/:id", (req, res) => {
  try {
    db.query(
      "SELECT t1.uid,t2.req_date,t1.course_id FROM `myveda-db`.user_course_map_table_la as  t1 left join `myveda-db`.customer_reg t2 on t1.uid = t2.businessMail where uid = ?",
      [req.params.id],
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {
    console.log(error);
  }
});
app.put("/api/v1/update/course/expire/indi", (req, res) => {
  try {
    const { cust_id, course_id, startDate, endDate } = req.body;
    db.query(
      "update `myveda-db`.indi_cust_course_ids set start_date = ?, end_date  = ? where cust_id =? and course_id = ?",
      [startDate, endDate, cust_id, course_id],
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {}
});
//  check course expiry of a learner with his course id
app.get("/api/v1/get/course/expiry/learner/days/:uid/:course", (req, res) => {
  try {
    const { uid, course } = req.params;
    var today = new Date();
    var dd = String(today.getDate()).padStart(2, "0");
    var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
    var yyyy = today.getFullYear();
    db.query(
      "select req_date,cust_id from `myveda-db`.customer_reg  where businessMail = ?",
      [uid],
      (err, result) => {
        if (err) console.log(err);
        else {
          const { req_date, cust_id } = result[0];
          if (cust_id.substr(-4) === "IND0") {
            db.query(
              "select end_date from `myveda-db`.indi_cust_course_ids where cust_id = ? and course_id = ?",
              [cust_id, course],
              (err2, result2) => {
                if (err2) console.log(err2);
                else {
                  const { end_date } = result2[0];
                  function calculateRemainingDays(end_date, today) {
                    return (end_date - today) / (1000 * 60 * 60 * 24);
                  }

                  const projectEndDate = new Date(end_date);
                  const projectReqdDate = new Date(today);
                  const rem_days = calculateRemainingDays(
                    projectEndDate,
                    projectReqdDate
                  );

                  res.send({ rem_days: rem_days });
                }
              }
            );
          } else {
            db.query(
              "select start_date,end_date from `myveda-db`.corp_cust_course_ids where cust_id = ? and course_id = ?",
              [cust_id, course],
              (err2, result2) => {
                if (err2) console.log(err2);
                else {
                  const { start_date, end_date } = result2[0];
                  // const rem_date = end_date - req_date;
                  // console.log(rem_date);

                  console.log(today, end_date);

                  function calculateRemainingDays(end_date, today) {
                    return (end_date - today) / (1000 * 60 * 60 * 24);
                  }

                  const projectEndDate = new Date(end_date);
                  const projectReqdDate = new Date(today);

                  const rem_days = calculateRemainingDays(
                    projectEndDate,
                    projectReqdDate
                  );

                  res.send({ rem_days: rem_days });
                }
              }
            );
          }
        }
      }
    );
  } catch (error) {}
});
//
// map course for individuals
app.get("/api/v1/get/indi/map/courses/exp/data/:value", (req, res) => {
  db.query(
    "SELECT t1.uid,t2.req_date,t1.course_id FROM `myveda-db`.user_course_map_table_la as  t1 left join `myveda-db.customer_reg t2 on t1.uid = t2.businessMail where uid = ?",
    [req.params.value],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

app.get("/dedo/data", (req, res) => {
  const query1 =
    "SELECT * FROM `myveda-db`.indi_cust_course_ids where cust_id = ?";

  var rooms = [];

  db.query(query1, ["AS9999IND0"], (err, result) => {
    if (err) throw err;
    else {
      const arr = result;
      const responseArray = []; // Array to accumulate items

      arr.forEach((item) => {
        responseArray.push(item);

        if (responseArray.length === arr.length) {
          // All iterations are completed
          res.json(responseArray);
        }
      });
    }
  });
});
// get price list practice exercise buy form
app.get("/api/v1/get/price/pract/ex", (req, res) => {
  try {
    db.query(
      "SELECT * FROM main_admin_db.product_cat where id = 8",
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {}
});

// get price list myshop subscription buy form
app.get("/api/v1/get/price/myshop", (req, res) => {
  try {
    db.query(
      "SELECT * FROM main_admin_db.product_cat where id = 9",
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {}
});

//create praxis customer
//create praxis customer
app.post("/api/v1/create/user/pract/cust_id/praxis", (req, res) => {
  const {
    ccavResDetails,
    invoice_no,
    gst,
    dataUri,
    state,
    dueDate,
    otherData,
  } = req.body;

  var today = new Date();
  var dd = String(today.getDate()).padStart(2, "0");
  var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
  var yyyy = today.getFullYear();

  var presentDate = yyyy + "-" + mm + "-" + dd;

  // Add 90 days to the current date
  today.setDate(today.getDate() + 90);

  var futureDD = String(today.getDate()).padStart(2, "0");
  var futureMM = String(today.getMonth() + 1).padStart(2, "0");
  var futureYYYY = today.getFullYear();

  var futureDate = futureYYYY + "-" + futureMM + "-" + futureDD;

  const pdf = Buffer.from(dataUri.split(",")[1], "base64");

  fs.writeFileSync(
    `./praxis_invoices/${ccavResDetails.billing_email}.pdf`,
    pdf
  );

  const { mer_param5 } = req.body.ccavResDetails;

  const parsedInvData = JSON.parse(mer_param5);
  const {
    mrp_amount,
    inv_amount,
    dis_percent,
    dis_amount,
    discounted_amount,
    tax_amount,
    tax_percent,
    inv_incl_tax_amount,
  } = parsedInvData;
  db.query(
    "select * FROM main_admin_db.tax_invoice_order_myvedait where invoice_no = ?",
    [invoice_no],
    (err, result) => {
      if (err) throw err;
      else {
        if (!result.length) {
          db.query(
            `insert into \`main_admin_db\`.tax_invoice_order_myvedait (service_id,service_name,order_id,cust_id,order_date,invoice_no,inv_date,billing_name,billing_tel,billing_email,billing_address,services,
              payment_status,payment_date_time,txn_details,payment_mode,
              mer_amount,
              ccav_tracking_id,
              ccav_bank_ref_no,
              ccav_order_status,
              ccav_failure_msg,
              ccav_payment_mode,
              ccav_card_name,
              ccav_status_code,
              ccav_status_message,
              ccav_retry,
              ccav_trans_date,
              ccav_response_code,
              invoice_gen_type,
              coupon_id,
              mrp_amount,
              inv_amount,
              inv_incl_tax_amount,
              dis_percent,
              dis_amount,
              discounted_amount,
              tax_amount,
              tax_percent,
              hsn_sac,
              due_date,
              duration,
              place_of_supply,
              sales_type
              ) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`,
            [
              8,
              "Praxis Exercises - IT",
              ccavResDetails.order_id,
              state?.cust_id,
              presentDate,
              invoice_no,
              presentDate,
              ccavResDetails.billing_name,
              ccavResDetails.billing_tel,
              ccavResDetails.billing_email,
              ccavResDetails.billing_address,
              "Praxis Exercises - IT",
              "Paid",
              presentDate,
              "",
              ccavResDetails.payment_mode,
              ccavResDetails.amount,
              ccavResDetails.tracking_id,
              ccavResDetails.bank_ref_no,
              ccavResDetails.order_status,
              ccavResDetails.failure_msg,
              ccavResDetails.payment_mode,
              ccavResDetails.card_name,
              ccavResDetails.status_code,
              ccavResDetails.status_message,
              ccavResDetails.retry,
              ccavResDetails.trans_date,
              ccavResDetails.response_code,
              "Online",
              "",
              mrp_amount,
              inv_amount,
              inv_incl_tax_amount,
              dis_percent,
              dis_amount,
              discounted_amount,
              tax_amount,
              tax_percent,
              state.hsn_hac,
              dueDate,
              state.duration,
              otherData.inter_state,
              "B2C",
            ],
            (err1, result1) => {
              if (err1) throw err1;
              else {
                db.query(
                  "SELECT * FROM main_admin_db.email_temp_praxis_indi_cust_reg",
                  (errTemp, resTemp) => {
                    if (errTemp) throw errTemp;
                    else {
                      const { subject, url, message, caution, signature } =
                        resTemp[0];
                      const output = `
                <h3>Dear ${ccavResDetails.billing_name} </h3>
                <p>${message}.</p>
                <p><b>URL</b> : <a href="${url}" target="_blank">${url}</a></p>
                <p><b>Customer ID :</b> ${state.cust_id}</p>
                <p>${caution}</p>
                <p>${signature}</p>
                <p>Thanks & Regards</p>
               `;
                      db.query(
                        "SELECT * FROM `myveda-db`.email_srv",
                        (err, result) => {
                          if (err) {
                            console.log(err);
                          } else {
                            console.log(result);
                            let host1 = result[0]?.host;
                            let port1 = result[0]?.port;
                            let user1 = result[0]?.auth_uid;
                            let pass1 = result[0]?.auth_pass;
                            let fromEmail = result[0]?.from_email;
                            let bccEmail = result[0]?.bcc_email;
                            let transporter = nodemailer.createTransport({
                              host: host1,
                              port: port1,
                              secure: true, // true for 465, false for other p orts
                              auth: {
                                user: user1, // generated ethereal user
                                pass: pass1, // generated ethereal password
                              },
                            });

                            // send mail with defined transport object
                            let info = transporter
                              .sendMail({
                                from: `"" ${fromEmail}`, // sender address
                                to: ccavResDetails.billing_email, // list of receivers
                                subject: subject, // Subject line
                                bcc: bccEmail,
                                html: output, // html body
                                attachments: [
                                  {
                                    filename: "invoice.pdf",
                                    content: fs.createReadStream(
                                      `./praxis_invoices/${ccavResDetails.billing_email}.pdf`,
                                      pdf
                                    ),
                                  },
                                ],
                              })
                              .then(() => {
                                res.send(result1);
                              });
                          }
                        }
                      );
                    }
                  }
                );
              }
            }
          );
        }
      }
    }
  );
});
// app.post("/api/v1/create/user/pract/cust_id/praxis", (req, res) => {
//   // console.log(req.body);

//   const { dataUri, gst, order_id, ip } = req.body;
//   const {
//     country,
//     contactcode,
//     pinCode,
//     myCity,
//     stateSelect,
//     price,
//     name,
//     invoice_no,
//     cust_id,
//     nameFull,
//   } = req.body.state;
//   const { mail, address, number } = req.body.state.formData;

//   var today = new Date();
//   var dd = String(today.getDate()).padStart(2, "0");
//   var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
//   var yyyy = today.getFullYear();

//   var presentDate = yyyy + "-" + mm + "-" + dd;

//   // Add 90 days to the current date
//   today.setDate(today.getDate() + 90);

//   var futureDD = String(today.getDate()).padStart(2, "0");
//   var futureMM = String(today.getMonth() + 1).padStart(2, "0");
//   var futureYYYY = today.getFullYear();

//   var futureDate = futureYYYY + "-" + futureMM + "-" + futureDD;

//   console.log(futureDate);

//   const pdf = Buffer.from(dataUri.split(",")[1], "base64");

//   fs.writeFileSync(`./praxis_invoices/${mail}.pdf`, pdf);

//   const amt_incl_tax = price + (price * 18) / 100;

//   console.log(amt_incl_tax);

//   db.query(
//     "select * FROM main_admin_db.invoice_order_praxis where invoice_no = ?",
//     [invoice_no],
//     (err, result) => {
//       if (err) throw err;
//       else {
//         if (!result.length) {
//           db.query(
//             `insert into main_admin_db.invoice_order_praxis(order_id,
//           order_date,
//           amount_incl_tax,
//           billing_name,
//           invoice_no,
//           billing_ip,
//           gst,
//           billing_address,
//           billing_email,
//           billing_tel,
//           service) values(?,?,?,?,?,?,?,?,?,?,?)`,
//             [
//               order_id,
//               today,
//               amt_incl_tax,
//               name,
//               invoice_no,
//               ip,
//               gst,
//               address,
//               mail,
//               contactcode + "-" + number,
//               "Practice Exercises - IT",
//             ],
//             (err1, result1) => {
//               if (err1) throw err1;
//               else {
//                 db.query(
//                   "SELECT * FROM main_admin_db.praxis_indi_cust_ids where cust_id = ? OR mail = ?",
//                   [cust_id, mail],
//                   (errReg, resultReg) => {
//                     if (errReg) throw errReg;
//                     else {
//                       if (!resultReg.length) {
//                         db.query(
//                           `insert into main_admin_db.praxis_indi_cust_ids(cust_id,
//                       mail,
//                       country,
//                       state,
//                       city,
//                       pincode,
//                       address,
//                       number,
//                       start_date,
//                       end_date,name) values(?,?,?,?,?,?,?,?,?,?,?)`,
//                           [
//                             cust_id,
//                             mail,
//                             country,
//                             stateSelect,
//                             myCity,
//                             pinCode,
//                             address,
//                             contactcode + "-" + number,
//                             presentDate,
//                             futureDate,
//                             name,
//                           ],
//                           (errDReg, resDReg) => {
//                             if (errDReg) throw errDReg;
//                             else {
//                               db.query(
//                                 "SELECT * FROM main_admin_db.email_temp_praxis_indi_cust_reg",
//                                 (errTemp, resTemp) => {
//                                   if (errTemp) throw errTemp;
//                                   else {
//                                     const {
//                                       subject,
//                                       url,
//                                       message,
//                                       caution,
//                                       signature,
//                                     } = resTemp[0];
//                                     const output = `
//                               <h3>Dear ${name} </h3>
//                               <p>${message}.</p>
//                               <p><b>URL</b> : <a href="${url}" target="_blank">${url}</a></p>
//                               <p><b>Customer ID :</b> ${cust_id}</p>
//                               <p>${caution}</p>
//                               <p>${signature}</p>
//                              `;
//                                     db.query(
//                                       "SELECT * FROM `myveda-db`.email_srv",
//                                       (err, result) => {
//                                         if (err) {
//                                           console.log(err);
//                                         } else {
//                                           console.log(result);
//                                           let host1 = result[0]?.host;
//                                           let port1 = result[0]?.port;
//                                           let user1 = result[0]?.auth_uid;
//                                           let pass1 = result[0]?.auth_pass;
//                                           let fromEmail = result[0]?.from_email;
//                                           let bccEmail = result[0]?.bcc_email;
//                                           let transporter =
//                                             nodemailer.createTransport({
//                                               host: host1,
//                                               port: port1,
//                                               secure: true, // true for 465, false for other p orts
//                                               auth: {
//                                                 user: user1, // generated ethereal user
//                                                 pass: pass1, // generated ethereal password
//                                               },
//                                             });

//                                           // send mail with defined transport object
//                                           let info = transporter
//                                             .sendMail({
//                                               from: `"" ${fromEmail}`, // sender address
//                                               to: mail, // list of receivers
//                                               subject: subject, // Subject line
//                                               bcc: bccEmail,
//                                               html: output, // html body
//                                               attachments: [
//                                                 {
//                                                   filename: "invoice.pdf",
//                                                   content: fs.createReadStream(
//                                                     `./praxis_invoices/${mail}.pdf`,
//                                                     pdf
//                                                   ),
//                                                 },
//                                               ],
//                                             })
//                                             .then(() => {
//                                               res.send(result1);
//                                             });
//                                         }
//                                       }
//                                     );
//                                   }
//                                 }
//                               );
//                             }
//                           }
//                         );
//                       }
//                     }
//                   }
//                 );
//               }
//             }
//           );
//         }
//       }
//     }
//   );
// });

app.get("/api/v1/myshop/invoice/details/:id", (req, res) => {
  const { id } = req.params;
  db.query(
    "SELECT * FROM main_admin_db.ccav_res_payment_details where order_id = ?",
    [id],
    (err, result) => {
      if (err) console.log(err);
      else {
        db.query(
          "SELECT * FROM main_admin_db.myshop_indi_cust_ids where order_id = ?",
          [id],
          (err2, result2) => {
            if (err2) console.log(err2);
            else
              res.send({
                res1: result,
                res2: result2,
              });
          }
        );
      }
    }
  );
});

//get all email template data of practice customer registration
app.get("/api/v1/get/data/email/temp/pract/cust/reg", (req, res) => {
  try {
    db.query(
      "SELECT * FROM main_admin_db.email_temp_praxis_indi_cust_reg where id = 1",
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {}
});
// update practice customer reg template
// config subject
app.put("/api/v1/update/temp/pract/cust/reg/subject", (req, res) => {
  const subject = req.body.subject1;
  db.query(
    "UPDATE `main_admin_db`.email_temp_praxis_indi_cust_reg SET subject =?  WHERE id = 1",
    [subject],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//update email url of
app.put("/api/v1/update/temp/pract/cust/reg/url", (req, res) => {
  const url = req.body.url;
  db.query(
    "UPDATE `main_admin_db`.email_temp_praxis_indi_cust_reg SET url =?  WHERE id = 1",
    [url],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email message of
app.put("/api/v1/update/temp/pract/cust/reg/msg", (req, res) => {
  const message = req.body.message;
  db.query(
    "UPDATE `main_admin_db`.email_temp_praxis_indi_cust_reg SET message =?  WHERE id = 1",
    [message],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email caution of
app.put("/api/v1/update/temp/pract/cust/reg/caution", (req, res) => {
  const caution = req.body.caution;
  db.query(
    "UPDATE `main_admin_db`.email_temp_praxis_indi_cust_reg SET caution =?  WHERE id = 1",
    [caution],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email sign of
app.put("/api/v1/update/temp/pract/cust/reg/sign", (req, res) => {
  const sign = req.body.sign;
  db.query(
    "UPDATE `main_admin_db`.email_temp_praxis_indi_cust_reg SET signature =?  WHERE id = 1",
    [sign],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
// get All Invoices when customer is created
app.get("/api/v1/get/all/invoice/praxis/ex/data", (req, res) => {
  try {
    db.query(
      "SELECT * FROM main_admin_db.invoice_order_praxis where invoice_no is not null",
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {}
});
// get All Invoices when customer is created myshop
app.get("/api/v1/get/all/invoice/myshop/ex/data", (req, res) => {
  try {
    db.query(
      "SELECT * FROM main_admin_db.invoice_order_myshop where invoice_no is not null",
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {}
});
// get All Invoices when customer is created myhrms
app.get("/api/v1/get/all/invoice/myhrms/ex/data", (req, res) => {
  try {
    db.query(
      "SELECT * FROM main_admin_db.invoice_order_myhrms where invoice_no is not null",
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {}
});
// get all logs of ticket
app.get("/api/v1/get/all/log/ticket/ft/status/:id", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.myit_ft_ticket_log_hist where ticket_id = ?",
    [req.params.id],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//
// Update Eng Revisit form email Template admin

app.put("/api/v1/eng/revisit/email/temp/subject", (req, res) => {
  const subject = req.body.subject1;
  db.query(
    "UPDATE `main_admin_db`.email_temp_eng_revisit SET subject =?  WHERE id = 1",
    [subject],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

app.put("/api/v1/eng/revisit/email/temp/url", (req, res) => {
  const url = req.body.url;
  db.query(
    "UPDATE `main_admin_db`.email_temp_eng_revisit SET url =?  WHERE id = 1",
    [url],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

app.put("/api/v1/eng/revisit/email/temp/msg", (req, res) => {
  const message = req.body.message;
  db.query(
    "UPDATE `main_admin_db`.email_temp_eng_revisit SET message =?  WHERE id = 1",
    [message],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

app.put("/api/v1/eng/revisit/email/temp/caution", (req, res) => {
  const caution = req.body.caution;
  db.query(
    "UPDATE `main_admin_db`.email_temp_eng_revisit SET caution =?  WHERE id = 1",
    [caution],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

app.put("/api/v1/eng/revisit/email/temp/sign", (req, res) => {
  const sign = req.body.sign;
  db.query(
    "UPDATE `main_admin_db`.email_temp_eng_revisit SET signature =?  WHERE id = 1",
    [sign],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

app.get("/api/v1/get/data/eng/revisit/email/temp", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.email_temp_eng_revisit",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// Update Eng update form email Template admin

app.put("/api/v1/eng/update/email/temp/subject", (req, res) => {
  const subject = req.body.subject1;
  db.query(
    "UPDATE `main_admin_db`.email_temp_myit_ft_eng_update SET subject =?  WHERE id = 1",
    [subject],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

app.put("/api/v1/eng/update/email/temp/url", (req, res) => {
  const url = req.body.url;
  db.query(
    "UPDATE `main_admin_db`.email_temp_myit_ft_eng_update SET url =?  WHERE id = 1",
    [url],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

app.put("/api/v1/eng/update/email/temp/msg", (req, res) => {
  const message = req.body.message;
  db.query(
    "UPDATE `main_admin_db`.email_temp_myit_ft_eng_update SET message =?  WHERE id = 1",
    [message],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

app.put("/api/v1/eng/update/email/temp/caution", (req, res) => {
  const caution = req.body.caution;
  db.query(
    "UPDATE `main_admin_db`.email_temp_myit_ft_eng_update SET caution =?  WHERE id = 1",
    [caution],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

app.put("/api/v1/eng/update/email/temp/sign", (req, res) => {
  const sign = req.body.sign;
  db.query(
    "UPDATE `main_admin_db`.email_temp_myit_ft_eng_update SET signature =?  WHERE id = 1",
    [sign],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

app.get("/api/v1/get/data/eng/update/email/temp", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.email_temp_myit_ft_eng_update",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// Update myit next invoice form email Template admin
app.put("/api/v1/myit/next/invoice/email/temp/subject", (req, res) => {
  const subject = req.body.subject1;
  db.query(
    "UPDATE `main_admin_db`.email_temp_myit_ft_next_invoice SET subject =?  WHERE id = 1",
    [subject],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

app.put("/api/v1/myit/next/invoice/email/temp/url", (req, res) => {
  const url = req.body.url;
  db.query(
    "UPDATE `main_admin_db`.email_temp_myit_ft_next_invoice SET url =?  WHERE id = 1",
    [url],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

app.put("/api/v1/myit/next/invoice/email/temp/msg", (req, res) => {
  const message = req.body.message;
  db.query(
    "UPDATE `main_admin_db`.email_temp_myit_ft_next_invoice SET message =?  WHERE id = 1",
    [message],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

app.put("/api/v1/myit/next/invoice/email/temp/caution", (req, res) => {
  const caution = req.body.caution;
  db.query(
    "UPDATE `main_admin_db`.email_temp_myit_ft_next_invoice SET caution =?  WHERE id = 1",
    [caution],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

app.put("/api/v1/myit/next/invoice/email/temp/sign", (req, res) => {
  const sign = req.body.sign;
  db.query(
    "UPDATE `main_admin_db`.email_temp_myit_ft_next_invoice SET signature =?  WHERE id = 1",
    [sign],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

app.get("/api/v1/get/data/myit/next/invoice/email/temp", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.email_temp_myit_ft_next_invoice",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// ticket log invoice
app.post("/second/send/invoice/ticket/log", async function (req, res) {
  const {
    mail,
    name,
    invoice_num,
    order_id,
    gst,
    dataUri,
    amount,
    amount_incl_tax,
    ticket_id,
    ipAddress,
    id,
  } = req.body;

  var date = new Date(); // Now
  //  date.setDate(date.getDate() + 30);

  // var today = new Date();
  // var takeDate = today.setDate(today.getDate() + 30);
  var dd = String(date.getDate()).padStart(2, "0");
  var mm = String(date.getMonth() + 1).padStart(2, "0"); //January is 0!
  var yyyy = date.getFullYear();

  const order_id2 =
    "ORD" +
    generator.generate({
      numbers: true,
      length: 7,
      uppercase: true,
      lowercase: false,
    });

  const pdfBuffer = Buffer.from(dataUri.split(",")[1], "base64");

  db.query(
    "update main_admin_db.myit_ft_ticket_log_hist set pay_status = ? where id  = ?",
    ["Paid", id],
    (err, result) => {
      if (err) console.log(err);
      else console.log("Payment Status : Paid");
    }
  );

  const takeDate = yyyy + "-" + mm + "-" + dd;
  db.query(
    "update main_admin_db.myit_all_ticket_customers set date = ? where mail = ? and ticket_id = ?",
    [takeDate, mail, ticket_id],
    async (err, result) => {
      if (err) console.log(err);
      else {
        db.query(
          "select * from main_admin_db.myit_all_ticket_customers where mail = ? and ticket_id = ?",
          [mail, ticket_id],
          (errInvoice, resultInvoice) => {
            if (errInvoice) console.log(errInvoice);
            else {
              const resultInvoice1 = resultInvoice[0];
              console.log(resultInvoice);
              db.query(
                "select * from main_admin_db.invoice_order_myit_ft where order_id = ? and billing_email = ?",
                [order_id, mail],
                (errNN, resultNN) => {
                  if (errNN) console.log(errNN);
                  else {
                    if (!resultNN.length) {
                      db.query(
                        "insert into main_admin_db.invoice_order_myit_ft(order_id,order_date,amount_incl_tax,billing_name,invoice_no,gst,billing_address,billing_email,billing_te;,service,problem_remark,billing_ip) values(?,?,?,?,?,?,?,?,?,?,?,?)",
                        [
                          order_id,
                          takeDate,
                          amount_incl_tax,
                          resultInvoice1.name,
                          invoice_num,
                          gst ? gst : 18,
                          resultInvoice1.address,
                          resultInvoice1.mail,
                          resultInvoice1.phone,
                          resultInvoice1.problem_type,
                          resultInvoice1.msg,
                          ipAddress,
                        ],
                        (err22, result22) => {
                          if (err22) console.log(err22);
                          else {
                            fs.writeFileSync(
                              `./ticket_log/${mail}_${name}.pdf`,
                              pdfBuffer
                            );
                            db.query(
                              "SELECT * FROM main_admin_db.email_temp_myit_ft_next_invoice",
                              (errPay, resultPay) => {
                                if (errPay) console.log(errPay);
                                else {
                                  // node mailer
                                  const output = `
      
                      <h3>Dear ${name} </h3>
                      <p>${resultPay[0].message}.</p>
      
                      <p><b>MyIT FT-ID :</b> ${ticket_id}</p>

                      <p><b>URL :</b> <a href=${resultPay[0]?.url}>${resultPay[0]?.url}</a></p> </p>
      
                      Please find attached invoice for your records.</p>
      
                      <p>${resultPay[0].caution}.</p>
      
                      <p>Thanks & Best Regards</p>
                      <p>${resultPay[0].signature}</p>
      
                      `;

                                  db.query(
                                    "SELECT * FROM `myveda-db`.email_srv",
                                    (err, result) => {
                                      if (err) {
                                        console.log(err);
                                      } else {
                                        console.log(result);
                                        let host1 = result[0]?.host;
                                        let port1 = result[0]?.port;
                                        let user1 = result[0]?.auth_uid;
                                        let pass1 = result[0]?.auth_pass;
                                        let fromEmail = result[0]?.from_email;
                                        let bccEmail = result[0]?.bcc_email;
                                        let transporter =
                                          nodemailer.createTransport({
                                            host: host1,
                                            port: port1,
                                            secure: true, // true for 465, false for other p orts
                                            auth: {
                                              user: user1, // generated ethereal user
                                              pass: pass1, // generated ethereal password
                                            },
                                          });

                                        // send mail with defined transport object
                                        let info = transporter.sendMail({
                                          from: `"" ${fromEmail}`, // sender address
                                          to: mail, // list of receivers
                                          subject: resultPay[0].subject, // Subject line
                                          bcc: bccEmail,
                                          html: output, // html body
                                          attachments: [
                                            {
                                              filename: "invoice.pdf",
                                              content: fs.createReadStream(
                                                `./ticket_log/${mail}_${name}.pdf`,
                                                pdfBuffer
                                              ),
                                            },
                                          ],
                                        });
                                      }
                                    }
                                  );
                                }
                              }
                            );
                          }
                        }
                      );
                    }
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});
// myit all services for select dropdown
app.get("/api/v1/get/all/myit/services/select", (req, res) => {
  try {
    db.query(
      "SELECT sub_cat FROM main_admin_db.myit_services",
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {
    console.log(error);
  }
});
//pay now button enable or disable
app.get("/api/v1/get/pay/now/status", (req, res) => {
  db.query("SELECT * FROM main_admin_db.myvedait_config", (err, result) => {
    if (err) console.log(err);
    else {
      res.send(result);
    }
  });
});
app.put("/api/v1/update/myveda/pay/config", (req, res) => {
  const { status } = req.body;
  const status_1 = status === true ? 1 : 0;
  console.log(status);
  console.log(status_1);
  db.query(
    "update main_admin_db.myvedait_config set myveda_pay = ? where id = 1",
    [status_1],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
app.put("/api/v1/update/myit/pay/config", (req, res) => {
  const { status } = req.body;
  const status_1 = status === true ? 1 : 0;
  console.log(status);
  console.log(status_1);
  db.query(
    "update main_admin_db.myvedait_config set myit_pay = ? where id = 1",
    [status_1],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
app.put("/api/v1/update/myshop/pay/config", (req, res) => {
  const { status } = req.body;
  const status_1 = status === true ? 1 : 0;
  console.log(status);
  console.log(status_1);
  db.query(
    "update main_admin_db.myvedait_config set myshop_pay = ? where id = 1",
    [status_1],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
app.put("/api/v1/update/praxis/pay/config", (req, res) => {
  const { status } = req.body;
  const status_1 = status === true ? 1 : 0;
  db.query(
    "update main_admin_db.myvedait_config set praxis_pay = ? where id = 1",
    [status_1],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
app.put("/api/v1/update/myhrms/pay/config", (req, res) => {
  const { status } = req.body;
  const status_1 = status === true ? 1 : 0;
  db.query(
    "update main_admin_db.myvedait_config set myhrms_pay = ? where id = 1",
    [status_1],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
app.put("/api/v1/update/course/pay/now/status", (req, res) => {
  console.log(req.body);
  const { status } = req.body;
  db.query(
    "update main_admin_db.myvedait_config set pay_now_status = ? where id = ?",
    [status, 1],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

// test db creation
app.post("/test/db/creation", (req, res) => {
  const d_base_name = "XYZ_DBASE";
  db.query("CREATE DATABASE IF NOT EXISTS ??", [d_base_name], (err, result) => {
    if (err) console.log(err.sqlMessage);
    else {
      setTimeout(() => {
        db.query(
          `CREATE TABLE ??.\`table_a\` (
      id INT NOT NULL AUTO_INCREMENT,
      name VARCHAR(255),
       des TEXT,
       PRIMARY KEY (id)
    )`,
          [d_base_name],
          (err1, result1) => {
            if (err1) console.log(err1);
            else {
              db.query(
                `CREATE TABLE ??.\`table_b\` (
          id INT NOT NULL AUTO_INCREMENT,
         name VARCHAR(255),
          des TEXT,
          PRIMARY KEY (id)
        )`,
                [d_base_name]
              );
            }
          }
        );
      }, 2000);
    }
  });
});
// payment
// CCAvenue Credentials
const merchantId = "2948072";
const accessCode = "AVPK23KJ57BN07KPNB";
const workingKey = "4FED37B88724175796D87BE0355F75A0";
const redirectUrl = "http://localhost3000/learner/login"; // Replace with your actual redirect URL

// Payment processing route
app.post("/make-payment", (req, res) => {
  const orderAmount = req.body.amount; // Get the order amount from the request

  console.log(req.body);
  // Create a unique order ID and a callback URL
  const order_id = Date.now().toString();
  const redirect_url = redirectUrl;

  // Create a checksum to authenticate the request
  const data = `${merchantId}|${order_id}|${orderAmount}|${redirect_url}|${accessCode}`;
  const checksum = crypto.AES.encrypt(data, workingKey).toString();

  // Prepare the request to CCAvenue

  const requestData = {
    merchant_id: merchantId,
    order_id,
    amount: orderAmount,
    redirect_url,
    access_code: accessCode,
    billing_name: req.body.name,
    // Add other required fields
    // ...
    checksum,
  };

  try {
    // Send a request to CCAvenue
    async function tookPay() {
      const response = await axios.post(
        "https://test.ccavenue.com/transaction/transaction.do?command=initiateTransaction",
        requestData
      );

      // Redirect the user to CCAvenue for payment
      console.log(response.data);
      res.json(response.data);
    }

    tookPay();
  } catch (error) {
    res.status(500).json({ error: "Payment request failed." });
  }
});
app.get("/api/v1/mytit/ft/invoice/details/:order_id", (req, res) => {
  const { order_id } = req.params;
  console.log(order_id);

  db.query(
    "SELECT * FROM main_admin_db.ccav_res_payment_details where order_id = ?",
    [order_id],
    (err, result) => {
      if (err) console.log(err);
      else console.log(result);
      db.query(
        "SELECT * FROM main_admin_db.myit_all_ticket_customers where order_id = ?",
        [order_id],
        (err2, result2) => {
          if (err2) console.log(err2);
          else {
            //   console.log({ res1: result, res2: result2 });
            res.send({ res1: result, res2: result2 });
          }
        }
      );
    }
  );
});

app.get("/api/v1/praxis/invoice/details/:order_id", (req, res) => {
  const { order_id } = req.params;
  console.log(order_id);

  db.query(
    "SELECT * FROM main_admin_db.ccav_res_payment_details where order_id = ?",
    [order_id],
    (err, result) => {
      if (err) console.log(err);
      else {
        db.query(
          "SELECT * FROM main_admin_db.praxis_indi_cust_ids where order_id = ?",
          [order_id],
          (err2, result2) => {
            if (err2) console.log(err2);
            else {
              res.send({
                res1: result,
                res2: result2,
              });
            }
          }
        );
      }
    }
  );
});
app.get("/api/v1/myveda/invoice/details/:order_id", (req, res) => {
  const { order_id } = req.params;
  console.log(order_id);

  db.query(
    "SELECT * FROM main_admin_db.ccav_res_payment_details where order_id = ?",
    [order_id],
    (err, result) => {
      if (err) console.log(err);
      else {
        db.query(
          "SELECT * FROM main_admin_db.myveda_indi_cust_ids where order_id = ?",
          [order_id],
          (err2, result2) => {
            if (err2) console.log(err2);
            else {
              res.send({
                res1: result,
                res2: result2,
              });
            }
          }
        );
      }
    }
  );
});

app.get("/api/v1/myveda/courses/orders/:order_id", (req, res) => {
  db.query(
    "SELECT * FROM `myveda-db`.user_course_map_table_la where order_id = ?",
    [req.params.order_id],
    (err, result) => {
      if (err) console.log(err);
      else {
        db.query(
          "SELECT * FROM `myveda-db`.add_courses where course_id = ?",
          [result[0]?.course_id],
          (err2, result2) => {
            if (err2) console.log(err2);
            else res.send(result2);
          }
        );
      }
    }
  );
});
app.post("/api/v1/create/cust_id/myshop", (req, res) => {
  const { gst, order_id, ip, duration, hsnHacData } = req.body;
  const {
    country,
    contactcode,
    pinCode,
    myCity,
    stateSelect,
    price,
    name,
    invoice_no,
    nameFull,

    amount_incl_tax,
    amount,
    tax_amount,
    compName,
  } = req.body;
  const { mail, address, number } = req.body.formData;
  const dura = parseInt(duration);
  var today = new Date();
  var dd = String(today.getDate()).padStart(2, "0");
  var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
  var yyyy = today.getFullYear();

  var presentDate = yyyy + "-" + mm + "-" + dd;

  // Add 90 days to the current date
  function addDaysToCurrentDate(days) {
    const currentDate = new Date();
    currentDate.setDate(currentDate.getDate() + days);

    const year = currentDate.getFullYear();
    const month = String(currentDate.getMonth() + 1).padStart(2, "0");
    const day = String(currentDate.getDate()).padStart(2, "0");

    const formattedDate = `${year}-${month}-${day}`;

    return formattedDate;
  }

  const futureDate = addDaysToCurrentDate(dura);
  db.query(
    "SELECT * FROM main_admin_db.myhrms_indi_cust_ids",
    (errP, resultP) => {
      if (errP) console.log(errP);
      else {
        const newNo = resultP.length + 1;
        const paddedId =
          newNo.toString().length < 4
            ? "0".repeat(4 - newNo.toString().length) + newNo
            : newNo;
        const cust_id = "MYSHOP" + paddedId;
        let domain_id = cust_id.toLowerCase() + ".myshop";

        domain_id.toLowerCase();
        db.query(
          "SELECT * FROM main_admin_db.myshop_indi_cust_ids where order_id  = ? and mail = ?",
          [order_id, mail],
          (err, result) => {
            if (err) console.log(err);
            else {
              if (!result.length) {
                db.query(
                  `insert into main_admin_db.myshop_indi_cust_ids(cust_id,
                mail,
                country,
                state,
                city,
                pincode,
                address,
                number,
                start_date,
                end_date,
                name,
                order_id,
                ccav_order_status,duration,tax,hsn_hac,amount_incl_tax,tax_amount,amount,company_name,domain_id)values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`,
                  [
                    cust_id,
                    mail,
                    country,
                    stateSelect,
                    myCity,
                    pinCode,
                    address,
                    number,
                    presentDate,
                    futureDate,
                    nameFull,
                    order_id,
                    "Pending",
                    duration,

                    hsnHacData.tax_rate_percent,
                    hsnHacData.hsn_code,
                    amount_incl_tax,
                    tax_amount,
                    amount,
                    compName,
                    domain_id,
                  ],

                  (err2, result2) => {
                    if (err2) console.log(err2);
                    else {
                      res.status(200).json({ success: true });
                    }
                  }
                );
              }
            }
          }
        );
      }
    }
  );
});
app.post("/api/v1/create/cust_id/praxis", (req, res) => {
  const { gst, order_id, ip, duration } = req.body;
  const {
    country,
    contactcode,
    pinCode,
    myCity,
    stateSelect,
    price,
    name,
    invoice_no,
    cust_id,
    nameFull,
    amount_incl_tax,
    hsnHacData,
  } = req.body;
  const { mail, address, number } = req.body.formData;
  var today = new Date();
  var dd = String(today.getDate()).padStart(2, "0");
  var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
  var yyyy = today.getFullYear();

  var presentDate = yyyy + "-" + mm + "-" + dd;

  // Add 90 days to the current date
  today.setDate(today.getDate() + 90);

  var futureDD = String(today.getDate()).padStart(2, "0");
  var futureMM = String(today.getMonth() + 1).padStart(2, "0");
  var futureYYYY = today.getFullYear();

  var futureDate = futureYYYY + "-" + futureMM + "-" + futureDD;
  db.query(
    "SELECT * FROM main_admin_db.praxis_indi_cust_ids where order_id  = ? and mail = ?",
    [order_id, mail],
    (err, result) => {
      if (err) console.log(err);
      else {
        if (!result.length) {
          db.query(
            `insert into main_admin_db.praxis_indi_cust_ids(cust_id,
        mail,
        country,
        state,
        city,
        pincode,
        address,
        number,
        start_date,
        end_date,
        name,
        order_id,
        ccav_order_status,duration,amount,amount_incl_tax,tax,hsn_hac)values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`,
            [
              cust_id,
              mail,
              country,
              stateSelect,
              myCity,
              pinCode,
              address,
              number,
              presentDate,
              futureDate,
              nameFull,
              order_id,
              "Pending",
              90,
              price,
              amount_incl_tax,
              hsnHacData.tax_rate_percent,
              hsnHacData.hsn_code,
            ],
            (err2, result2) => {
              if (err2) console.log(err2);
              else {
                res.status(200).json({ success: true });
              }
            }
          );
        }
      }
    }
  );
});
//get all email template data of practice customer registration
app.get("/api/v1/get/data/email/temp/myshop/cust/reg", (req, res) => {
  try {
    db.query(
      "SELECT * FROM main_admin_db.email_temp_myshop_indi_cust_reg where id = 1",
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {}
});
// update practice customer reg template
// config subject
app.put("/api/v1/update/temp/myshop/cust/reg/subject", (req, res) => {
  const subject = req.body.subject1;
  db.query(
    "UPDATE `main_admin_db`.email_temp_myshop_indi_cust_reg SET subject =?  WHERE id = 1",
    [subject],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//update email url of
app.put("/api/v1/update/temp/myshop/cust/reg/url", (req, res) => {
  const url = req.body.url;
  db.query(
    "UPDATE `main_admin_db`.email_temp_myshop_indi_cust_reg SET url =?  WHERE id = 1",
    [url],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email message of
app.put("/api/v1/update/temp/myshop/cust/reg/msg", (req, res) => {
  const message = req.body.message;
  db.query(
    "UPDATE `main_admin_db`.email_temp_myshop_indi_cust_reg SET message =?  WHERE id = 1",
    [message],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email caution of
app.put("/api/v1/update/temp/myshop/cust/reg/caution", (req, res) => {
  const caution = req.body.caution;
  db.query(
    "UPDATE `main_admin_db`.email_temp_myshop_indi_cust_reg SET caution =?  WHERE id = 1",
    [caution],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email sign of
app.put("/api/v1/update/temp/myshop/cust/reg/sign", (req, res) => {
  const sign = req.body.sign;
  db.query(
    "UPDATE `main_admin_db`.email_temp_myshop_indi_cust_reg SET signature =?  WHERE id = 1",
    [sign],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

// get ccav order data
app.get("/api/v1/get/ccav/order/data/online", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.ccav_res_payment_details",
    (err, data) => {
      if (err) console.log(err);
      else res.send(data);
    }
  );
});
// online order details invoices

app.get("/api/v1/get/invoice/online/order/details/invoice", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.myit_all_ticket_customers",
    (err, ftdata) => {
      if (err) console.log(err);
      else {
        db.query(
          "SELECT * FROM main_admin_db.myshop_indi_cust_ids",
          (err, myshop) => {
            if (err) console.log(err);
            else {
              db.query(
                "SELECT * FROM main_admin_db.myveda_indi_cust_ids",
                (err, myveda) => {
                  if (err) console.log(err);
                  else {
                    db.query(
                      "SELECT * FROM main_admin_db.praxis_indi_cust_ids",
                      (err, praxis) => {
                        if (err) console.log(err);
                        else {
                          db.query(
                            "SELECT * FROM main_admin_db.myhrms_indi_cust_ids",
                            (err, myhrms) => {
                              if (err) console.log(err);
                              else {
                                res.send({
                                  ftdata,
                                  myshop,
                                  myveda,
                                  praxis,
                                  myhrms,
                                });
                              }
                            }
                          );
                        }
                      }
                    );
                  }
                }
              );
            }
          }
        );
      }
    }
  );
});

// ccav order details

app.get("/api/v1/get/count/ccav/order/details", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.ccav_res_payment_details",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

app.get("/api/v1/get/check/coupon/status/:id", (req, res) => {
  const { id } = req.params;

  console.log(id);

  db.query(
    "SELECT * FROM main_admin_db.coupon_table WHERE coupon_id = ?",
    [id],
    (err, result) => {
      if (err) console.log(err);
      else {
        if (result.length) {
          var today = new Date();
          var dd = String(today.getDate()).padStart(2, "0");
          var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
          var yyyy = today.getFullYear();

          today = yyyy + "-" + mm + "-" + dd;
          var { end_date, uses_remain, coupon_used } = result[0];
          if (today > end_date || uses_remain <= 0) {
            console.log(end_date > today);
            res.status(200).json({
              success: false,
              message: "Invalid Counpon",
            });
          } else {
            res.status(200).json({
              success: true,
              data: result,
            });
          }
        } else {
          res.status(200).json({
            success: false,
            message: "Counpon ID Not Found.",
          });
        }
      }
    }
  );
});

app.get("/api/v1/get/myshop/subs/customers", (req, res) => {
  db.query(
    "SELECT t1.cust_id,t2.comp_name,t2.comp_gstin,t1.name,t1.number,t1.city,t1.start_date,t1.end_date,t1.duration,t1.ccav_order_status,t1.duration,t1.mail FROM main_admin_db.myshop_indi_cust_ids as t1 left join `myshop-db`.cust_reg as t2 on t1.cust_id = t2.cust_id group by t1.cust_id,t1.name,t2.comp_name,t2.comp_gstin,t1.number,t1.order_id,t1.start_date,t1.end_date,t1.city,t1.ccav_order_status,t1.duration,t1.mail ",
    (err, result) => {
      if (err) console.log(err);
      else {
        res.send(result);
        console.log(result);
      }
    }
  );
});
app.get("/api/v1/get/myhrms/subs/customers", (req, res) => {
  db.query(
    "SELECT t1.cust_id,t2.comp_name,t2.comp_gstin,t1.name,t1.number,t1.city,t1.start_date,t1.end_date,t1.duration,t1.ccav_order_status,t1.duration,t1.mail FROM main_admin_db.myhrms_indi_cust_ids as t1 left join `myhrms-db`.cust_reg as t2 on t1.cust_id = t2.cust_id group by t1.cust_id,t1.name,t2.comp_name,t2.comp_gstin,t1.number,t1.order_id,t1.start_date,t1.end_date,t1.city,t1.ccav_order_status,t1.duration,t1.mail ",
    (err, result) => {
      if (err) console.log(err);
      else {
        res.send(result);
      }
    }
  );
});
app.put("/api/v1/update/myhrms/cust/data", (req, res) => {
  console.log(req.body);

  const {
    cust_id,
    comp_name,
    comp_gstin,
    name,
    number,
    city,
    start_date,
    end_date,
    duration,
  } = req.body;

  db.query(
    "update `myhrms-db`.cust_reg set comp_name = ?,comp_gstin = ? where cust_id = ?",
    [comp_name, comp_gstin, cust_id],
    (err, result) => {
      if (err)
        res.status(404).json({
          success: false,
          message: err.message,
        });
      else {
        db.query(
          "update main_admin_db.myhrms_indi_cust_ids set name = ?,number = ?,city = ?,end_date = ?,duration = ? where cust_id = ?",
          [name, number, city, end_date, duration, cust_id],
          (err2, result2) => {
            if (err2)
              res.status(404).json({
                success: false,
                message: err2.message,
              });
            else {
              res.status(200).json({
                success: true,
                message: "! Data Updated Successfully",
              });
            }
          }
        );
      }
    }
  );
});
app.put("/api/v1/update/myshop/cust/data", (req, res) => {
  console.log(req.body);

  const {
    cust_id,
    comp_name,
    comp_gstin,
    name,
    number,
    city,
    start_date,
    end_date,
    duration,
  } = req.body;

  db.query(
    "update `myshop-db`.cust_reg set comp_name = ?,comp_gstin = ? where cust_id = ?",
    [comp_name, comp_gstin, cust_id],
    (err, result) => {
      if (err)
        res.status(404).json({
          success: false,
          message: err.message,
        });
      else {
        db.query(
          "update main_admin_db.myshop_indi_cust_ids set name = ?,number = ?,city = ?,end_date = ?,duration = ? where cust_id = ?",
          [name, number, city, end_date, duration, cust_id],
          (err2, result2) => {
            if (err2)
              res.status(404).json({
                success: false,
                message: err2.message,
              });
            else {
              res.status(200).json({
                success: true,
                message: "! Data Updated Successfully",
              });
            }
          }
        );
      }
    }
  );
});

// online gstin myshop inv
app.get("/api/v1/get/gst/inv/data/myshop", (req, res) => {
  db.query(
    "SELECT t1.order_id,t1.order_date,t1.billing_name,t1.billing_email,t1.billing_tel,t1.invoice_no,t2.amount,t2.mer_param3,t1.gst_challan_no,t1.gst_status,t1.gst_pay_date FROM main_admin_db.invoice_order_myshop as t1 left join main_admin_db.ccav_res_payment_details as t2 on t1.order_id = t2.order_id where t2.order_status = 'Success' group by t1.order_id,t1.order_date,t1.billing_name,t1.billing_email,t1.billing_tel,t1.invoice_no,t2.amount,t2.mer_param3,t1.gst_challan_no,t1.gst_status,t1.gst_pay_date",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// online gstin myhrms inv
app.get("/api/v1/get/gst/inv/data/myhrms", (req, res) => {
  db.query(
    "SELECT t1.order_id,t1.order_date,t1.billing_name,t1.billing_email,t1.billing_tel,t1.invoice_no,t2.amount,t2.mer_param3,t1.gst_challan_no,t1.gst_status,t1.gst_pay_date FROM main_admin_db.invoice_order_myhrms as t1 left join main_admin_db.ccav_res_payment_details as t2 on t1.order_id = t2.order_id where t2.order_status = 'Success' group by t1.order_id,t1.order_date,t1.billing_name,t1.billing_email,t1.billing_tel,t1.invoice_no,t2.amount,t2.mer_param3,t1.gst_challan_no,t1.gst_status,t1.gst_pay_date",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

// online gstin myit inv
app.get("/api/v1/get/gst/inv/data/myitft", (req, res) => {
  db.query(
    "SELECT t1.order_id,t1.order_date,t1.billing_name,t1.billing_email,t1.billing_tel,t1.invoice_no,t2.amount,t2.mer_param3,t1.gst_challan_no,t1.gst_status,t1.gst_pay_date FROM main_admin_db.invoice_order_myit_ft as t1 left join main_admin_db.ccav_res_payment_details as t2 on t1.order_id = t2.order_id where t2.order_status = 'Success' group by t1.order_id,t1.order_date,t1.billing_name,t1.billing_email,t1.billing_tel,t1.invoice_no,t2.amount,t2.mer_param3,t1.gst_challan_no,t1.gst_status,t1.gst_pay_date",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
// online gstin praxis inv
app.get("/api/v1/get/gst/inv/data/praxis", (req, res) => {
  db.query(
    "SELECT t1.order_id,t1.order_date,t1.billing_name,t1.billing_email,t1.billing_tel,t1.invoice_no,t2.amount,t2.mer_param3,t1.gst_challan_no,t1.gst_status,t1.gst_pay_date FROM main_admin_db.invoice_order_praxis as t1 left join main_admin_db.ccav_res_payment_details as t2 on t1.order_id = t2.order_id where t2.order_status = 'Success' group by t1.order_id,t1.order_date,t1.billing_name,t1.billing_email,t1.billing_tel,t1.invoice_no,t2.amount,t2.mer_param3,t1.gst_challan_no,t1.gst_status,t1.gst_pay_date",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

// online gstin myveda inv
app.get("/api/v1/get/gst/inv/data/myveda", (req, res) => {
  db.query(
    "SELECT t1.order_id,t1.order_date,t1.billing_name,t1.billing_email,t1.billing_tel,t1.invoice_no,t2.amount,t2.mer_param3,t1.gst_challan_no,t1.gst_status,t1.gst_pay_date FROM main_admin_db.tax_invoice_order_myvedait as t1 left join main_admin_db.ccav_res_payment_details as t2 on t1.order_id = t2.order_id where t2.order_status = 'Success' group by t1.order_id,t1.order_date,t1.billing_name,t1.billing_email,t1.billing_tel,t1.invoice_no,t2.amount,t2.mer_param3,t1.gst_challan_no,t1.gst_status,t1.gst_pay_date",
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

//
// online gstin myveda inv
app.get("/api/v1/get/gst/inv/data/myvedait/:id", (req, res) => {
  const { id } = req.params;
  db.query(
    "SELECT * FROM main_admin_db.tax_invoice_order_myvedait where service_id = ? and tax_applicability = ?",
    [id, "Plus-Tax"],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

// update gst payout
app.put("/api/v1/update/invoice/gst/data", (req, res) => {
  const { id, challanNo, date, status, bodyStatus, taxAmount } = req.body;
  db.query(
    "update main_admin_db.tax_invoice_order_myvedait set gst_challan_no = ?,gst_status = ?,gst_pay_date = ?,tax_paid_amount = ? where order_id = ?",
    [challanNo, status, date, taxAmount, id],
    (err, result) => {
      if (err) console.log(err);
      else
        res
          .status(200)
          .json({ success: true, message: "! Data Update Successfully" });
    }
  );
});
// check cust id praxis

app.get("/api/v1/check/cust_id/praxis", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.praxis_indi_cust_ids",

    (errP, resultP) => {
      if (errP) console.log(errP);
      else {
        const newNo = resultP.length + 1;
        const paddedId =
          newNo.toString().length < 4
            ? "0".repeat(4 - newNo.toString().length) + newNo
            : newNo;

        const cust_id = "PRAXIS" + paddedId;
        res.status(200).send({ success: true, cust_id });
      }
    }
  );
});
// check cust id myshop

app.get("/api/v1/check/cust_id/myshop", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.myshop_indi_cust_ids",

    (errP, resultP) => {
      if (errP) console.log(errP);
      else {
        const newNo = resultP.length + 1;
        const paddedId =
          newNo.toString().length < 4
            ? "0".repeat(4 - newNo.toString().length) + newNo
            : newNo;

        const cust_id = "MYSHOP" + paddedId;
        res.status(200).send({ success: true, cust_id });
      }
    }
  );
});
// check cust id myhrms

app.get("/api/v1/check/cust_id/myhrms", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.myhrms_indi_cust_ids",

    (errP, resultP) => {
      if (errP) console.log(errP);
      else {
        const newNo = resultP.length + 1;
        const paddedId =
          newNo.toString().length < 4
            ? "0".repeat(4 - newNo.toString().length) + newNo
            : newNo;

        const cust_id = "MYHRMS" + paddedId;
        res.status(200).send({ success: true, cust_id });
      }
    }
  );
});
app.post("/api/v1/create/cust_id/myhrms", (req, res) => {
  const { gst, order_id, ip, duration, hsnHacData, gstin } = req.body;
  const {
    country,
    contactcode,
    pinCode,
    myCity,
    stateSelect,
    price,
    name,
    invoice_no,
    nameFull,
    amount_incl_tax,
    amount,
    tax_amount,
    compName,
  } = req.body;
  const { mail, address, number } = req.body.formData;
  const comp = compName?.toLowerCase().split(" ");

  const dura = parseInt(duration);
  var today = new Date();
  var dd = String(today.getDate()).padStart(2, "0");
  var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
  var yyyy = today.getFullYear();

  var presentDate = yyyy + "-" + mm + "-" + dd;

  // Add 90 days to the current date
  function addDaysToCurrentDate(days) {
    const currentDate = new Date();
    currentDate.setDate(currentDate.getDate() + days);

    const year = currentDate.getFullYear();
    const month = String(currentDate.getMonth() + 1).padStart(2, "0");
    const day = String(currentDate.getDate()).padStart(2, "0");

    const formattedDate = `${year}-${month}-${day}`;

    return formattedDate;
  }

  const futureDate = addDaysToCurrentDate(dura);
  db.query(
    "SELECT * FROM main_admin_db.myhrms_indi_cust_ids",
    (errP, resultP) => {
      if (errP) console.log(errP);
      else {
        const newNo = resultP.length + 1;
        const paddedId =
          newNo.toString().length < 4
            ? "0".repeat(4 - newNo.toString().length) + newNo
            : newNo;
        const cust_id = "MYHRMS" + paddedId;
        let domain_id = cust_id.toLowerCase() + ".myhrms";

        domain_id.toLowerCase();
        db.query(
          "SELECT * FROM main_admin_db.myhrms_indi_cust_ids where order_id  = ? and mail = ?",
          [order_id, mail],
          (err, result) => {
            if (err) console.log(err);
            else {
              if (!result.length) {
                db.query(
                  `insert into main_admin_db.myhrms_indi_cust_ids(cust_id,
              mail,
              country,
              state,
              city,
              pincode,
              address,
              number,
              start_date,
              end_date,
              name,
              order_id,
              ccav_order_status,duration,tax,hsn_hac,amount_incl_tax,tax_amount,amount,comp_name,domain_id,gstin)values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`,
                  [
                    cust_id,
                    mail,
                    country,
                    stateSelect,
                    myCity,
                    pinCode,
                    address,
                    number,
                    presentDate,
                    futureDate,
                    nameFull,
                    order_id,
                    "Pending",
                    duration,

                    hsnHacData.tax_rate_percent,
                    hsnHacData.hsn_code,
                    amount_incl_tax,
                    tax_amount,
                    amount,
                    compName,
                    domain_id,
                    gstin,
                  ],

                  (err2, result2) => {
                    if (err2) console.log(err2);
                    else {
                      res.status(200).json({ success: true });
                    }
                  }
                );
              }
            }
          }
        );
      }
    }
  );
});
//create myshop customer
//create myshop customer
app.post("/api/v1/create/user/shop/cust_id/myshop", (req, res) => {
  const {
    ccavResDetails,
    invoice_no,
    gst,
    dataUri,
    state,
    dueDate,
    otherData,
  } = req.body;

  var today = new Date();
  var dd = String(today.getDate()).padStart(2, "0");
  var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
  var yyyy = today.getFullYear();

  var presentDate = yyyy + "-" + mm + "-" + dd;

  // Add 90 days to the current date
  today.setDate(today.getDate() + 90);

  var futureDD = String(today.getDate()).padStart(2, "0");
  var futureMM = String(today.getMonth() + 1).padStart(2, "0");
  var futureYYYY = today.getFullYear();

  var futureDate = futureYYYY + "-" + futureMM + "-" + futureDD;

  const pdf = Buffer.from(dataUri.split(",")[1], "base64");

  fs.writeFileSync(
    `./myshop_invoices/${ccavResDetails.billing_email}.pdf`,
    pdf
  );
  const { mer_param5 } = req.body.ccavResDetails;

  const parsedInvData = JSON.parse(mer_param5);
  const {
    coupon_id,
    mrp_amount,
    inv_amount,
    dis_percent,
    dis_amount,
    discounted_amount,
    tax_amount,
    tax_percent,
    inv_incl_tax_amount,
  } = parsedInvData;
  const coupon_no = coupon_id ? coupon_id : "N/A";
  db.query(
    "select * FROM main_admin_db.tax_invoice_order_myvedait where invoice_no = ?",
    [invoice_no],
    (err, result) => {
      if (err) throw err;
      else {
        if (!result.length) {
          db.query(
            `insert into \`main_admin_db\`.tax_invoice_order_myvedait (service_id,service_name,order_id,cust_id,order_date,invoice_no,billing_name,billing_tel,billing_email,billing_address,services,
              payment_status,payment_date_time,txn_details,payment_mode,
              mer_amount,
              ccav_tracking_id,
              ccav_bank_ref_no,
              ccav_order_status,
              ccav_failure_msg,
              ccav_payment_mode,
              ccav_card_name,
              ccav_status_code,
              ccav_status_message,
              ccav_retry,
              ccav_trans_date,
              ccav_response_code,
              invoice_gen_type,
              coupon_id,
              mrp_amount,
              inv_amount,
              inv_incl_tax_amount,
              dis_percent,
              dis_amount,
              discounted_amount,
              tax_amount,
              tax_percent,
              hsn_sac,
              due_date,
              duration,
              place_of_supply,
              sales_type
              ) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`,
            [
              9,
              "MYSHOP - SALES & LEDGERS MANAGEMENT",
              ccavResDetails.order_id,
              state?.cust_id,
              presentDate,
              invoice_no,
              ccavResDetails.billing_name,
              ccavResDetails.billing_tel,
              ccavResDetails.billing_email,
              ccavResDetails.billing_address,
              "MYSHOP - SALES & LEDGERS MANAGEMENT",
              "Paid",
              presentDate,
              "",
              ccavResDetails.payment_mode,
              ccavResDetails.amount,
              ccavResDetails.tracking_id,
              ccavResDetails.bank_ref_no,
              ccavResDetails.order_status,
              ccavResDetails.failure_msg,
              ccavResDetails.payment_mode,
              ccavResDetails.card_name,
              ccavResDetails.status_code,
              ccavResDetails.status_message,
              ccavResDetails.retry,
              ccavResDetails.trans_date,
              ccavResDetails.response_code,
              "Online",
              coupon_no,
              mrp_amount,
              inv_amount,
              inv_incl_tax_amount,
              dis_percent,
              dis_amount,
              discounted_amount,
              tax_amount,
              tax_percent,
              state.hsn_hac,
              dueDate,
              state.duration,
              otherData.inter_state,
              otherData.sales_type,
            ],
            (err1, result1) => {
              if (err1) throw err1;
              else {
                db.query(
                  "SELECT * FROM main_admin_db.email_temp_myshop_order_request",
                  (errTemp, resTemp) => {
                    if (errTemp) throw errTemp;
                    else {
                      const { subject, url, message, caution, signature } =
                        resTemp[0];
                      const output = `
                      <h3>Dear ${ccavResDetails.billing_name} </h3>
                      <p>${message}.</p>
                      <p><b>URL</b> : <a href="${url}" target="_blank">${url}</a></p>
                      <p><b>Customer ID :</b> ${state.cust_id}</p>
                      <p>${caution}</p>
                      <p>${signature}</p>
                    `;
                      db.query(
                        "SELECT * FROM `myveda-db`.email_srv",
                        (err, result) => {
                          if (err) {
                            console.log(err);
                          } else {
                            console.log(result);
                            let host1 = result[0]?.host;
                            let port1 = result[0]?.port;
                            let user1 = result[0]?.auth_uid;
                            let pass1 = result[0]?.auth_pass;
                            let fromEmail = result[0]?.from_email;
                            let bccEmail = result[0]?.bcc_email;
                            let transporter = nodemailer.createTransport({
                              host: host1,
                              port: port1,
                              secure: true, // true for 465, false for other p orts
                              auth: {
                                user: user1, // generated ethereal user
                                pass: pass1, // generated ethereal password
                              },
                            });

                            // send mail with defined transport object
                            let info = transporter
                              .sendMail({
                                from: `"" ${fromEmail}`, // sender address
                                to: ccavResDetails.billing_email, // list of receivers
                                subject: subject, // Subject line
                                bcc: bccEmail,
                                html: output, // html body
                                attachments: [
                                  {
                                    filename: "invoice.pdf",
                                    content: fs.createReadStream(
                                      `./myshop_invoices/${ccavResDetails.billing_email}.pdf`,
                                      pdf
                                    ),
                                  },
                                ],
                              })
                              .then(() => {
                                if (coupon_no === "N/A") {
                                  res.send(result1);
                                } else {
                                  const couponInsert = {
                                    coupon_id: coupon_no,
                                    service_id: 9,
                                    cust_id: state?.cust_id,
                                    order_id: ccavResDetails.order_id,
                                    service_name:
                                      "MYSHOP - SALES & LEDGERS MANAGEMENT",
                                    name: ccavResDetails.billing_name,
                                    email: ccavResDetails.billing_email,
                                    phone: ccavResDetails.billing_tel,
                                    used_date: ccavResDetails.trans_date,
                                    ccav_order_status:
                                      ccavResDetails.order_status,
                                  };

                                  db.query(
                                    "UPDATE main_admin_db.coupon_table SET status = ? where coupon_id = ?",
                                    [0, coupon_no],
                                    (errPP, resultPP) => {
                                      if (errPP) console.log(errPP);
                                      else {
                                        db.query(
                                          `insert into main_admin_db.coupon_used_by set ?`,
                                          [couponInsert],
                                          (errC, resultC) => {
                                            if (errC)
                                              console.log(
                                                errC,
                                                " : error while inserting coupon data in coupon used table."
                                              );
                                            else {
                                              db.query(
                                                "SELECT * FROM main_admin_db.coupon_table where coupon_id = ?",
                                                [coupon_no],
                                                (err2X, result2X) => {
                                                  if (err2X) console.log(err2X);
                                                  else {
                                                    let coupon_used =
                                                      result2X[0].coupon_used;

                                                    console.log(coupon_used);
                                                    let used = coupon_used + 1;
                                                    db.query(
                                                      "UPDATE main_admin_db.coupon_table SET coupon_used = ? where coupon_id = ?",
                                                      [used, coupon_no],
                                                      (err3X, result4) => {
                                                        if (err3X)
                                                          console.log(err3X);
                                                        else {
                                                          db.query(
                                                            "SELECT * FROM main_admin_db.coupon_table where coupon_id = ?",
                                                            [coupon_no],
                                                            (
                                                              err4,
                                                              result4X
                                                            ) => {
                                                              if (err4)
                                                                console.log(
                                                                  err4
                                                                );
                                                              else {
                                                                let uses =
                                                                  result4X[0]
                                                                    .uses;
                                                                let used_coupon =
                                                                  result4X[0]
                                                                    .coupon_used;

                                                                let remain =
                                                                  uses -
                                                                  used_coupon;
                                                                db.query(
                                                                  "UPDATE main_admin_db.coupon_table SET uses_remain = ? where coupon_id = ?",
                                                                  [
                                                                    remain,
                                                                    coupon_no,
                                                                  ],
                                                                  (
                                                                    err5X,
                                                                    result5
                                                                  ) => {
                                                                    if (err5X)
                                                                      console.log(
                                                                        err5X
                                                                      );
                                                                    else {
                                                                      res.send(
                                                                        result1
                                                                      );
                                                                    }
                                                                  }
                                                                );
                                                              }
                                                            }
                                                          );
                                                        }
                                                      }
                                                    );
                                                  }
                                                }
                                              );
                                            }
                                          }
                                        );
                                      }
                                    }
                                  );
                                }
                              });
                          }
                        }
                      );
                    }
                  }
                );
              }
            }
          );
        }
      }
    }
  );
});
//create hrms customer
//create hrms customer
app.post("/api/v1/create/user/hrms/cust_id/myhrms", (req, res) => {
  const {
    ccavResDetails,
    invoice_no,
    gst,
    dataUri,
    state,
    dueDate,
    otherData,
  } = req.body;

  var today = new Date();
  var dd = String(today.getDate()).padStart(2, "0");
  var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
  var yyyy = today.getFullYear();

  var presentDate = yyyy + "-" + mm + "-" + dd;

  // Add 90 days to the current date
  today.setDate(today.getDate() + 90);

  var futureDD = String(today.getDate()).padStart(2, "0");
  var futureMM = String(today.getMonth() + 1).padStart(2, "0");
  var futureYYYY = today.getFullYear();

  var futureDate = futureYYYY + "-" + futureMM + "-" + futureDD;

  const pdf = Buffer.from(dataUri.split(",")[1], "base64");

  fs.writeFileSync(
    `./myhrms_invoices/${ccavResDetails.billing_email}.pdf`,
    pdf
  );
  const { mer_param5 } = req.body.ccavResDetails;

  const parsedInvData = JSON.parse(mer_param5);
  const {
    coupon_id,
    mrp_amount,
    inv_amount,
    dis_percent,
    dis_amount,
    discounted_amount,
    tax_amount,
    tax_percent,
    inv_incl_tax_amount,
  } = parsedInvData;

  const coupon_no = coupon_id ? coupon_id : "N/A";
  db.query(
    "select * FROM main_admin_db.tax_invoice_order_myvedait where invoice_no = ?",
    [invoice_no],
    (err, result) => {
      if (err) throw err;
      else {
        if (!result.length) {
          db.query(
            `insert into \`main_admin_db\`.tax_invoice_order_myvedait (service_id,service_name,order_id,cust_id,order_date,invoice_no,billing_name,billing_tel,billing_email,billing_address,services,
              payment_status,payment_date_time,txn_details,payment_mode,
              mer_amount,
              ccav_tracking_id,
              ccav_bank_ref_no,
              ccav_order_status,
              ccav_failure_msg,
              ccav_payment_mode,
              ccav_card_name,
              ccav_status_code,
              ccav_status_message,
              ccav_retry,
              ccav_trans_date,
              ccav_response_code,
              invoice_gen_type,
              coupon_id,
              mrp_amount,
              inv_amount,
              inv_incl_tax_amount,
              dis_percent,
              dis_amount,
              discounted_amount,
              tax_amount,
              tax_percent,
              hsn_sac,
              due_date,
              duration,
              place_of_supply,
              sales_type
              ) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`,
            [
              10,
              "MYHRMS - Payroll & Attendence Management",
              ccavResDetails.order_id,
              state?.cust_id,
              presentDate,
              invoice_no,
              ccavResDetails.billing_name,
              ccavResDetails.billing_tel,
              ccavResDetails.billing_email,
              ccavResDetails.billing_address,
              "MYHRMS - Payroll & Attendence Management",
              "Paid",
              presentDate,
              "",
              ccavResDetails.payment_mode,
              ccavResDetails.amount,
              ccavResDetails.tracking_id,
              ccavResDetails.bank_ref_no,
              ccavResDetails.order_status,
              ccavResDetails.failure_msg,
              ccavResDetails.payment_mode,
              ccavResDetails.card_name,
              ccavResDetails.status_code,
              ccavResDetails.status_message,
              ccavResDetails.retry,
              ccavResDetails.trans_date,
              ccavResDetails.response_code,
              "Online",
              coupon_no,
              mrp_amount,
              inv_amount,
              inv_incl_tax_amount,
              dis_percent,
              dis_amount,
              discounted_amount,
              tax_amount,
              tax_percent,
              state.hsn_hac,
              dueDate,
              state.duration,
              otherData.inter_state,
              otherData.sales_type,
            ],
            (err1, result1) => {
              if (err1) throw err1;
              else {
                db.query(
                  "SELECT * FROM main_admin_db.email_temp_myhrms_indi_cust_reg",
                  (errTemp, resTemp) => {
                    if (errTemp) throw errTemp;
                    else {
                      const { subject, url, message, caution, signature } =
                        resTemp[0];
                      const output = `
                      <h3>Dear ${ccavResDetails.billing_name} </h3>
                      <p>${message}.</p>
                      <p><b>URL</b> : <a href="${url}" target="_blank">${url}</a></p>
                      <p><b>Customer ID :</b> ${state.cust_id}</p>
                      <p>${caution}</p>
                      <p>${signature}</p>
                    `;
                      db.query(
                        "SELECT * FROM `myveda-db`.email_srv",
                        (err, result) => {
                          if (err) {
                            console.log(err);
                          } else {
                            console.log(result);
                            let host1 = result[0]?.host;
                            let port1 = result[0]?.port;
                            let user1 = result[0]?.auth_uid;
                            let pass1 = result[0]?.auth_pass;
                            let fromEmail = result[0]?.from_email;
                            let bccEmail = result[0]?.bcc_email;
                            let transporter = nodemailer.createTransport({
                              host: host1,
                              port: port1,
                              secure: true, // true for 465, false for other p orts
                              auth: {
                                user: user1, // generated ethereal user
                                pass: pass1, // generated ethereal password
                              },
                            });

                            // send mail with defined transport object
                            let info = transporter
                              .sendMail({
                                from: `"" ${fromEmail}`, // sender address
                                to: ccavResDetails.billing_email, // list of receivers
                                subject: subject, // Subject line
                                bcc: bccEmail,
                                html: output, // html body
                                attachments: [
                                  {
                                    filename: "invoice.pdf",
                                    content: fs.createReadStream(
                                      `./myhrms_invoices/${ccavResDetails.billing_email}.pdf`,
                                      pdf
                                    ),
                                  },
                                ],
                              })
                              .then(() => {
                                if (coupon_no === "N/A") {
                                  res.send(result1);
                                } else {
                                  const couponInsert = {
                                    coupon_id: coupon_no,
                                    service_id: 10,
                                    cust_id: state?.cust_id,
                                    order_id: ccavResDetails.order_id,
                                    service_name:
                                      "MYHRMS - Payroll & Attendence Management",
                                    name: ccavResDetails.billing_name,
                                    email: ccavResDetails.billing_email,
                                    phone: ccavResDetails.billing_tel,
                                    used_date: ccavResDetails.trans_date,
                                    ccav_order_status:
                                      ccavResDetails.order_status,
                                  };

                                  db.query(
                                    "UPDATE main_admin_db.coupon_table SET status = ? where coupon_id = ?",
                                    [0, coupon_no],
                                    (errPP, resultPP) => {
                                      if (errPP) console.log(errPP);
                                      else {
                                        db.query(
                                          `insert into main_admin_db.coupon_used_by set ?`,
                                          [couponInsert],
                                          (errC, resultC) => {
                                            if (errC)
                                              console.log(
                                                errC,
                                                " : error while inserting coupon data in coupon used table."
                                              );
                                            else {
                                              db.query(
                                                "SELECT * FROM main_admin_db.coupon_table where coupon_id = ?",
                                                [coupon_no],
                                                (err2X, result2X) => {
                                                  if (err2X) console.log(err2X);
                                                  else {
                                                    let coupon_used =
                                                      result2X[0].coupon_used;

                                                    console.log(coupon_used);
                                                    let used = coupon_used + 1;
                                                    db.query(
                                                      "UPDATE main_admin_db.coupon_table SET coupon_used = ? where coupon_id = ?",
                                                      [used, coupon_no],
                                                      (err3X, result4) => {
                                                        if (err3X)
                                                          console.log(err3X);
                                                        else {
                                                          db.query(
                                                            "SELECT * FROM main_admin_db.coupon_table where coupon_id = ?",
                                                            [coupon_id],
                                                            (
                                                              err4,
                                                              result4X
                                                            ) => {
                                                              if (err4)
                                                                console.log(
                                                                  err4
                                                                );
                                                              else {
                                                                let uses =
                                                                  result4X[0]
                                                                    .uses;
                                                                let used_coupon =
                                                                  result4X[0]
                                                                    .coupon_used;

                                                                let remain =
                                                                  uses -
                                                                  used_coupon;
                                                                db.query(
                                                                  "UPDATE main_admin_db.coupon_table SET uses_remain = ? where coupon_id = ?",
                                                                  [
                                                                    remain,
                                                                    coupon_no,
                                                                  ],
                                                                  (
                                                                    err5X,
                                                                    result5
                                                                  ) => {
                                                                    if (err5X)
                                                                      console.log(
                                                                        err5X
                                                                      );
                                                                    else {
                                                                      res.send(
                                                                        result1
                                                                      );
                                                                    }
                                                                  }
                                                                );
                                                              }
                                                            }
                                                          );
                                                        }
                                                      }
                                                    );
                                                  }
                                                }
                                              );
                                            }
                                          }
                                        );
                                      }
                                    }
                                  );
                                }
                              });
                          }
                        }
                      );
                    }
                  }
                );
              }
            }
          );
        }
      }
    }
  );
});
app.get("/api/v1/myhrms/invoice/details/:id", (req, res) => {
  const { id } = req.params;
  db.query(
    "SELECT * FROM main_admin_db.ccav_res_payment_details where order_id = ?",
    [id],
    (err, result) => {
      if (err) console.log(err);
      else {
        db.query(
          "SELECT * FROM main_admin_db.myhrms_indi_cust_ids where order_id = ?",
          [id],
          (err2, result2) => {
            if (err2) console.log(err2);
            else
              res.send({
                res1: result,
                res2: result2,
              });
          }
        );
      }
    }
  );
});
app.get("/get/service/category/cloud/apps", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.product_cat WHERE id BETWEEN 9 AND 10",
    (err, result) => {
      if (err) console.log(err);
      else {
        res.status(200).send(result);
      }
    }
  );
});
//
app.get("/get/service/category/school/mgmt", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.product_cat WHERE id = 10",
    (err, result) => {
      if (err) console.log(err);
      else {
        res.status(200).send(result);
      }
    }
  );
});
// elearning
app.get("/get/service/category/learning", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.product_cat WHERE id IN (1, 8)",
    (err, result) => {
      if (err) console.log(err);
      else {
        res.status(200).send(result);
      }
    }
  );
});
// web development
app.get("/get/service/category/web/dev", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.product_cat WHERE id = 5",
    (err, result) => {
      if (err) console.log(err);
      else {
        res.status(200).send(result);
      }
    }
  );
});
// IT Support
app.get("/get/service/category/it/support", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.product_cat WHERE id IN (2,3,4)",
    (err, result) => {
      if (err) console.log(err);
      else {
        res.status(200).send(result);
      }
    }
  );
});
// compliance
app.get("/get/service/category/compliance", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.product_cat WHERE id = 6",
    (err, result) => {
      if (err) console.log(err);
      else {
        res.status(200).send(result);
      }
    }
  );
});
//get all email template data of practice customer registration
app.get("/api/v1/get/data/email/temp/myhrms/cust/reg", (req, res) => {
  try {
    db.query(
      "SELECT * FROM main_admin_db.email_temp_myhrms_indi_cust_reg where id = 1",
      (err, result) => {
        if (err) console.log(err);
        else res.send(result);
      }
    );
  } catch (error) {}
});
// update practice customer reg template
// config subject
app.put("/api/v1/update/temp/myhrms/cust/reg/subject", (req, res) => {
  const subject = req.body.subject1;
  db.query(
    "UPDATE `main_admin_db`.email_temp_myhrms_indi_cust_reg SET subject =?  WHERE id = 1",
    [subject],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

//update email url of
app.put("/api/v1/update/temp/myhrms/cust/reg/url", (req, res) => {
  const url = req.body.url;
  db.query(
    "UPDATE `main_admin_db`.email_temp_myhrms_indi_cust_reg SET url =?  WHERE id = 1",
    [url],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email message of
app.put("/api/v1/update/temp/myhrms/cust/reg/msg", (req, res) => {
  const message = req.body.message;
  db.query(
    "UPDATE `main_admin_db`.email_temp_myhrms_indi_cust_reg SET message =?  WHERE id = 1",
    [message],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email caution of
app.put("/api/v1/update/temp/myhrms/cust/reg/caution", (req, res) => {
  const caution = req.body.caution;
  db.query(
    "UPDATE `main_admin_db`.email_temp_myhrms_indi_cust_reg SET caution =?  WHERE id = 1",
    [caution],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});
//update email sign of
app.put("/api/v1/update/temp/myhrms/cust/reg/sign", (req, res) => {
  const sign = req.body.sign;
  db.query(
    "UPDATE `main_admin_db`.email_temp_myhrms_indi_cust_reg SET signature =?  WHERE id = 1",
    [sign],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.json(result);
      }
    }
  );
});

// create offline customer
app.post("/api/v1/offline/customer/reg", (req, res) => {
  const {
    company,
    webPortal,
    gstin,
    spocName,
    spocContact,
    buildingBlock,
    spocEmail,
    country,
    pincode,
    city,
    address,
    firstName,
    lastName,
    state,

    service,
  } = req.body;

  try {
    if (service.id === 1) {
      const random_four = generator.generate({
        length: 4,
        numbers: true,
        uppercase: true,
        lowercase: false,
      });
      const cust_id =
        firstName.slice(0, 2).toUpperCase() + random_four + "IND0";
      const query = `
        INSERT INTO main_admin_db.myveda_indi_cust_ids
        (full_name, email, country, number, cust_id, surname, city, address, state, pincode, gstin, reg_type)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?);
      `;
      db.query(
        query,
        [
          firstName,
          spocEmail,
          country,
          spocContact,
          cust_id,
          lastName,
          city,
          address,
          state,
          pincode,
          gstin,
          "Offline",
        ],
        (err, result) => {
          if (err) {
            console.error("Error executing the SQL query:", err);
            // Handle the error appropriately
          } else {
            db.query(
              "INSERT INTO `myveda-db`.user_course_map_table_la (uid,cust_id,invoice_type) values(?,?,?)",
              [spocEmail, cust_id, "Offline"],
              (err1, result1) => {
                if (err1) console.log(err1);
                else {
                  db.query(
                    "insert into `myveda-db`.active_usr_data_la(uid,status) values(?,?)",
                    [spocEmail, "1"],
                    (err33, result33) => {
                      if (err33) console.log(err33);
                      else {
                        res.status(200).send({
                          success: true,
                          message:
                            "! Offline Customer Registered Successfully.",
                        });
                      }
                    }
                  );
                }
              }
            );
          }
        }
      );
    } else if (service.id === 8) {
      const random_five = generator.generate({
        length: 5,
        numbers: true,
        uppercase: true,
        lowercase: false,
      });
      const cust_id = "PRACT" + random_five;
      const query = `
        INSERT INTO main_admin_db.praxis_indi_cust_ids
        (name,mail, country, number, cust_id, city, address, state, pincode, reg_type)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?,?);
      `;
      db.query(
        query,
        [
          firstName + " " + lastName,
          spocEmail,
          country,
          spocContact,
          cust_id,
          city,
          address,
          state,
          pincode,
          "Offline",
        ],
        (err, result) => {
          if (err) {
            console.error("Error executing the SQL query:", err);
            // Handle the error appropriately
          } else {
            res.status(200).send({
              success: true,
              message: "! Offline Customer Registered Successfully.",
            });
          }
        }
      );
    } else if (service.id === 9) {
      db.query(
        "SELECT * FROM main_admin_db.myshop_indi_cust_ids",
        (err23, result23) => {
          const newNo = result23.length + 1;
          const paddedId =
            newNo.toString().length < 4
              ? "0".repeat(4 - newNo.toString().length) + newNo
              : newNo;
          const cust_id = "MYSHOP" + paddedId;
          let domain_id = cust_id.toLowerCase() + ".myshop";
          const query = `
          INSERT INTO main_admin_db.myshop_indi_cust_ids
          (name,mail, country, number, cust_id, city, address, state, pincode, reg_type,gstin,company_name)
          VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?);
        `;
          db.query(
            query,
            [
              firstName + " " + lastName,
              spocEmail,
              country,
              spocContact,
              cust_id,
              city,
              address,
              state,
              pincode,
              "Offline",
              gstin,
              company,
            ],
            (err, result) => {
              if (err) {
                console.error("Error executing the SQL query:", err);
                // Handle the error appropriately
              } else {
                res.status(200).send({
                  success: true,
                  message: "! Offline Customer Registered Successfully.",
                });
              }
            }
          );
        }
      );
    } else if (service.id === 10) {
      db.query(
        "SELECT * FROM main_admin_db.myhrms_indi_cust_ids",
        (err23, result23) => {
          if (err23) console.log(err23);
          else {
            const newNo = result23.length + 1;
            const paddedId =
              newNo.toString().length < 4
                ? "0".repeat(4 - newNo.toString().length) + newNo
                : newNo;
            const cust_id = "MYHRMS" + paddedId;
            let domain_id = cust_id.toLowerCase() + ".myhrms";
            const query = `
      INSERT INTO main_admin_db.myhrms_indi_cust_ids
      (name,mail, country, number, cust_id, city, address, state, pincode, reg_type,gstin,comp_name,domain_id)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?);
    `;
            db.query(
              query,
              [
                firstName + " " + lastName,
                spocEmail,
                country,
                spocContact,
                cust_id,
                city,
                address,
                state,
                pincode,
                "Offline",
                gstin,
                company,
                domain_id,
              ],
              (err, result) => {
                if (err) {
                  console.error("Error executing the SQL query:", err);
                  // Handle the error appropriately
                } else {
                  res.status(200).send({
                    success: true,
                    message: "! Offline Customer Registered Successfully.",
                  });
                }
              }
            );
          }
        }
      );
    } else if (
      service.id === 2 ||
      service.id === 3 ||
      service.id === 4 ||
      service.id === 5 ||
      service.id === 6 ||
      service.id === 7
    ) {
      db.query(
        "SELECT * FROM main_admin_db.product_cat where id = ?",
        [service?.id],
        (errServ, resultServ) => {
          if (errServ) {
            console.log(errServ);
          } else {
            const { category_title } = resultServ[0];
            db.query(
              `SELECT * FROM main_admin_db.offline_cust_reg_indi where service_id = ?`,
              [service.id],
              (err, result) => {
                if (err) console.log(err);
                else {
                  const checkCust_id = () => {
                    if (service.id === 2) {
                      return "MYIT";
                    } else if (service.id === 3) {
                      return "MYITSHOP";
                    } else if (service.id === 4) {
                      return "INFRA";
                    } else if (service.id === 5) {
                      return "MYWEB";
                    } else if (service.id === 6) {
                      return "MYCOMP";
                    } else if (service.id === 7) {
                      return "MYLMS";
                    }
                  };
                  const pr_cust_id = checkCust_id();
                  const newNo = result.length + 1;
                  const paddedId =
                    newNo.toString().length < 4
                      ? "0".repeat(4 - newNo.toString().length) + newNo
                      : newNo;
                  const cust_id = pr_cust_id + paddedId;

                  db.query(
                    `insert into main_admin_db.offline_cust_reg_indi(comp_indi_name,
                      webPortal,
                      GSTIN,
                      spocName,
                      email,
                      contact,
                      country,
                      city,
                      pincode,
                      address,
                      buildingBlock,
                    
                      cust_id,
                      reg_type,
                      service_id,
                      service_name,
                      status) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`,
                    [
                      company,
                      webPortal,
                      gstin,
                      firstName + " " + lastName,
                      spocEmail,
                      spocContact,
                      country,
                      city,
                      pincode,
                      address,
                      buildingBlock,

                      cust_id,
                      "Offline",
                      service.id,
                      category_title,
                      0,
                    ],
                    (err2, result2) => {
                      if (err2) console.log(err2);
                      else
                        res.status(200).send({
                          success: true,
                          message:
                            "! Offline Customer Registered Successfully.",
                        });
                    }
                  );
                }
              }
            );
          }
        }
      );
    }
  } catch (error) {
    console.log(error);
  }
});
// get offline customer list
app.get("/api/v1/offline/invoice/get/individual/customer/:id", (req, res) => {
  var { id } = req.params;
  id = parseInt(id);
  if (id === 1) {
    db.query(
      "select * from main_admin_db.myveda_indi_cust_ids",

      (err, result) => {
        if (err) console.log(err);
        else {
          res.status(200).send({
            success: true,
            data: result,
          });
        }
      }
    );
  } else if (id === 8) {
    db.query(
      "select * from main_admin_db.praxis_indi_cust_ids",

      (err, result) => {
        if (err) console.log(err);
        else {
          res.status(200).send({
            success: true,
            data: result,
          });
        }
      }
    );
  } else if (id === 9) {
    db.query(
      "select * from main_admin_db.myshop_indi_cust_ids",

      (err, result) => {
        if (err) console.log(err);
        else {
          res.status(200).send({
            success: true,
            data: result,
          });
        }
      }
    );
  } else if (id === 10) {
    db.query(
      "select * from main_admin_db.myhrms_indi_cust_ids",

      (err, result) => {
        if (err) console.log(err);
        else {
          res.status(200).send({
            success: true,
            data: result,
          });
        }
      }
    );
  } else {
    db.query(
      " SELECT *, spocName as name,contact as number FROM main_admin_db.offline_cust_reg_indi",
      (err, result) => {
        if (err) console.log(err);
        else {
          res.status(200).send({
            success: true,
            data: result,
          });
        }
      }
    );
  }
});

// get product category row data =

app.get("/get/product/service/all/row/data/:id", (req, res) => {
  const { id } = req.params;
  try {
    db.query(
      "SELECT * FROM main_admin_db.product_cat where id = ?",
      [parseInt(id)],
      (err, rows) => {
        if (err) console.log(err, " : error while getting data of a service");
        else
          res.status(200).send({
            sucess: true,
            data: rows,
          });
      }
    );
  } catch (error) {}
});
// update url and cin
app.put("/update/footer/info/data/cin/url", (req, res) => {
  const { cin_no, url } = req.body.formData;
  if (cin_no) {
    db.query(
      "update main_admin_db.footer_service_home set cin = ? where id  = ?",
      [cin_no.toUpperCase(), 1],
      (err, result) => {
        if (err) console.log(err, " : error while updating cin number");
        else res.status(200).send({ success: true });
      }
    );
  } else {
    db.query(
      "update main_admin_db.footer_service_home set url = ? where id  = ?",
      [url, 1],
      (err, result) => {
        if (err) console.log(err, " : error while updating URL");
        else res.status(200).send({ success: true });
      }
    );
  }
});

// online gstin myveda inv
app.get("/api/v1/get/gst/all/inv/data", (req, res) => {
  db.query(
    "SELECT * FROM main_admin_db.tax_invoice_order_myvedait where tax_applicability = ?",
    ["Plus-Tax"],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});
app.get("/get/myit/ft/inv/gst/inv/data", (req, res) => {
  db.query(
    "select * from main_admin_db.invoice_order_myit_ft where ccav_order_status = ?",
    ["Success"],
    (err, result) => {
      if (err) console.log(err);
      else res.send(result);
    }
  );
});

// app
app.get("/get/invoice/data/order/:cust_id:/order_id", (req, res) => {
  const { cust_id, order_id } = req.params;
  try {
    db.query(
      "SELECT * FROM main_admin_db.proforma_invoices_myvedait where cust_id = ? and order_id = ?",
      [cust_id, order_id],
      (err, result) => {
        if (err)
          console.log(
            err,
            " : error while getting proforma all invoices data of order"
          );
        else
          res.status(200).send({
            success: true,
            data: result,
          });
      }
    );
  } catch (error) {
    console.log(error);
  }
});

// test html file
app.get("/html/file", (req, res) => {
  const filename = "Index.html";

  console.log(__dirname);
  const filePath = path.join(__dirname, "./app_data", filename);
  console.log(filePath);
  res.sendFile(filename, { root: "./app_data/" });
  // fs.readFile(filePath, (err, data) => {
  //   if (err) {
  //     return res.status(500).send(err);
  //   }
  //   res.sendFile(data);
  // });
});
//
app.post("/test/data", (req, res) => {
  const data = req.body;
  console.log(data.name);
});

//
app.get("/about", function (req, res) {
  // You can render an EJS template or send a static HTML file, but not both
  // If you want to render an EJS template, use res.render
  res.render("success"); // Assuming your EJS template is named 'success.html'
});
var http = require("http"),
  ccav = require("./config/payment/ccavutil"),
  qs = require("querystring"),
  ccavReqHandler = require("./config/payment/ccavRequestHandler"),
  ccavResHandler = require("./config/payment/ccavResponseHandler"),
  ccavCancelHandler = require("./config/payment/ccavCancelHanlder");

app.post("/ccavRequestHandler", (req, res) => {
  console.log(req.body);
  ccavReqHandler.postReq(req, res);
});

app.get("/my/req/handler", (req, res) => {
  console.log(req);
  console.log(req.body);
  // ccavReqHandler.postReq(request, response);
});
app.post("/myvedait/payment/success", function (request, response) {
  ccavResHandler.postRes(request, response);
});
app.post("/myvedait/payment/cancel", function (request, response) {
  ccavCancelHandler.postRes(request, response);
});
//
const nodeCCAvenue = require("node-ccavenue");
const ccav1 = new nodeCCAvenue.Configure({
  merchant_id: merchantId,
  working_key: workingKey,
});
//
app.post("/send/payment", (req, res) => {
  const orderParams = {
    order_id: 8765432,
    currency: "INR",
    amount: "100",
    redirect_url: encodeURIComponent(`http://localhost:3000/api/redirect_url/`),
    billing_name: "Name of the customer",
    // etc etc
  };
  const encryptedOrderData = ccav1.getEncryptedOrder(orderParams);
  console.log(encryptedOrderData);
  const decryptedJsonResponse =
    ccav1.redirectResponseToJson(encryptedOrderData);
  console.log(decryptedJsonResponse);
});

// myvedait payment education

(ccavReqHandlerEdu = require("./config/PG_Edu/ccavRequestHandler")),
  (ccavResHandlerEdu = require("./config/PG_Edu/ccavResponseHandler")),
  (ccavCancelHandlerEdu = require("./config/PG_Edu/ccavCancelHanlder"));

app.post("/myvedit/edu/req/handler", (req, res) => {
  console.log(req.body);
  ccavReqHandlerEdu.postReq(req, res);
});

app.get("/my/req/handler", (req, res) => {
  console.log(req);
  console.log(req.body);
  // ccavReqHandlerEdu.postReq(request, response);
});
app.post("/myvedait/edu/payment/success", function (request, response) {
  ccavResHandlerEdu.postRes(request, response);
});
app.post("/myvedait/edu/payment/cancel", function (request, response) {
  ccavCancelHandlerEdu.postRes(request, response);
});

//
app.listen(3004, () => {
  console.log("running on prot 3004");
});
